
package multiCloud;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.chocosolver.solver.ResolutionPolicy;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.Constraint;
import org.chocosolver.solver.constraints.IntConstraintFactory;
import org.chocosolver.solver.constraints.LogicalConstraintFactory;
import org.chocosolver.solver.constraints.SatFactory;
import org.chocosolver.solver.constraints.nary.cnf.LogOp;
import org.chocosolver.solver.search.loop.monitors.SMF;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.strategy.IntStrategy;
import org.chocosolver.solver.trace.Chatterbox;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.Variable;
import org.chocosolver.solver.variables.VariableFactory;
import searchStrategies.Utilities;

public class MultiCloud {
	private static Solver solver;
	private static BoolVar root1_root;
	private static BoolVar root1_F1;
	private static BoolVar root1_F2;
	private static BoolVar root1_F42;
	private static BoolVar root1_F46;
	private static BoolVar root1_F47;
	private static BoolVar root1_F48;
	private static BoolVar root1_F258;
	private static BoolVar root1_F259;
	private static BoolVar root1_F260;
	private static BoolVar root1_F261;
	private static BoolVar root1_F262;
	private static BoolVar root1_F263;
	private static BoolVar root1_F264;
	private static BoolVar root1_F265;
	private static BoolVar root1_F266;
	private static BoolVar root1_F49;
	private static BoolVar root1_F73;
	private static BoolVar root1_F81;
	private static BoolVar root1_F82;
	private static BoolVar root1_F74;
	private static BoolVar root1_F75;
	private static BoolVar root1_F228;
	private static BoolVar root1_F76;
	private static BoolVar root1_F77;
	private static BoolVar root1_F157;
	private static BoolVar root1_F158;
	private static BoolVar root1_F159;
	private static BoolVar root1_F160;
	private static BoolVar root1_F161;
	private static BoolVar root1_F162;
	private static BoolVar root1_F163;
	private static BoolVar root1_F78;
	private static BoolVar root1_F79;
	private static BoolVar root1_F115;
	private static BoolVar root1_F257;
	private static BoolVar root1_F116;
	private static BoolVar root1_F117;
	private static BoolVar root1_F118;
	private static BoolVar root1_F119;
	private static BoolVar root1_F128;
	private static BoolVar root1_F129;
	private static BoolVar root1_F130;
	private static BoolVar root1_F184;
	private static BoolVar root1_F185;
	private static BoolVar root1_F247;
	private static BoolVar root1_F186;
	private static BoolVar root1_F187;
	private static BoolVar root1_F188;
	private static BoolVar root1_F236;
	private static BoolVar root1_F237;
	private static BoolVar root1_F238;
	private static BoolVar root1_F239;
	private static BoolVar root1_F240;
	private static BoolVar root1_F189;
	private static BoolVar root1_F190;
	private static BoolVar root1_F191;
	private static BoolVar root1_F131;
	private static BoolVar root1_F132;
	private static BoolVar root1_F133;
	private static BoolVar root1_F134;
	private static BoolVar root1_F120;
	private static BoolVar root1_F121;
	private static BoolVar root1_F80;
	private static BoolVar root1_F164;
	private static BoolVar root1_F165;
	private static BoolVar root1_F166;
	private static BoolVar root1_F167;
	private static BoolVar root1_F269;
	private static BoolVar root1_F270;
	private static BoolVar root1_F271;
	private static BoolVar root1_F272;
	private static BoolVar root1_F273;
	private static BoolVar root1_F274;
	private static BoolVar root1_F168;
	private static BoolVar root1_F169;
	private static BoolVar root1_F50;
	private static BoolVar root1_F51;
	private static BoolVar root1_F52;
	private static BoolVar root1_F53;
	private static BoolVar root1_F54;
	private static BoolVar root1_F55;
	private static BoolVar root1_F43;
	private static BoolVar root1_F145;
	private static BoolVar root1_F146;
	private static BoolVar root1_F147;
	private static BoolVar root1_F148;
	private static BoolVar root1_F44;
	private static BoolVar root1_F170;
	private static BoolVar root1_F171;
	private static BoolVar root1_F201;
	private static BoolVar root1_F202;
	private static BoolVar root1_F203;
	private static BoolVar root1_F204;
	private static BoolVar root1_F205;
	private static BoolVar root1_F306;
	private static BoolVar root1_F206;
	private static BoolVar root1_F207;
	private static BoolVar root1_F208;
	private static BoolVar root1_F209;
	private static BoolVar root1_F210;
	private static BoolVar root1_F45;
	private static BoolVar root1_F3;
	private static BoolVar root1_F69;
	private static BoolVar root1_F70;
	private static BoolVar root1_F143;
	private static BoolVar root1_F144;
	private static BoolVar root1_F71;
	private static BoolVar root1_F211;
	private static BoolVar root1_F212;
	private static BoolVar root1_F229;
	private static BoolVar root1_F235;
	private static BoolVar root1_F230;
	private static BoolVar root1_F231;
	private static BoolVar root1_F232;
	private static BoolVar root1_F233;
	private static BoolVar root1_F234;
	private static BoolVar root1_F213;
	private static BoolVar root1_F294;
	private static BoolVar root1_F214;
	private static BoolVar root1_F215;
	private static BoolVar root1_F216;
	private static BoolVar root1_F217;
	private static BoolVar root1_F218;
	private static BoolVar root1_F219;
	private static BoolVar root1_F4;
	private static BoolVar root1_F267;
	private static BoolVar root1_F268;
	private static BoolVar root1_F5;
	private static BoolVar root1_F90;
	private static BoolVar root1_F280;
	private static BoolVar root1_F281;
	private static BoolVar root1_F282;
	private static BoolVar root1_F6;
	private static BoolVar root1_F11;
	private static BoolVar root1_F112;
	private static BoolVar root1_F113;
	private static BoolVar root1_F192;
	private static BoolVar root1_F193;
	private static BoolVar root1_F194;
	private static BoolVar root1_F195;
	private static BoolVar root1_F196;
	private static BoolVar root1_F197;
	private static BoolVar root1_F198;
	private static BoolVar root1_F199;
	private static BoolVar root1_F200;
	private static BoolVar root1_F12;
	private static BoolVar root1_F59;
	private static BoolVar root1_F149;
	private static BoolVar root1_F150;
	private static BoolVar root1_F151;
	private static BoolVar root1_F152;
	private static BoolVar root1_F153;
	private static BoolVar root1_F154;
	private static BoolVar root1_F155;
	private static BoolVar root1_F172;
	private static BoolVar root1_F173;
	private static BoolVar root1_F174;
	private static BoolVar root1_F175;
	private static BoolVar root1_F176;
	private static BoolVar root1_F177;
	private static BoolVar root1_F178;
	private static BoolVar root1_F226;
	private static BoolVar root1_F227;
	private static BoolVar root1_F179;
	private static BoolVar root1_F156;
	private static BoolVar root1_F60;
	private static BoolVar root1_F122;
	private static BoolVar root1_F123;
	private static BoolVar root1_F124;
	private static BoolVar root1_F125;
	private static BoolVar root1_F126;
	private static BoolVar root1_F127;
	private static BoolVar root1_F61;
	private static BoolVar root1_F62;
	private static BoolVar root1_F63;
	private static BoolVar root1_F220;
	private static BoolVar root1_F221;
	private static BoolVar root1_F222;
	private static BoolVar root1_F223;
	private static BoolVar root1_F224;
	private static BoolVar root1_F225;
	private static BoolVar root1_F64;
	private static BoolVar root1_F65;
	private static BoolVar root1_F66;
	private static BoolVar root1_F67;
	private static BoolVar root1_F68;
	private static BoolVar root1_F13;
	private static BoolVar root1_F14;
	private static BoolVar root1_F91;
	private static BoolVar root1_F92;
	private static BoolVar root1_F103;
	private static BoolVar root1_F104;
	private static BoolVar root1_F105;
	private static BoolVar root1_F106;
	private static BoolVar root1_F107;
	private static BoolVar root1_F108;
	private static BoolVar root1_F109;
	private static BoolVar root1_F110;
	private static BoolVar root1_F111;
	private static BoolVar root1_F93;
	private static BoolVar root1_F94;
	private static BoolVar root1_F95;
	private static BoolVar root1_F180;
	private static BoolVar root1_F181;
	private static BoolVar root1_F182;
	private static BoolVar root1_F183;
	private static BoolVar root1_F96;
	private static BoolVar root1_F15;
	private static BoolVar root1_F16;
	private static BoolVar root1_F40;
	private static BoolVar root1_F41;
	private static BoolVar root1_F17;
	private static BoolVar root1_F28;
	private static BoolVar root1_F29;
	private static BoolVar root1_F30;
	private static BoolVar root1_F18;
	private static BoolVar root1_F97;
	private static BoolVar root1_F98;
	private static BoolVar root1_F139;
	private static BoolVar root1_F140;
	private static BoolVar root1_F141;
	private static BoolVar root1_F142;
	private static BoolVar root1_F99;
	private static BoolVar root1_F100;
	private static BoolVar root1_F101;
	private static BoolVar root1_F102;
	private static BoolVar root1_F283;
	private static BoolVar root1_F284;
	private static BoolVar root1_F300;
	private static BoolVar root1_F285;
	private static BoolVar root1_F7;
	private static BoolVar root1_F8;
	private static BoolVar root1_F19;
	private static BoolVar root1_F20;
	private static BoolVar root1_F72;
	private static BoolVar root1_F135;
	private static BoolVar root1_F136;
	private static BoolVar root1_F137;
	private static BoolVar root1_F138;
	private static BoolVar root1_F21;
	private static BoolVar root1_F22;
	private static BoolVar root1_F23;
	private static BoolVar root1_F24;
	private static BoolVar root1_F318;
	private static BoolVar root1_F319;
	private static BoolVar root1_F25;
	private static BoolVar root1_F31;
	private static BoolVar root1_F32;
	private static BoolVar root1_F114;
	private static BoolVar root1_F33;
	private static BoolVar root1_F83;
	private static BoolVar root1_F84;
	private static BoolVar root1_F248;
	private static BoolVar root1_F249;
	private static BoolVar root1_F250;
	private static BoolVar root1_F251;
	private static BoolVar root1_F252;
	private static BoolVar root1_F253;
	private static BoolVar root1_F254;
	private static BoolVar root1_F255;
	private static BoolVar root1_F256;
	private static BoolVar root1_F85;
	private static BoolVar root1_F312;
	private static BoolVar root1_F313;
	private static BoolVar root1_F314;
	private static BoolVar root1_F315;
	private static BoolVar root1_F316;
	private static BoolVar root1_F317;
	private static BoolVar root1_F86;
	private static BoolVar root1_F87;
	private static BoolVar root1_F88;
	private static BoolVar root1_F89;
	private static BoolVar root1_F34;
	private static BoolVar root1_F35;
	private static BoolVar root1_F36;
	private static BoolVar root1_F241;
	private static BoolVar root1_F242;
	private static BoolVar root1_F243;
	private static BoolVar root1_F244;
	private static BoolVar root1_F245;
	private static BoolVar root1_F246;
	private static BoolVar root1_F37;
	private static BoolVar root1_F38;
	private static BoolVar root1_F295;
	private static BoolVar root1_F296;
	private static BoolVar root1_F297;
	private static BoolVar root1_F298;
	private static BoolVar root1_F299;
	private static BoolVar root1_F39;
	private static BoolVar root1_F26;
	private static BoolVar root1_F275;
	private static BoolVar root1_F276;
	private static BoolVar root1_F277;
	private static BoolVar root1_F278;
	private static BoolVar root1_F279;
	private static BoolVar root1_F27;
	private static BoolVar root1_F9;
	private static BoolVar root1_F56;
	private static BoolVar root1_F57;
	private static BoolVar root1_F58;
	private static BoolVar root1_F10;
	private static BoolVar root1_F286;
	private static BoolVar root1_F287;
	private static BoolVar root1_F301;
	private static BoolVar root1_F302;
	private static BoolVar root1_F303;
	private static BoolVar root1_F304;
	private static BoolVar root1_F305;
	private static BoolVar root1_F288;
	private static BoolVar root1_F289;
	private static BoolVar root1_F307;
	private static BoolVar root1_F308;
	private static BoolVar root1_F309;
	private static BoolVar root1_F310;
	private static BoolVar root1_F311;
	private static BoolVar root1_F290;
	private static BoolVar root1_F291;
	private static BoolVar root1_F292;
	private static BoolVar root1_F293;
		private static HashMap<String, IntVar> featureAttrAtribute1;
		private static HashMap<String, IntVar> featureAttrAtribute0;
	
	public static void main(String[] args) {
		solver = new Solver();
		
		//--------------------------------------------
		//Features
		//--------------------------------------------
		initializeVars();
		
		//--------------------------------------------
		//Feature Attributes
		//--------------------------------------------
		initializeFeatureAttributes();
		
		//--------------------------------------------
		//Tree Constraints
		//--------------------------------------------
		Constraint optionalroot1_root_root1_F1 = IntConstraintFactory.arithm(root1_F1, "<=", root1_root);
		optionalroot1_root_root1_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F1);
		Constraint mandatoryroot1_root_root1_F2 = IntConstraintFactory.arithm(root1_root, "=", root1_F2);
		mandatoryroot1_root_root1_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F2);
		Constraint optionalroot1_F2_root1_F42 = IntConstraintFactory.arithm(root1_F42, "<=", root1_F2);
		optionalroot1_F2_root1_F42.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F2_root1_F42);
		Constraint optionalroot1_F42_root1_F46 = IntConstraintFactory.arithm(root1_F46, "<=", root1_F42);
		optionalroot1_F42_root1_F46.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F42_root1_F46);
		Constraint mandatoryroot1_F42_root1_F47 = IntConstraintFactory.arithm(root1_F42, "=", root1_F47);
		mandatoryroot1_F42_root1_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F47);
		Constraint optionalroot1_F42_root1_F48 = IntConstraintFactory.arithm(root1_F48, "<=", root1_F42);
		optionalroot1_F42_root1_F48.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F42_root1_F48);
		Constraint mandatoryroot1_F48_root1_F258 = IntConstraintFactory.arithm(root1_F48, "=", root1_F258);
		mandatoryroot1_F48_root1_F258.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F258);
		Constraint optionalroot1_F48_root1_F259 = IntConstraintFactory.arithm(root1_F259, "<=", root1_F48);
		optionalroot1_F48_root1_F259.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F48_root1_F259);
		Constraint optionalroot1_F48_root1_F260 = IntConstraintFactory.arithm(root1_F260, "<=", root1_F48);
		optionalroot1_F48_root1_F260.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F48_root1_F260);
		Constraint mandatoryroot1_F48_root1_F261 = IntConstraintFactory.arithm(root1_F48, "=", root1_F261);
		mandatoryroot1_F48_root1_F261.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F261);
		Constraint optionalroot1_F48_root1_F262 = IntConstraintFactory.arithm(root1_F262, "<=", root1_F48);
		optionalroot1_F48_root1_F262.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F48_root1_F262);
		IntVar sumOrroot1_F48_5 = VariableFactory.enumerated("sumOrroot1_F48", 0, 2, solver); 
		BoolVar[] varsOrroot1_F48_5 = new BoolVar[2];
		varsOrroot1_F48_5[0] = root1_F263;
		varsOrroot1_F48_5[1] = root1_F264;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F48_5, sumOrroot1_F48_5));
		Constraint or1root1_F48_5 = IntConstraintFactory.arithm(sumOrroot1_F48_5, ">=", 1);
		or1root1_F48_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F48_5 = IntConstraintFactory.arithm(sumOrroot1_F48_5, "=", 0);
		or0root1_F48_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F48, or1root1_F48_5, or0root1_F48_5);
			
		Constraint mandatoryroot1_F48_root1_F265 = IntConstraintFactory.arithm(root1_F48, "=", root1_F265);
		mandatoryroot1_F48_root1_F265.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F265);
		Constraint mandatoryroot1_F48_root1_F266 = IntConstraintFactory.arithm(root1_F48, "=", root1_F266);
		mandatoryroot1_F48_root1_F266.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F266);
		Constraint optionalroot1_F42_root1_F49 = IntConstraintFactory.arithm(root1_F49, "<=", root1_F42);
		optionalroot1_F42_root1_F49.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F42_root1_F49);
		Constraint optionalroot1_F49_root1_F73 = IntConstraintFactory.arithm(root1_F73, "<=", root1_F49);
		optionalroot1_F49_root1_F73.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F49_root1_F73);
		Constraint optionalroot1_F73_root1_F81 = IntConstraintFactory.arithm(root1_F81, "<=", root1_F73);
		optionalroot1_F73_root1_F81.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F73_root1_F81);
		Constraint optionalroot1_F73_root1_F82 = IntConstraintFactory.arithm(root1_F82, "<=", root1_F73);
		optionalroot1_F73_root1_F82.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F73_root1_F82);
		Constraint optionalroot1_F49_root1_F74 = IntConstraintFactory.arithm(root1_F74, "<=", root1_F49);
		optionalroot1_F49_root1_F74.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F49_root1_F74);
		Constraint optionalroot1_F49_root1_F75 = IntConstraintFactory.arithm(root1_F75, "<=", root1_F49);
		optionalroot1_F49_root1_F75.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F49_root1_F75);
		Constraint mandatoryroot1_F75_root1_F228 = IntConstraintFactory.arithm(root1_F75, "=", root1_F228);
		mandatoryroot1_F75_root1_F228.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F75_root1_F228);
		Constraint optionalroot1_F49_root1_F76 = IntConstraintFactory.arithm(root1_F76, "<=", root1_F49);
		optionalroot1_F49_root1_F76.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F49_root1_F76);
		IntVar sumOrroot1_F49_4 = VariableFactory.enumerated("sumOrroot1_F49", 0, 2, solver); 
		BoolVar[] varsOrroot1_F49_4 = new BoolVar[2];
		varsOrroot1_F49_4[0] = root1_F77;
		varsOrroot1_F49_4[1] = root1_F78;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F49_4, sumOrroot1_F49_4));
		Constraint or1root1_F49_4 = IntConstraintFactory.arithm(sumOrroot1_F49_4, ">=", 1);
		or1root1_F49_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F49_4 = IntConstraintFactory.arithm(sumOrroot1_F49_4, "=", 0);
		or0root1_F49_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F49, or1root1_F49_4, or0root1_F49_4);
			
		Constraint mandatoryroot1_F77_root1_F157 = IntConstraintFactory.arithm(root1_F77, "=", root1_F157);
		mandatoryroot1_F77_root1_F157.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F77_root1_F157);
		Constraint mandatoryroot1_F77_root1_F158 = IntConstraintFactory.arithm(root1_F77, "=", root1_F158);
		mandatoryroot1_F77_root1_F158.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F77_root1_F158);
		IntVar sumOrroot1_F77_2 = VariableFactory.enumerated("sumOrroot1_F77", 0, 2, solver); 
		BoolVar[] varsOrroot1_F77_2 = new BoolVar[2];
		varsOrroot1_F77_2[0] = root1_F159;
		varsOrroot1_F77_2[1] = root1_F160;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F77_2, sumOrroot1_F77_2));
		Constraint or1root1_F77_2 = IntConstraintFactory.arithm(sumOrroot1_F77_2, ">=", 1);
		or1root1_F77_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F77_2 = IntConstraintFactory.arithm(sumOrroot1_F77_2, "=", 0);
		or0root1_F77_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F77, or1root1_F77_2, or0root1_F77_2);
			
		Constraint mandatoryroot1_F77_root1_F161 = IntConstraintFactory.arithm(root1_F77, "=", root1_F161);
		mandatoryroot1_F77_root1_F161.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F77_root1_F161);
		Constraint mandatoryroot1_F77_root1_F162 = IntConstraintFactory.arithm(root1_F77, "=", root1_F162);
		mandatoryroot1_F77_root1_F162.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F77_root1_F162);
		Constraint mandatoryroot1_F77_root1_F163 = IntConstraintFactory.arithm(root1_F77, "=", root1_F163);
		mandatoryroot1_F77_root1_F163.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F77_root1_F163);
		Constraint mandatoryroot1_F49_root1_F79 = IntConstraintFactory.arithm(root1_F49, "=", root1_F79);
		mandatoryroot1_F49_root1_F79.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F49_root1_F79);
		Constraint optionalroot1_F79_root1_F115 = IntConstraintFactory.arithm(root1_F115, "<=", root1_F79);
		optionalroot1_F79_root1_F115.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F79_root1_F115);
		Constraint optionalroot1_F115_root1_F257 = IntConstraintFactory.arithm(root1_F257, "<=", root1_F115);
		optionalroot1_F115_root1_F257.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F115_root1_F257);
		Constraint mandatoryroot1_F79_root1_F116 = IntConstraintFactory.arithm(root1_F79, "=", root1_F116);
		mandatoryroot1_F79_root1_F116.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F79_root1_F116);
		Constraint optionalroot1_F79_root1_F117 = IntConstraintFactory.arithm(root1_F117, "<=", root1_F79);
		optionalroot1_F79_root1_F117.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F79_root1_F117);
		Constraint mandatoryroot1_F79_root1_F118 = IntConstraintFactory.arithm(root1_F79, "=", root1_F118);
		mandatoryroot1_F79_root1_F118.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F79_root1_F118);
		IntVar sumOrroot1_F79_4 = VariableFactory.enumerated("sumOrroot1_F79", 0, 3, solver); 
		BoolVar[] varsOrroot1_F79_4 = new BoolVar[3];
		varsOrroot1_F79_4[0] = root1_F119;
		varsOrroot1_F79_4[1] = root1_F120;
		varsOrroot1_F79_4[2] = root1_F121;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F79_4, sumOrroot1_F79_4));
		Constraint or1root1_F79_4 = IntConstraintFactory.arithm(sumOrroot1_F79_4, ">=", 1);
		or1root1_F79_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F79_4 = IntConstraintFactory.arithm(sumOrroot1_F79_4, "=", 0);
		or0root1_F79_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F79, or1root1_F79_4, or0root1_F79_4);
			
		Constraint optionalroot1_F119_root1_F128 = IntConstraintFactory.arithm(root1_F128, "<=", root1_F119);
		optionalroot1_F119_root1_F128.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F119_root1_F128);
		Constraint mandatoryroot1_F119_root1_F129 = IntConstraintFactory.arithm(root1_F119, "=", root1_F129);
		mandatoryroot1_F119_root1_F129.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F119_root1_F129);
		Constraint optionalroot1_F119_root1_F130 = IntConstraintFactory.arithm(root1_F130, "<=", root1_F119);
		optionalroot1_F119_root1_F130.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F119_root1_F130);
		Constraint optionalroot1_F130_root1_F184 = IntConstraintFactory.arithm(root1_F184, "<=", root1_F130);
		optionalroot1_F130_root1_F184.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F130_root1_F184);
		Constraint mandatoryroot1_F130_root1_F185 = IntConstraintFactory.arithm(root1_F130, "=", root1_F185);
		mandatoryroot1_F130_root1_F185.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F130_root1_F185);
		Constraint mandatoryroot1_F185_root1_F247 = IntConstraintFactory.arithm(root1_F185, "=", root1_F247);
		mandatoryroot1_F185_root1_F247.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F185_root1_F247);
		Constraint optionalroot1_F130_root1_F186 = IntConstraintFactory.arithm(root1_F186, "<=", root1_F130);
		optionalroot1_F130_root1_F186.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F130_root1_F186);
		Constraint mandatoryroot1_F130_root1_F187 = IntConstraintFactory.arithm(root1_F130, "=", root1_F187);
		mandatoryroot1_F130_root1_F187.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F130_root1_F187);
		Constraint optionalroot1_F130_root1_F188 = IntConstraintFactory.arithm(root1_F188, "<=", root1_F130);
		optionalroot1_F130_root1_F188.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F130_root1_F188);
		Constraint optionalroot1_F188_root1_F236 = IntConstraintFactory.arithm(root1_F236, "<=", root1_F188);
		optionalroot1_F188_root1_F236.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F188_root1_F236);
		Constraint optionalroot1_F188_root1_F237 = IntConstraintFactory.arithm(root1_F237, "<=", root1_F188);
		optionalroot1_F188_root1_F237.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F188_root1_F237);
		Constraint mandatoryroot1_F188_root1_F238 = IntConstraintFactory.arithm(root1_F188, "=", root1_F238);
		mandatoryroot1_F188_root1_F238.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F188_root1_F238);
		IntVar sumOrroot1_F188_3 = VariableFactory.enumerated("sumOrroot1_F188", 0, 2, solver); 
		BoolVar[] varsOrroot1_F188_3 = new BoolVar[2];
		varsOrroot1_F188_3[0] = root1_F239;
		varsOrroot1_F188_3[1] = root1_F240;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F188_3, sumOrroot1_F188_3));
		Constraint or1root1_F188_3 = IntConstraintFactory.arithm(sumOrroot1_F188_3, ">=", 1);
		or1root1_F188_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F188_3 = IntConstraintFactory.arithm(sumOrroot1_F188_3, "=", 0);
		or0root1_F188_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F188, or1root1_F188_3, or0root1_F188_3);
			
		Constraint optionalroot1_F130_root1_F189 = IntConstraintFactory.arithm(root1_F189, "<=", root1_F130);
		optionalroot1_F130_root1_F189.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F130_root1_F189);
		Constraint mandatoryroot1_F130_root1_F190 = IntConstraintFactory.arithm(root1_F130, "=", root1_F190);
		mandatoryroot1_F130_root1_F190.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F130_root1_F190);
		Constraint mandatoryroot1_F130_root1_F191 = IntConstraintFactory.arithm(root1_F130, "=", root1_F191);
		mandatoryroot1_F130_root1_F191.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F130_root1_F191);
		Constraint mandatoryroot1_F119_root1_F131 = IntConstraintFactory.arithm(root1_F119, "=", root1_F131);
		mandatoryroot1_F119_root1_F131.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F119_root1_F131);
		Constraint optionalroot1_F119_root1_F132 = IntConstraintFactory.arithm(root1_F132, "<=", root1_F119);
		optionalroot1_F119_root1_F132.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F119_root1_F132);
		Constraint optionalroot1_F119_root1_F133 = IntConstraintFactory.arithm(root1_F133, "<=", root1_F119);
		optionalroot1_F119_root1_F133.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F119_root1_F133);
		Constraint optionalroot1_F119_root1_F134 = IntConstraintFactory.arithm(root1_F134, "<=", root1_F119);
		optionalroot1_F119_root1_F134.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F119_root1_F134);
		Constraint mandatoryroot1_F49_root1_F80 = IntConstraintFactory.arithm(root1_F49, "=", root1_F80);
		mandatoryroot1_F49_root1_F80.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F49_root1_F80);
		Constraint optionalroot1_F80_root1_F164 = IntConstraintFactory.arithm(root1_F164, "<=", root1_F80);
		optionalroot1_F80_root1_F164.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F80_root1_F164);
		Constraint mandatoryroot1_F80_root1_F165 = IntConstraintFactory.arithm(root1_F80, "=", root1_F165);
		mandatoryroot1_F80_root1_F165.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F80_root1_F165);
		IntVar sumOrroot1_F80_2 = VariableFactory.enumerated("sumOrroot1_F80", 0, 2, solver); 
		BoolVar[] varsOrroot1_F80_2 = new BoolVar[2];
		varsOrroot1_F80_2[0] = root1_F166;
		varsOrroot1_F80_2[1] = root1_F167;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F80_2, sumOrroot1_F80_2));
		Constraint or1root1_F80_2 = IntConstraintFactory.arithm(sumOrroot1_F80_2, ">=", 1);
		or1root1_F80_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F80_2 = IntConstraintFactory.arithm(sumOrroot1_F80_2, "=", 0);
		or0root1_F80_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F80, or1root1_F80_2, or0root1_F80_2);
			
		Constraint optionalroot1_F167_root1_F269 = IntConstraintFactory.arithm(root1_F269, "<=", root1_F167);
		optionalroot1_F167_root1_F269.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F167_root1_F269);
		Constraint optionalroot1_F167_root1_F270 = IntConstraintFactory.arithm(root1_F270, "<=", root1_F167);
		optionalroot1_F167_root1_F270.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F167_root1_F270);
		Constraint mandatoryroot1_F167_root1_F271 = IntConstraintFactory.arithm(root1_F167, "=", root1_F271);
		mandatoryroot1_F167_root1_F271.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F167_root1_F271);
		Constraint optionalroot1_F167_root1_F272 = IntConstraintFactory.arithm(root1_F272, "<=", root1_F167);
		optionalroot1_F167_root1_F272.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F167_root1_F272);
		Constraint mandatoryroot1_F167_root1_F273 = IntConstraintFactory.arithm(root1_F167, "=", root1_F273);
		mandatoryroot1_F167_root1_F273.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F167_root1_F273);
		Constraint mandatoryroot1_F167_root1_F274 = IntConstraintFactory.arithm(root1_F167, "=", root1_F274);
		mandatoryroot1_F167_root1_F274.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F167_root1_F274);
		Constraint mandatoryroot1_F80_root1_F168 = IntConstraintFactory.arithm(root1_F80, "=", root1_F168);
		mandatoryroot1_F80_root1_F168.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F80_root1_F168);
		Constraint mandatoryroot1_F80_root1_F169 = IntConstraintFactory.arithm(root1_F80, "=", root1_F169);
		mandatoryroot1_F80_root1_F169.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F80_root1_F169);
		Constraint mandatoryroot1_F42_root1_F50 = IntConstraintFactory.arithm(root1_F42, "=", root1_F50);
		mandatoryroot1_F42_root1_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F50);
		IntVar sumOrroot1_F42_5 = VariableFactory.enumerated("sumOrroot1_F42", 0, 3, solver); 
		BoolVar[] varsOrroot1_F42_5 = new BoolVar[3];
		varsOrroot1_F42_5[0] = root1_F51;
		varsOrroot1_F42_5[1] = root1_F52;
		varsOrroot1_F42_5[2] = root1_F53;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F42_5, sumOrroot1_F42_5));
		Constraint or1root1_F42_5 = IntConstraintFactory.arithm(sumOrroot1_F42_5, ">=", 1);
		or1root1_F42_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F42_5 = IntConstraintFactory.arithm(sumOrroot1_F42_5, "=", 0);
		or0root1_F42_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F42, or1root1_F42_5, or0root1_F42_5);
			
		Constraint mandatoryroot1_F42_root1_F54 = IntConstraintFactory.arithm(root1_F42, "=", root1_F54);
		mandatoryroot1_F42_root1_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F54);
		Constraint mandatoryroot1_F42_root1_F55 = IntConstraintFactory.arithm(root1_F42, "=", root1_F55);
		mandatoryroot1_F42_root1_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F55);
		Constraint optionalroot1_F2_root1_F43 = IntConstraintFactory.arithm(root1_F43, "<=", root1_F2);
		optionalroot1_F2_root1_F43.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F2_root1_F43);
		Constraint optionalroot1_F43_root1_F145 = IntConstraintFactory.arithm(root1_F145, "<=", root1_F43);
		optionalroot1_F43_root1_F145.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F43_root1_F145);
		Constraint optionalroot1_F43_root1_F146 = IntConstraintFactory.arithm(root1_F146, "<=", root1_F43);
		optionalroot1_F43_root1_F146.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F43_root1_F146);
		Constraint mandatoryroot1_F43_root1_F147 = IntConstraintFactory.arithm(root1_F43, "=", root1_F147);
		mandatoryroot1_F43_root1_F147.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F43_root1_F147);
		Constraint optionalroot1_F43_root1_F148 = IntConstraintFactory.arithm(root1_F148, "<=", root1_F43);
		optionalroot1_F43_root1_F148.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F43_root1_F148);
		Constraint optionalroot1_F2_root1_F44 = IntConstraintFactory.arithm(root1_F44, "<=", root1_F2);
		optionalroot1_F2_root1_F44.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F2_root1_F44);
		Constraint optionalroot1_F44_root1_F170 = IntConstraintFactory.arithm(root1_F170, "<=", root1_F44);
		optionalroot1_F44_root1_F170.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F44_root1_F170);
		Constraint mandatoryroot1_F44_root1_F171 = IntConstraintFactory.arithm(root1_F44, "=", root1_F171);
		mandatoryroot1_F44_root1_F171.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F44_root1_F171);
		Constraint mandatoryroot1_F171_root1_F201 = IntConstraintFactory.arithm(root1_F171, "=", root1_F201);
		mandatoryroot1_F171_root1_F201.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F201);
		Constraint mandatoryroot1_F171_root1_F202 = IntConstraintFactory.arithm(root1_F171, "=", root1_F202);
		mandatoryroot1_F171_root1_F202.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F202);
		Constraint mandatoryroot1_F171_root1_F203 = IntConstraintFactory.arithm(root1_F171, "=", root1_F203);
		mandatoryroot1_F171_root1_F203.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F203);
		Constraint mandatoryroot1_F171_root1_F204 = IntConstraintFactory.arithm(root1_F171, "=", root1_F204);
		mandatoryroot1_F171_root1_F204.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F204);
		IntVar sumOrroot1_F171_4 = VariableFactory.enumerated("sumOrroot1_F171", 0, 4, solver); 
		BoolVar[] varsOrroot1_F171_4 = new BoolVar[4];
		varsOrroot1_F171_4[0] = root1_F205;
		varsOrroot1_F171_4[1] = root1_F206;
		varsOrroot1_F171_4[2] = root1_F207;
		varsOrroot1_F171_4[3] = root1_F208;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F171_4, sumOrroot1_F171_4));
		Constraint or1root1_F171_4 = IntConstraintFactory.arithm(sumOrroot1_F171_4, ">=", 1);
		or1root1_F171_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F171_4 = IntConstraintFactory.arithm(sumOrroot1_F171_4, "=", 0);
		or0root1_F171_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F171, or1root1_F171_4, or0root1_F171_4);
			
		Constraint optionalroot1_F205_root1_F306 = IntConstraintFactory.arithm(root1_F306, "<=", root1_F205);
		optionalroot1_F205_root1_F306.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F205_root1_F306);
		Constraint mandatoryroot1_F171_root1_F209 = IntConstraintFactory.arithm(root1_F171, "=", root1_F209);
		mandatoryroot1_F171_root1_F209.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F209);
		Constraint mandatoryroot1_F171_root1_F210 = IntConstraintFactory.arithm(root1_F171, "=", root1_F210);
		mandatoryroot1_F171_root1_F210.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F171_root1_F210);
		Constraint mandatoryroot1_F2_root1_F45 = IntConstraintFactory.arithm(root1_F2, "=", root1_F45);
		mandatoryroot1_F2_root1_F45.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F2_root1_F45);
		Constraint optionalroot1_root_root1_F3 = IntConstraintFactory.arithm(root1_F3, "<=", root1_root);
		optionalroot1_root_root1_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F3);
		Constraint mandatoryroot1_F3_root1_F69 = IntConstraintFactory.arithm(root1_F3, "=", root1_F69);
		mandatoryroot1_F3_root1_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F3_root1_F69);
		IntVar sumOrroot1_F3_1 = VariableFactory.enumerated("sumOrroot1_F3", 0, 2, solver); 
		BoolVar[] varsOrroot1_F3_1 = new BoolVar[2];
		varsOrroot1_F3_1[0] = root1_F70;
		varsOrroot1_F3_1[1] = root1_F71;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F3_1, sumOrroot1_F3_1));
		Constraint or1root1_F3_1 = IntConstraintFactory.arithm(sumOrroot1_F3_1, ">=", 1);
		or1root1_F3_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F3_1 = IntConstraintFactory.arithm(sumOrroot1_F3_1, "=", 0);
		or0root1_F3_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F3, or1root1_F3_1, or0root1_F3_1);
			
		Constraint mandatoryroot1_F70_root1_F143 = IntConstraintFactory.arithm(root1_F70, "=", root1_F143);
		mandatoryroot1_F70_root1_F143.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F70_root1_F143);
		Constraint mandatoryroot1_F70_root1_F144 = IntConstraintFactory.arithm(root1_F70, "=", root1_F144);
		mandatoryroot1_F70_root1_F144.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F70_root1_F144);
		Constraint optionalroot1_F71_root1_F211 = IntConstraintFactory.arithm(root1_F211, "<=", root1_F71);
		optionalroot1_F71_root1_F211.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F71_root1_F211);
		Constraint optionalroot1_F71_root1_F212 = IntConstraintFactory.arithm(root1_F212, "<=", root1_F71);
		optionalroot1_F71_root1_F212.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F71_root1_F212);
		Constraint optionalroot1_F212_root1_F229 = IntConstraintFactory.arithm(root1_F229, "<=", root1_F212);
		optionalroot1_F212_root1_F229.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F212_root1_F229);
		Constraint mandatoryroot1_F229_root1_F235 = IntConstraintFactory.arithm(root1_F229, "=", root1_F235);
		mandatoryroot1_F229_root1_F235.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F229_root1_F235);
		Constraint mandatoryroot1_F212_root1_F230 = IntConstraintFactory.arithm(root1_F212, "=", root1_F230);
		mandatoryroot1_F212_root1_F230.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F212_root1_F230);
		Constraint optionalroot1_F212_root1_F231 = IntConstraintFactory.arithm(root1_F231, "<=", root1_F212);
		optionalroot1_F212_root1_F231.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F212_root1_F231);
		Constraint mandatoryroot1_F212_root1_F232 = IntConstraintFactory.arithm(root1_F212, "=", root1_F232);
		mandatoryroot1_F212_root1_F232.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F212_root1_F232);
		Constraint mandatoryroot1_F212_root1_F233 = IntConstraintFactory.arithm(root1_F212, "=", root1_F233);
		mandatoryroot1_F212_root1_F233.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F212_root1_F233);
		Constraint mandatoryroot1_F212_root1_F234 = IntConstraintFactory.arithm(root1_F212, "=", root1_F234);
		mandatoryroot1_F212_root1_F234.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F212_root1_F234);
		Constraint mandatoryroot1_F71_root1_F213 = IntConstraintFactory.arithm(root1_F71, "=", root1_F213);
		mandatoryroot1_F71_root1_F213.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F71_root1_F213);
		Constraint mandatoryroot1_F213_root1_F294 = IntConstraintFactory.arithm(root1_F213, "=", root1_F294);
		mandatoryroot1_F213_root1_F294.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F213_root1_F294);
		IntVar sumOrroot1_F71_3 = VariableFactory.enumerated("sumOrroot1_F71", 0, 2, solver); 
		BoolVar[] varsOrroot1_F71_3 = new BoolVar[2];
		varsOrroot1_F71_3[0] = root1_F214;
		varsOrroot1_F71_3[1] = root1_F215;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F71_3, sumOrroot1_F71_3));
		Constraint or1root1_F71_3 = IntConstraintFactory.arithm(sumOrroot1_F71_3, ">=", 1);
		or1root1_F71_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F71_3 = IntConstraintFactory.arithm(sumOrroot1_F71_3, "=", 0);
		or0root1_F71_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F71, or1root1_F71_3, or0root1_F71_3);
			
		Constraint mandatoryroot1_F71_root1_F216 = IntConstraintFactory.arithm(root1_F71, "=", root1_F216);
		mandatoryroot1_F71_root1_F216.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F71_root1_F216);
		Constraint mandatoryroot1_F71_root1_F217 = IntConstraintFactory.arithm(root1_F71, "=", root1_F217);
		mandatoryroot1_F71_root1_F217.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F71_root1_F217);
		Constraint mandatoryroot1_F71_root1_F218 = IntConstraintFactory.arithm(root1_F71, "=", root1_F218);
		mandatoryroot1_F71_root1_F218.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F71_root1_F218);
		Constraint mandatoryroot1_F71_root1_F219 = IntConstraintFactory.arithm(root1_F71, "=", root1_F219);
		mandatoryroot1_F71_root1_F219.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F71_root1_F219);
		Constraint optionalroot1_root_root1_F4 = IntConstraintFactory.arithm(root1_F4, "<=", root1_root);
		optionalroot1_root_root1_F4.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F4);
		Constraint mandatoryroot1_F4_root1_F267 = IntConstraintFactory.arithm(root1_F4, "=", root1_F267);
		mandatoryroot1_F4_root1_F267.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F4_root1_F267);
		Constraint mandatoryroot1_F4_root1_F268 = IntConstraintFactory.arithm(root1_F4, "=", root1_F268);
		mandatoryroot1_F4_root1_F268.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F4_root1_F268);
		Constraint mandatoryroot1_root_root1_F5 = IntConstraintFactory.arithm(root1_root, "=", root1_F5);
		mandatoryroot1_root_root1_F5.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F5);
		Constraint optionalroot1_F5_root1_F90 = IntConstraintFactory.arithm(root1_F90, "<=", root1_F5);
		optionalroot1_F5_root1_F90.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F5_root1_F90);
		Constraint optionalroot1_F90_root1_F280 = IntConstraintFactory.arithm(root1_F280, "<=", root1_F90);
		optionalroot1_F90_root1_F280.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F90_root1_F280);
		Constraint optionalroot1_F90_root1_F281 = IntConstraintFactory.arithm(root1_F281, "<=", root1_F90);
		optionalroot1_F90_root1_F281.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F90_root1_F281);
		Constraint mandatoryroot1_F90_root1_F282 = IntConstraintFactory.arithm(root1_F90, "=", root1_F282);
		mandatoryroot1_F90_root1_F282.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F90_root1_F282);
		Constraint mandatoryroot1_root_root1_F6 = IntConstraintFactory.arithm(root1_root, "=", root1_F6);
		mandatoryroot1_root_root1_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F6);
		Constraint mandatoryroot1_F6_root1_F11 = IntConstraintFactory.arithm(root1_F6, "=", root1_F11);
		mandatoryroot1_F6_root1_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F11);
		Constraint mandatoryroot1_F11_root1_F112 = IntConstraintFactory.arithm(root1_F11, "=", root1_F112);
		mandatoryroot1_F11_root1_F112.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F11_root1_F112);
		Constraint mandatoryroot1_F11_root1_F113 = IntConstraintFactory.arithm(root1_F11, "=", root1_F113);
		mandatoryroot1_F11_root1_F113.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F11_root1_F113);
		Constraint mandatoryroot1_F113_root1_F192 = IntConstraintFactory.arithm(root1_F113, "=", root1_F192);
		mandatoryroot1_F113_root1_F192.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F192);
		Constraint optionalroot1_F113_root1_F193 = IntConstraintFactory.arithm(root1_F193, "<=", root1_F113);
		optionalroot1_F113_root1_F193.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F113_root1_F193);
		IntVar sumOrroot1_F113_2 = VariableFactory.enumerated("sumOrroot1_F113", 0, 2, solver); 
		BoolVar[] varsOrroot1_F113_2 = new BoolVar[2];
		varsOrroot1_F113_2[0] = root1_F194;
		varsOrroot1_F113_2[1] = root1_F195;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F113_2, sumOrroot1_F113_2));
		Constraint or1root1_F113_2 = IntConstraintFactory.arithm(sumOrroot1_F113_2, ">=", 1);
		or1root1_F113_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F113_2 = IntConstraintFactory.arithm(sumOrroot1_F113_2, "=", 0);
		or0root1_F113_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F113, or1root1_F113_2, or0root1_F113_2);
			
		Constraint mandatoryroot1_F113_root1_F196 = IntConstraintFactory.arithm(root1_F113, "=", root1_F196);
		mandatoryroot1_F113_root1_F196.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F196);
		Constraint mandatoryroot1_F113_root1_F197 = IntConstraintFactory.arithm(root1_F113, "=", root1_F197);
		mandatoryroot1_F113_root1_F197.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F197);
		Constraint mandatoryroot1_F113_root1_F198 = IntConstraintFactory.arithm(root1_F113, "=", root1_F198);
		mandatoryroot1_F113_root1_F198.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F198);
		Constraint mandatoryroot1_F113_root1_F199 = IntConstraintFactory.arithm(root1_F113, "=", root1_F199);
		mandatoryroot1_F113_root1_F199.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F199);
		Constraint mandatoryroot1_F113_root1_F200 = IntConstraintFactory.arithm(root1_F113, "=", root1_F200);
		mandatoryroot1_F113_root1_F200.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F113_root1_F200);
		Constraint optionalroot1_F6_root1_F12 = IntConstraintFactory.arithm(root1_F12, "<=", root1_F6);
		optionalroot1_F6_root1_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F6_root1_F12);
		Constraint optionalroot1_F12_root1_F59 = IntConstraintFactory.arithm(root1_F59, "<=", root1_F12);
		optionalroot1_F12_root1_F59.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F59);
		Constraint mandatoryroot1_F59_root1_F149 = IntConstraintFactory.arithm(root1_F59, "=", root1_F149);
		mandatoryroot1_F59_root1_F149.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F59_root1_F149);
		Constraint mandatoryroot1_F59_root1_F150 = IntConstraintFactory.arithm(root1_F59, "=", root1_F150);
		mandatoryroot1_F59_root1_F150.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F59_root1_F150);
		Constraint mandatoryroot1_F59_root1_F151 = IntConstraintFactory.arithm(root1_F59, "=", root1_F151);
		mandatoryroot1_F59_root1_F151.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F59_root1_F151);
		Constraint optionalroot1_F59_root1_F152 = IntConstraintFactory.arithm(root1_F152, "<=", root1_F59);
		optionalroot1_F59_root1_F152.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F59_root1_F152);
		Constraint mandatoryroot1_F59_root1_F153 = IntConstraintFactory.arithm(root1_F59, "=", root1_F153);
		mandatoryroot1_F59_root1_F153.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F59_root1_F153);
		IntVar sumOrroot1_F59_5 = VariableFactory.enumerated("sumOrroot1_F59", 0, 3, solver); 
		BoolVar[] varsOrroot1_F59_5 = new BoolVar[3];
		varsOrroot1_F59_5[0] = root1_F154;
		varsOrroot1_F59_5[1] = root1_F155;
		varsOrroot1_F59_5[2] = root1_F156;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F59_5, sumOrroot1_F59_5));
		Constraint or1root1_F59_5 = IntConstraintFactory.arithm(sumOrroot1_F59_5, ">=", 1);
		or1root1_F59_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F59_5 = IntConstraintFactory.arithm(sumOrroot1_F59_5, "=", 0);
		or0root1_F59_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F59, or1root1_F59_5, or0root1_F59_5);
			
		Constraint optionalroot1_F155_root1_F172 = IntConstraintFactory.arithm(root1_F172, "<=", root1_F155);
		optionalroot1_F155_root1_F172.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F155_root1_F172);
		Constraint optionalroot1_F155_root1_F173 = IntConstraintFactory.arithm(root1_F173, "<=", root1_F155);
		optionalroot1_F155_root1_F173.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F155_root1_F173);
		IntVar sumOrroot1_F155_2 = VariableFactory.enumerated("sumOrroot1_F155", 0, 2, solver); 
		BoolVar[] varsOrroot1_F155_2 = new BoolVar[2];
		varsOrroot1_F155_2[0] = root1_F174;
		varsOrroot1_F155_2[1] = root1_F175;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F155_2, sumOrroot1_F155_2));
		Constraint or1root1_F155_2 = IntConstraintFactory.arithm(sumOrroot1_F155_2, ">=", 1);
		or1root1_F155_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F155_2 = IntConstraintFactory.arithm(sumOrroot1_F155_2, "=", 0);
		or0root1_F155_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F155, or1root1_F155_2, or0root1_F155_2);
			
		IntVar sumOrroot1_F155_3 = VariableFactory.enumerated("sumOrroot1_F155", 0, 2, solver); 
		BoolVar[] varsOrroot1_F155_3 = new BoolVar[2];
		varsOrroot1_F155_3[0] = root1_F176;
		varsOrroot1_F155_3[1] = root1_F177;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F155_3, sumOrroot1_F155_3));
		Constraint or1root1_F155_3 = IntConstraintFactory.arithm(sumOrroot1_F155_3, ">=", 1);
		or1root1_F155_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F155_3 = IntConstraintFactory.arithm(sumOrroot1_F155_3, "=", 0);
		or0root1_F155_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F155, or1root1_F155_3, or0root1_F155_3);
			
		Constraint mandatoryroot1_F155_root1_F178 = IntConstraintFactory.arithm(root1_F155, "=", root1_F178);
		mandatoryroot1_F155_root1_F178.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F155_root1_F178);
		IntVar sumOrroot1_F178_0 = VariableFactory.enumerated("sumOrroot1_F178", 0, 2, solver); 
		BoolVar[] varsOrroot1_F178_0 = new BoolVar[2];
		varsOrroot1_F178_0[0] = root1_F226;
		varsOrroot1_F178_0[1] = root1_F227;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F178_0, sumOrroot1_F178_0));
		Constraint or1root1_F178_0 = IntConstraintFactory.arithm(sumOrroot1_F178_0, ">=", 1);
		or1root1_F178_0.setName(Utilities.OR_TC);
		
		Constraint or0root1_F178_0 = IntConstraintFactory.arithm(sumOrroot1_F178_0, "=", 0);
		or0root1_F178_0.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F178, or1root1_F178_0, or0root1_F178_0);
			
		Constraint mandatoryroot1_F155_root1_F179 = IntConstraintFactory.arithm(root1_F155, "=", root1_F179);
		mandatoryroot1_F155_root1_F179.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F155_root1_F179);
		Constraint mandatoryroot1_F12_root1_F60 = IntConstraintFactory.arithm(root1_F12, "=", root1_F60);
		mandatoryroot1_F12_root1_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F60);
		Constraint optionalroot1_F60_root1_F122 = IntConstraintFactory.arithm(root1_F122, "<=", root1_F60);
		optionalroot1_F60_root1_F122.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F60_root1_F122);
		Constraint optionalroot1_F60_root1_F123 = IntConstraintFactory.arithm(root1_F123, "<=", root1_F60);
		optionalroot1_F60_root1_F123.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F60_root1_F123);
		Constraint optionalroot1_F60_root1_F124 = IntConstraintFactory.arithm(root1_F124, "<=", root1_F60);
		optionalroot1_F60_root1_F124.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F60_root1_F124);
		Constraint mandatoryroot1_F60_root1_F125 = IntConstraintFactory.arithm(root1_F60, "=", root1_F125);
		mandatoryroot1_F60_root1_F125.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F60_root1_F125);
		Constraint mandatoryroot1_F60_root1_F126 = IntConstraintFactory.arithm(root1_F60, "=", root1_F126);
		mandatoryroot1_F60_root1_F126.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F60_root1_F126);
		Constraint mandatoryroot1_F60_root1_F127 = IntConstraintFactory.arithm(root1_F60, "=", root1_F127);
		mandatoryroot1_F60_root1_F127.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F60_root1_F127);
		Constraint mandatoryroot1_F12_root1_F61 = IntConstraintFactory.arithm(root1_F12, "=", root1_F61);
		mandatoryroot1_F12_root1_F61.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F61);
		Constraint optionalroot1_F12_root1_F62 = IntConstraintFactory.arithm(root1_F62, "<=", root1_F12);
		optionalroot1_F12_root1_F62.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F62);
		IntVar sumOrroot1_F12_4 = VariableFactory.enumerated("sumOrroot1_F12", 0, 3, solver); 
		BoolVar[] varsOrroot1_F12_4 = new BoolVar[3];
		varsOrroot1_F12_4[0] = root1_F63;
		varsOrroot1_F12_4[1] = root1_F64;
		varsOrroot1_F12_4[2] = root1_F65;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F12_4, sumOrroot1_F12_4));
		Constraint or1root1_F12_4 = IntConstraintFactory.arithm(sumOrroot1_F12_4, ">=", 1);
		or1root1_F12_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F12_4 = IntConstraintFactory.arithm(sumOrroot1_F12_4, "=", 0);
		or0root1_F12_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F12, or1root1_F12_4, or0root1_F12_4);
			
		Constraint mandatoryroot1_F63_root1_F220 = IntConstraintFactory.arithm(root1_F63, "=", root1_F220);
		mandatoryroot1_F63_root1_F220.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F63_root1_F220);
		IntVar sumOrroot1_F63_1 = VariableFactory.enumerated("sumOrroot1_F63", 0, 2, solver); 
		BoolVar[] varsOrroot1_F63_1 = new BoolVar[2];
		varsOrroot1_F63_1[0] = root1_F221;
		varsOrroot1_F63_1[1] = root1_F222;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F63_1, sumOrroot1_F63_1));
		Constraint or1root1_F63_1 = IntConstraintFactory.arithm(sumOrroot1_F63_1, ">=", 1);
		or1root1_F63_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F63_1 = IntConstraintFactory.arithm(sumOrroot1_F63_1, "=", 0);
		or0root1_F63_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F63, or1root1_F63_1, or0root1_F63_1);
			
		Constraint mandatoryroot1_F63_root1_F223 = IntConstraintFactory.arithm(root1_F63, "=", root1_F223);
		mandatoryroot1_F63_root1_F223.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F63_root1_F223);
		Constraint mandatoryroot1_F63_root1_F224 = IntConstraintFactory.arithm(root1_F63, "=", root1_F224);
		mandatoryroot1_F63_root1_F224.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F63_root1_F224);
		Constraint mandatoryroot1_F63_root1_F225 = IntConstraintFactory.arithm(root1_F63, "=", root1_F225);
		mandatoryroot1_F63_root1_F225.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F63_root1_F225);
		Constraint mandatoryroot1_F12_root1_F66 = IntConstraintFactory.arithm(root1_F12, "=", root1_F66);
		mandatoryroot1_F12_root1_F66.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F66);
		Constraint mandatoryroot1_F12_root1_F67 = IntConstraintFactory.arithm(root1_F12, "=", root1_F67);
		mandatoryroot1_F12_root1_F67.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F67);
		Constraint mandatoryroot1_F12_root1_F68 = IntConstraintFactory.arithm(root1_F12, "=", root1_F68);
		mandatoryroot1_F12_root1_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F68);
		Constraint mandatoryroot1_F6_root1_F13 = IntConstraintFactory.arithm(root1_F6, "=", root1_F13);
		mandatoryroot1_F6_root1_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F6_root1_F13);
		Constraint optionalroot1_F6_root1_F14 = IntConstraintFactory.arithm(root1_F14, "<=", root1_F6);
		optionalroot1_F6_root1_F14.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F6_root1_F14);
		Constraint mandatoryroot1_F14_root1_F91 = IntConstraintFactory.arithm(root1_F14, "=", root1_F91);
		mandatoryroot1_F14_root1_F91.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F14_root1_F91);
		Constraint optionalroot1_F14_root1_F92 = IntConstraintFactory.arithm(root1_F92, "<=", root1_F14);
		optionalroot1_F14_root1_F92.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F14_root1_F92);
		Constraint optionalroot1_F92_root1_F103 = IntConstraintFactory.arithm(root1_F103, "<=", root1_F92);
		optionalroot1_F92_root1_F103.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F92_root1_F103);
		Constraint mandatoryroot1_F92_root1_F104 = IntConstraintFactory.arithm(root1_F92, "=", root1_F104);
		mandatoryroot1_F92_root1_F104.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F104);
		Constraint optionalroot1_F92_root1_F105 = IntConstraintFactory.arithm(root1_F105, "<=", root1_F92);
		optionalroot1_F92_root1_F105.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F92_root1_F105);
		Constraint mandatoryroot1_F92_root1_F106 = IntConstraintFactory.arithm(root1_F92, "=", root1_F106);
		mandatoryroot1_F92_root1_F106.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F106);
		Constraint mandatoryroot1_F92_root1_F107 = IntConstraintFactory.arithm(root1_F92, "=", root1_F107);
		mandatoryroot1_F92_root1_F107.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F107);
		Constraint mandatoryroot1_F92_root1_F108 = IntConstraintFactory.arithm(root1_F92, "=", root1_F108);
		mandatoryroot1_F92_root1_F108.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F108);
		Constraint mandatoryroot1_F92_root1_F109 = IntConstraintFactory.arithm(root1_F92, "=", root1_F109);
		mandatoryroot1_F92_root1_F109.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F109);
		Constraint mandatoryroot1_F92_root1_F110 = IntConstraintFactory.arithm(root1_F92, "=", root1_F110);
		mandatoryroot1_F92_root1_F110.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F110);
		Constraint mandatoryroot1_F92_root1_F111 = IntConstraintFactory.arithm(root1_F92, "=", root1_F111);
		mandatoryroot1_F92_root1_F111.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F92_root1_F111);
		Constraint mandatoryroot1_F14_root1_F93 = IntConstraintFactory.arithm(root1_F14, "=", root1_F93);
		mandatoryroot1_F14_root1_F93.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F14_root1_F93);
		Constraint optionalroot1_F14_root1_F94 = IntConstraintFactory.arithm(root1_F94, "<=", root1_F14);
		optionalroot1_F14_root1_F94.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F14_root1_F94);
		IntVar sumOrroot1_F14_4 = VariableFactory.enumerated("sumOrroot1_F14", 0, 2, solver); 
		BoolVar[] varsOrroot1_F14_4 = new BoolVar[2];
		varsOrroot1_F14_4[0] = root1_F95;
		varsOrroot1_F14_4[1] = root1_F96;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F14_4, sumOrroot1_F14_4));
		Constraint or1root1_F14_4 = IntConstraintFactory.arithm(sumOrroot1_F14_4, ">=", 1);
		or1root1_F14_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F14_4 = IntConstraintFactory.arithm(sumOrroot1_F14_4, "=", 0);
		or0root1_F14_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F14, or1root1_F14_4, or0root1_F14_4);
			
		IntVar sumOrroot1_F95_0 = VariableFactory.enumerated("sumOrroot1_F95", 0, 2, solver); 
		BoolVar[] varsOrroot1_F95_0 = new BoolVar[2];
		varsOrroot1_F95_0[0] = root1_F180;
		varsOrroot1_F95_0[1] = root1_F181;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F95_0, sumOrroot1_F95_0));
		Constraint or1root1_F95_0 = IntConstraintFactory.arithm(sumOrroot1_F95_0, ">=", 1);
		or1root1_F95_0.setName(Utilities.OR_TC);
		
		Constraint or0root1_F95_0 = IntConstraintFactory.arithm(sumOrroot1_F95_0, "=", 0);
		or0root1_F95_0.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F95, or1root1_F95_0, or0root1_F95_0);
			
		Constraint mandatoryroot1_F95_root1_F182 = IntConstraintFactory.arithm(root1_F95, "=", root1_F182);
		mandatoryroot1_F95_root1_F182.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F182);
		Constraint mandatoryroot1_F95_root1_F183 = IntConstraintFactory.arithm(root1_F95, "=", root1_F183);
		mandatoryroot1_F95_root1_F183.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F183);
		IntVar sumOrroot1_F6_4 = VariableFactory.enumerated("sumOrroot1_F6", 0, 2, solver); 
		BoolVar[] varsOrroot1_F6_4 = new BoolVar[2];
		varsOrroot1_F6_4[0] = root1_F15;
		varsOrroot1_F6_4[1] = root1_F16;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F6_4, sumOrroot1_F6_4));
		Constraint or1root1_F6_4 = IntConstraintFactory.arithm(sumOrroot1_F6_4, ">=", 1);
		or1root1_F6_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F6_4 = IntConstraintFactory.arithm(sumOrroot1_F6_4, "=", 0);
		or0root1_F6_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F6, or1root1_F6_4, or0root1_F6_4);
			
		Constraint optionalroot1_F16_root1_F40 = IntConstraintFactory.arithm(root1_F40, "<=", root1_F16);
		optionalroot1_F16_root1_F40.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F16_root1_F40);
		Constraint mandatoryroot1_F16_root1_F41 = IntConstraintFactory.arithm(root1_F16, "=", root1_F41);
		mandatoryroot1_F16_root1_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F16_root1_F41);
		IntVar sumOrroot1_F6_5 = VariableFactory.enumerated("sumOrroot1_F6", 0, 2, solver); 
		BoolVar[] varsOrroot1_F6_5 = new BoolVar[2];
		varsOrroot1_F6_5[0] = root1_F17;
		varsOrroot1_F6_5[1] = root1_F18;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F6_5, sumOrroot1_F6_5));
		Constraint or1root1_F6_5 = IntConstraintFactory.arithm(sumOrroot1_F6_5, ">=", 1);
		or1root1_F6_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F6_5 = IntConstraintFactory.arithm(sumOrroot1_F6_5, "=", 0);
		or0root1_F6_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F6, or1root1_F6_5, or0root1_F6_5);
			
		Constraint mandatoryroot1_F17_root1_F28 = IntConstraintFactory.arithm(root1_F17, "=", root1_F28);
		mandatoryroot1_F17_root1_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F17_root1_F28);
		Constraint optionalroot1_F17_root1_F29 = IntConstraintFactory.arithm(root1_F29, "<=", root1_F17);
		optionalroot1_F17_root1_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F17_root1_F29);
		Constraint optionalroot1_F17_root1_F30 = IntConstraintFactory.arithm(root1_F30, "<=", root1_F17);
		optionalroot1_F17_root1_F30.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F17_root1_F30);
		Constraint optionalroot1_F18_root1_F97 = IntConstraintFactory.arithm(root1_F97, "<=", root1_F18);
		optionalroot1_F18_root1_F97.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F18_root1_F97);
		Constraint mandatoryroot1_F18_root1_F98 = IntConstraintFactory.arithm(root1_F18, "=", root1_F98);
		mandatoryroot1_F18_root1_F98.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F18_root1_F98);
		Constraint mandatoryroot1_F98_root1_F139 = IntConstraintFactory.arithm(root1_F98, "=", root1_F139);
		mandatoryroot1_F98_root1_F139.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F139);
		Constraint mandatoryroot1_F98_root1_F140 = IntConstraintFactory.arithm(root1_F98, "=", root1_F140);
		mandatoryroot1_F98_root1_F140.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F140);
		Constraint mandatoryroot1_F98_root1_F141 = IntConstraintFactory.arithm(root1_F98, "=", root1_F141);
		mandatoryroot1_F98_root1_F141.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F141);
		Constraint mandatoryroot1_F98_root1_F142 = IntConstraintFactory.arithm(root1_F98, "=", root1_F142);
		mandatoryroot1_F98_root1_F142.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F142);
		Constraint mandatoryroot1_F18_root1_F99 = IntConstraintFactory.arithm(root1_F18, "=", root1_F99);
		mandatoryroot1_F18_root1_F99.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F18_root1_F99);
		Constraint mandatoryroot1_F18_root1_F100 = IntConstraintFactory.arithm(root1_F18, "=", root1_F100);
		mandatoryroot1_F18_root1_F100.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F18_root1_F100);
		IntVar sumOrroot1_F18_4 = VariableFactory.enumerated("sumOrroot1_F18", 0, 2, solver); 
		BoolVar[] varsOrroot1_F18_4 = new BoolVar[2];
		varsOrroot1_F18_4[0] = root1_F101;
		varsOrroot1_F18_4[1] = root1_F102;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F18_4, sumOrroot1_F18_4));
		Constraint or1root1_F18_4 = IntConstraintFactory.arithm(sumOrroot1_F18_4, ">=", 1);
		or1root1_F18_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F18_4 = IntConstraintFactory.arithm(sumOrroot1_F18_4, "=", 0);
		or0root1_F18_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F18, or1root1_F18_4, or0root1_F18_4);
			
		Constraint optionalroot1_F102_root1_F283 = IntConstraintFactory.arithm(root1_F283, "<=", root1_F102);
		optionalroot1_F102_root1_F283.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F102_root1_F283);
		IntVar sumOrroot1_F102_1 = VariableFactory.enumerated("sumOrroot1_F102", 0, 2, solver); 
		BoolVar[] varsOrroot1_F102_1 = new BoolVar[2];
		varsOrroot1_F102_1[0] = root1_F284;
		varsOrroot1_F102_1[1] = root1_F285;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F102_1, sumOrroot1_F102_1));
		Constraint or1root1_F102_1 = IntConstraintFactory.arithm(sumOrroot1_F102_1, ">=", 1);
		or1root1_F102_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F102_1 = IntConstraintFactory.arithm(sumOrroot1_F102_1, "=", 0);
		or0root1_F102_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F102, or1root1_F102_1, or0root1_F102_1);
			
		Constraint mandatoryroot1_F284_root1_F300 = IntConstraintFactory.arithm(root1_F284, "=", root1_F300);
		mandatoryroot1_F284_root1_F300.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F284_root1_F300);
		Constraint mandatoryroot1_root_root1_F7 = IntConstraintFactory.arithm(root1_root, "=", root1_F7);
		mandatoryroot1_root_root1_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F7);
		Constraint optionalroot1_root_root1_F8 = IntConstraintFactory.arithm(root1_F8, "<=", root1_root);
		optionalroot1_root_root1_F8.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F8);
		Constraint mandatoryroot1_F8_root1_F19 = IntConstraintFactory.arithm(root1_F8, "=", root1_F19);
		mandatoryroot1_F8_root1_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F19);
		Constraint optionalroot1_F8_root1_F20 = IntConstraintFactory.arithm(root1_F20, "<=", root1_F8);
		optionalroot1_F8_root1_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F8_root1_F20);
		Constraint mandatoryroot1_F20_root1_F72 = IntConstraintFactory.arithm(root1_F20, "=", root1_F72);
		mandatoryroot1_F20_root1_F72.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F20_root1_F72);
		Constraint optionalroot1_F72_root1_F135 = IntConstraintFactory.arithm(root1_F135, "<=", root1_F72);
		optionalroot1_F72_root1_F135.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F72_root1_F135);
		Constraint mandatoryroot1_F72_root1_F136 = IntConstraintFactory.arithm(root1_F72, "=", root1_F136);
		mandatoryroot1_F72_root1_F136.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F72_root1_F136);
		IntVar sumOrroot1_F72_2 = VariableFactory.enumerated("sumOrroot1_F72", 0, 2, solver); 
		BoolVar[] varsOrroot1_F72_2 = new BoolVar[2];
		varsOrroot1_F72_2[0] = root1_F137;
		varsOrroot1_F72_2[1] = root1_F138;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F72_2, sumOrroot1_F72_2));
		Constraint or1root1_F72_2 = IntConstraintFactory.arithm(sumOrroot1_F72_2, ">=", 1);
		or1root1_F72_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F72_2 = IntConstraintFactory.arithm(sumOrroot1_F72_2, "=", 0);
		or0root1_F72_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F72, or1root1_F72_2, or0root1_F72_2);
			
		Constraint mandatoryroot1_F8_root1_F21 = IntConstraintFactory.arithm(root1_F8, "=", root1_F21);
		mandatoryroot1_F8_root1_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F21);
		Constraint mandatoryroot1_F8_root1_F22 = IntConstraintFactory.arithm(root1_F8, "=", root1_F22);
		mandatoryroot1_F8_root1_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F22);
		Constraint mandatoryroot1_F8_root1_F23 = IntConstraintFactory.arithm(root1_F8, "=", root1_F23);
		mandatoryroot1_F8_root1_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F23);
		Constraint mandatoryroot1_F8_root1_F24 = IntConstraintFactory.arithm(root1_F8, "=", root1_F24);
		mandatoryroot1_F8_root1_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F24);
		Constraint mandatoryroot1_F24_root1_F318 = IntConstraintFactory.arithm(root1_F24, "=", root1_F318);
		mandatoryroot1_F24_root1_F318.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F318);
		Constraint mandatoryroot1_F24_root1_F319 = IntConstraintFactory.arithm(root1_F24, "=", root1_F319);
		mandatoryroot1_F24_root1_F319.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F319);
		Constraint mandatoryroot1_F8_root1_F25 = IntConstraintFactory.arithm(root1_F8, "=", root1_F25);
		mandatoryroot1_F8_root1_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F25);
		Constraint optionalroot1_F25_root1_F31 = IntConstraintFactory.arithm(root1_F31, "<=", root1_F25);
		optionalroot1_F25_root1_F31.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F25_root1_F31);
		Constraint mandatoryroot1_F25_root1_F32 = IntConstraintFactory.arithm(root1_F25, "=", root1_F32);
		mandatoryroot1_F25_root1_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F32);
		Constraint mandatoryroot1_F32_root1_F114 = IntConstraintFactory.arithm(root1_F32, "=", root1_F114);
		mandatoryroot1_F32_root1_F114.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F32_root1_F114);
		IntVar sumOrroot1_F25_2 = VariableFactory.enumerated("sumOrroot1_F25", 0, 4, solver); 
		BoolVar[] varsOrroot1_F25_2 = new BoolVar[4];
		varsOrroot1_F25_2[0] = root1_F33;
		varsOrroot1_F25_2[1] = root1_F34;
		varsOrroot1_F25_2[2] = root1_F35;
		varsOrroot1_F25_2[3] = root1_F36;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F25_2, sumOrroot1_F25_2));
		Constraint or1root1_F25_2 = IntConstraintFactory.arithm(sumOrroot1_F25_2, ">=", 1);
		or1root1_F25_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F25_2 = IntConstraintFactory.arithm(sumOrroot1_F25_2, "=", 0);
		or0root1_F25_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F25, or1root1_F25_2, or0root1_F25_2);
			
		Constraint optionalroot1_F33_root1_F83 = IntConstraintFactory.arithm(root1_F83, "<=", root1_F33);
		optionalroot1_F33_root1_F83.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F33_root1_F83);
		Constraint mandatoryroot1_F33_root1_F84 = IntConstraintFactory.arithm(root1_F33, "=", root1_F84);
		mandatoryroot1_F33_root1_F84.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F33_root1_F84);
		Constraint mandatoryroot1_F84_root1_F248 = IntConstraintFactory.arithm(root1_F84, "=", root1_F248);
		mandatoryroot1_F84_root1_F248.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F248);
		Constraint optionalroot1_F84_root1_F249 = IntConstraintFactory.arithm(root1_F249, "<=", root1_F84);
		optionalroot1_F84_root1_F249.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F84_root1_F249);
		Constraint mandatoryroot1_F84_root1_F250 = IntConstraintFactory.arithm(root1_F84, "=", root1_F250);
		mandatoryroot1_F84_root1_F250.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F250);
		Constraint mandatoryroot1_F84_root1_F251 = IntConstraintFactory.arithm(root1_F84, "=", root1_F251);
		mandatoryroot1_F84_root1_F251.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F251);
		IntVar sumOrroot1_F84_4 = VariableFactory.enumerated("sumOrroot1_F84", 0, 2, solver); 
		BoolVar[] varsOrroot1_F84_4 = new BoolVar[2];
		varsOrroot1_F84_4[0] = root1_F252;
		varsOrroot1_F84_4[1] = root1_F253;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F84_4, sumOrroot1_F84_4));
		Constraint or1root1_F84_4 = IntConstraintFactory.arithm(sumOrroot1_F84_4, ">=", 1);
		or1root1_F84_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F84_4 = IntConstraintFactory.arithm(sumOrroot1_F84_4, "=", 0);
		or0root1_F84_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F84, or1root1_F84_4, or0root1_F84_4);
			
		Constraint mandatoryroot1_F84_root1_F254 = IntConstraintFactory.arithm(root1_F84, "=", root1_F254);
		mandatoryroot1_F84_root1_F254.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F254);
		Constraint mandatoryroot1_F84_root1_F255 = IntConstraintFactory.arithm(root1_F84, "=", root1_F255);
		mandatoryroot1_F84_root1_F255.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F255);
		Constraint mandatoryroot1_F84_root1_F256 = IntConstraintFactory.arithm(root1_F84, "=", root1_F256);
		mandatoryroot1_F84_root1_F256.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F84_root1_F256);
		Constraint mandatoryroot1_F33_root1_F85 = IntConstraintFactory.arithm(root1_F33, "=", root1_F85);
		mandatoryroot1_F33_root1_F85.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F33_root1_F85);
		Constraint mandatoryroot1_F85_root1_F312 = IntConstraintFactory.arithm(root1_F85, "=", root1_F312);
		mandatoryroot1_F85_root1_F312.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F312);
		Constraint mandatoryroot1_F85_root1_F313 = IntConstraintFactory.arithm(root1_F85, "=", root1_F313);
		mandatoryroot1_F85_root1_F313.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F313);
		Constraint mandatoryroot1_F85_root1_F314 = IntConstraintFactory.arithm(root1_F85, "=", root1_F314);
		mandatoryroot1_F85_root1_F314.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F314);
		Constraint optionalroot1_F85_root1_F315 = IntConstraintFactory.arithm(root1_F315, "<=", root1_F85);
		optionalroot1_F85_root1_F315.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F85_root1_F315);
		IntVar sumOrroot1_F85_4 = VariableFactory.enumerated("sumOrroot1_F85", 0, 2, solver); 
		BoolVar[] varsOrroot1_F85_4 = new BoolVar[2];
		varsOrroot1_F85_4[0] = root1_F316;
		varsOrroot1_F85_4[1] = root1_F317;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F85_4, sumOrroot1_F85_4));
		Constraint or1root1_F85_4 = IntConstraintFactory.arithm(sumOrroot1_F85_4, ">=", 1);
		or1root1_F85_4.setName(Utilities.OR_TC);
		
		Constraint or0root1_F85_4 = IntConstraintFactory.arithm(sumOrroot1_F85_4, "=", 0);
		or0root1_F85_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F85, or1root1_F85_4, or0root1_F85_4);
			
		Constraint optionalroot1_F33_root1_F86 = IntConstraintFactory.arithm(root1_F86, "<=", root1_F33);
		optionalroot1_F33_root1_F86.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F33_root1_F86);
		Constraint optionalroot1_F33_root1_F87 = IntConstraintFactory.arithm(root1_F87, "<=", root1_F33);
		optionalroot1_F33_root1_F87.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F33_root1_F87);
		Constraint mandatoryroot1_F33_root1_F88 = IntConstraintFactory.arithm(root1_F33, "=", root1_F88);
		mandatoryroot1_F33_root1_F88.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F33_root1_F88);
		Constraint mandatoryroot1_F33_root1_F89 = IntConstraintFactory.arithm(root1_F33, "=", root1_F89);
		mandatoryroot1_F33_root1_F89.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F33_root1_F89);
		Constraint optionalroot1_F36_root1_F241 = IntConstraintFactory.arithm(root1_F241, "<=", root1_F36);
		optionalroot1_F36_root1_F241.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F36_root1_F241);
		Constraint mandatoryroot1_F36_root1_F242 = IntConstraintFactory.arithm(root1_F36, "=", root1_F242);
		mandatoryroot1_F36_root1_F242.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F242);
		Constraint mandatoryroot1_F36_root1_F243 = IntConstraintFactory.arithm(root1_F36, "=", root1_F243);
		mandatoryroot1_F36_root1_F243.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F243);
		Constraint mandatoryroot1_F36_root1_F244 = IntConstraintFactory.arithm(root1_F36, "=", root1_F244);
		mandatoryroot1_F36_root1_F244.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F244);
		Constraint mandatoryroot1_F36_root1_F245 = IntConstraintFactory.arithm(root1_F36, "=", root1_F245);
		mandatoryroot1_F36_root1_F245.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F245);
		Constraint mandatoryroot1_F36_root1_F246 = IntConstraintFactory.arithm(root1_F36, "=", root1_F246);
		mandatoryroot1_F36_root1_F246.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F246);
		Constraint mandatoryroot1_F25_root1_F37 = IntConstraintFactory.arithm(root1_F25, "=", root1_F37);
		mandatoryroot1_F25_root1_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F37);
		Constraint mandatoryroot1_F25_root1_F38 = IntConstraintFactory.arithm(root1_F25, "=", root1_F38);
		mandatoryroot1_F25_root1_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F38);
		Constraint optionalroot1_F38_root1_F295 = IntConstraintFactory.arithm(root1_F295, "<=", root1_F38);
		optionalroot1_F38_root1_F295.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F38_root1_F295);
		Constraint mandatoryroot1_F38_root1_F296 = IntConstraintFactory.arithm(root1_F38, "=", root1_F296);
		mandatoryroot1_F38_root1_F296.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F38_root1_F296);
		Constraint mandatoryroot1_F38_root1_F297 = IntConstraintFactory.arithm(root1_F38, "=", root1_F297);
		mandatoryroot1_F38_root1_F297.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F38_root1_F297);
		Constraint mandatoryroot1_F38_root1_F298 = IntConstraintFactory.arithm(root1_F38, "=", root1_F298);
		mandatoryroot1_F38_root1_F298.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F38_root1_F298);
		Constraint mandatoryroot1_F38_root1_F299 = IntConstraintFactory.arithm(root1_F38, "=", root1_F299);
		mandatoryroot1_F38_root1_F299.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F38_root1_F299);
		Constraint mandatoryroot1_F25_root1_F39 = IntConstraintFactory.arithm(root1_F25, "=", root1_F39);
		mandatoryroot1_F25_root1_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F25_root1_F39);
		Constraint mandatoryroot1_F8_root1_F26 = IntConstraintFactory.arithm(root1_F8, "=", root1_F26);
		mandatoryroot1_F8_root1_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F26);
		Constraint mandatoryroot1_F26_root1_F275 = IntConstraintFactory.arithm(root1_F26, "=", root1_F275);
		mandatoryroot1_F26_root1_F275.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F26_root1_F275);
		Constraint optionalroot1_F26_root1_F276 = IntConstraintFactory.arithm(root1_F276, "<=", root1_F26);
		optionalroot1_F26_root1_F276.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F26_root1_F276);
		Constraint optionalroot1_F26_root1_F277 = IntConstraintFactory.arithm(root1_F277, "<=", root1_F26);
		optionalroot1_F26_root1_F277.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F26_root1_F277);
		IntVar sumOrroot1_F26_3 = VariableFactory.enumerated("sumOrroot1_F26", 0, 2, solver); 
		BoolVar[] varsOrroot1_F26_3 = new BoolVar[2];
		varsOrroot1_F26_3[0] = root1_F278;
		varsOrroot1_F26_3[1] = root1_F279;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F26_3, sumOrroot1_F26_3));
		Constraint or1root1_F26_3 = IntConstraintFactory.arithm(sumOrroot1_F26_3, ">=", 1);
		or1root1_F26_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F26_3 = IntConstraintFactory.arithm(sumOrroot1_F26_3, "=", 0);
		or0root1_F26_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F26, or1root1_F26_3, or0root1_F26_3);
			
		Constraint mandatoryroot1_F8_root1_F27 = IntConstraintFactory.arithm(root1_F8, "=", root1_F27);
		mandatoryroot1_F8_root1_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F8_root1_F27);
		Constraint mandatoryroot1_root_root1_F9 = IntConstraintFactory.arithm(root1_root, "=", root1_F9);
		mandatoryroot1_root_root1_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F9);
		Constraint mandatoryroot1_F9_root1_F56 = IntConstraintFactory.arithm(root1_F9, "=", root1_F56);
		mandatoryroot1_F9_root1_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F56);
		Constraint optionalroot1_F9_root1_F57 = IntConstraintFactory.arithm(root1_F57, "<=", root1_F9);
		optionalroot1_F9_root1_F57.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F9_root1_F57);
		Constraint mandatoryroot1_F9_root1_F58 = IntConstraintFactory.arithm(root1_F9, "=", root1_F58);
		mandatoryroot1_F9_root1_F58.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F9_root1_F58);
		Constraint mandatoryroot1_root_root1_F10 = IntConstraintFactory.arithm(root1_root, "=", root1_F10);
		mandatoryroot1_root_root1_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F10);
		Constraint optionalroot1_F10_root1_F286 = IntConstraintFactory.arithm(root1_F286, "<=", root1_F10);
		optionalroot1_F10_root1_F286.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F10_root1_F286);
		Constraint optionalroot1_F10_root1_F287 = IntConstraintFactory.arithm(root1_F287, "<=", root1_F10);
		optionalroot1_F10_root1_F287.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F10_root1_F287);
		Constraint optionalroot1_F287_root1_F301 = IntConstraintFactory.arithm(root1_F301, "<=", root1_F287);
		optionalroot1_F287_root1_F301.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F287_root1_F301);
		Constraint optionalroot1_F287_root1_F302 = IntConstraintFactory.arithm(root1_F302, "<=", root1_F287);
		optionalroot1_F287_root1_F302.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F287_root1_F302);
		Constraint mandatoryroot1_F287_root1_F303 = IntConstraintFactory.arithm(root1_F287, "=", root1_F303);
		mandatoryroot1_F287_root1_F303.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F287_root1_F303);
		Constraint mandatoryroot1_F287_root1_F304 = IntConstraintFactory.arithm(root1_F287, "=", root1_F304);
		mandatoryroot1_F287_root1_F304.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F287_root1_F304);
		Constraint mandatoryroot1_F287_root1_F305 = IntConstraintFactory.arithm(root1_F287, "=", root1_F305);
		mandatoryroot1_F287_root1_F305.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F287_root1_F305);
		IntVar sumOrroot1_F10_2 = VariableFactory.enumerated("sumOrroot1_F10", 0, 2, solver); 
		BoolVar[] varsOrroot1_F10_2 = new BoolVar[2];
		varsOrroot1_F10_2[0] = root1_F288;
		varsOrroot1_F10_2[1] = root1_F289;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F10_2, sumOrroot1_F10_2));
		Constraint or1root1_F10_2 = IntConstraintFactory.arithm(sumOrroot1_F10_2, ">=", 1);
		or1root1_F10_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F10_2 = IntConstraintFactory.arithm(sumOrroot1_F10_2, "=", 0);
		or0root1_F10_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F10, or1root1_F10_2, or0root1_F10_2);
			
		Constraint optionalroot1_F289_root1_F307 = IntConstraintFactory.arithm(root1_F307, "<=", root1_F289);
		optionalroot1_F289_root1_F307.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F289_root1_F307);
		Constraint mandatoryroot1_F289_root1_F308 = IntConstraintFactory.arithm(root1_F289, "=", root1_F308);
		mandatoryroot1_F289_root1_F308.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F289_root1_F308);
		Constraint optionalroot1_F289_root1_F309 = IntConstraintFactory.arithm(root1_F309, "<=", root1_F289);
		optionalroot1_F289_root1_F309.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F289_root1_F309);
		Constraint optionalroot1_F289_root1_F310 = IntConstraintFactory.arithm(root1_F310, "<=", root1_F289);
		optionalroot1_F289_root1_F310.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F289_root1_F310);
		Constraint optionalroot1_F289_root1_F311 = IntConstraintFactory.arithm(root1_F311, "<=", root1_F289);
		optionalroot1_F289_root1_F311.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F289_root1_F311);
		IntVar sumOrroot1_F10_3 = VariableFactory.enumerated("sumOrroot1_F10", 0, 2, solver); 
		BoolVar[] varsOrroot1_F10_3 = new BoolVar[2];
		varsOrroot1_F10_3[0] = root1_F290;
		varsOrroot1_F10_3[1] = root1_F291;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F10_3, sumOrroot1_F10_3));
		Constraint or1root1_F10_3 = IntConstraintFactory.arithm(sumOrroot1_F10_3, ">=", 1);
		or1root1_F10_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F10_3 = IntConstraintFactory.arithm(sumOrroot1_F10_3, "=", 0);
		or0root1_F10_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F10, or1root1_F10_3, or0root1_F10_3);
			
		Constraint mandatoryroot1_F10_root1_F292 = IntConstraintFactory.arithm(root1_F10, "=", root1_F292);
		mandatoryroot1_F10_root1_F292.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F10_root1_F292);
		Constraint mandatoryroot1_F10_root1_F293 = IntConstraintFactory.arithm(root1_F10, "=", root1_F293);
		mandatoryroot1_F10_root1_F293.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F10_root1_F293);
		
		//--------------------------------------------
		//Cross-Tree Constraints
		//--------------------------------------------
		Constraint requiresroot1_F121_root1_F276 = IntConstraintFactory.arithm(root1_F121, "<=", root1_F276);
		requiresroot1_F121_root1_F276.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F121_root1_F276);
		Constraint excludesroot1_F198_root1_F198 = IntConstraintFactory.arithm(root1_F198, "+", root1_F92, "<=", 1);
		excludesroot1_F198_root1_F198.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F198_root1_F198);
		Constraint requiresroot1_F317_root1_F262 = IntConstraintFactory.arithm(root1_F317, "<=", root1_F262);
		requiresroot1_F317_root1_F262.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F317_root1_F262);
		Constraint requiresroot1_F197_root1_F80 = IntConstraintFactory.arithm(root1_F197, "<=", root1_F80);
		requiresroot1_F197_root1_F80.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F197_root1_F80);
		Constraint excludesroot1_F127_root1_F127 = IntConstraintFactory.arithm(root1_F127, "+", root1_F253, "<=", 1);
		excludesroot1_F127_root1_F127.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F127_root1_F127);
		Constraint requiresroot1_F97_root1_F254 = IntConstraintFactory.arithm(root1_F97, "<=", root1_F254);
		requiresroot1_F97_root1_F254.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F97_root1_F254);
		Constraint requiresroot1_F240_root1_F192 = IntConstraintFactory.arithm(root1_F240, "<=", root1_F192);
		requiresroot1_F240_root1_F192.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F240_root1_F192);
		Constraint requiresroot1_F295_root1_F110 = IntConstraintFactory.arithm(root1_F295, "<=", root1_F110);
		requiresroot1_F295_root1_F110.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F295_root1_F110);
		Constraint requiresroot1_F222_root1_F206 = IntConstraintFactory.arithm(root1_F222, "<=", root1_F206);
		requiresroot1_F222_root1_F206.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F222_root1_F206);
		Constraint requiresroot1_F56_root1_F71 = IntConstraintFactory.arithm(root1_F56, "<=", root1_F71);
		requiresroot1_F56_root1_F71.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F56_root1_F71);
		Constraint requiresroot1_F12_root1_F228 = IntConstraintFactory.arithm(root1_F12, "<=", root1_F228);
		requiresroot1_F12_root1_F228.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F12_root1_F228);
		Constraint requiresroot1_F193_root1_F303 = IntConstraintFactory.arithm(root1_F193, "<=", root1_F303);
		requiresroot1_F193_root1_F303.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F193_root1_F303);
		Constraint requiresroot1_F170_root1_F293 = IntConstraintFactory.arithm(root1_F170, "<=", root1_F293);
		requiresroot1_F170_root1_F293.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F170_root1_F293);
		Constraint requiresroot1_F162_root1_F4 = IntConstraintFactory.arithm(root1_F162, "<=", root1_F4);
		requiresroot1_F162_root1_F4.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F162_root1_F4);
		Constraint requiresroot1_F102_root1_F220 = IntConstraintFactory.arithm(root1_F102, "<=", root1_F220);
		requiresroot1_F102_root1_F220.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F102_root1_F220);
		Constraint excludesroot1_F189_root1_F189 = IntConstraintFactory.arithm(root1_F189, "+", root1_F187, "<=", 1);
		excludesroot1_F189_root1_F189.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F189_root1_F189);
		Constraint requiresroot1_F246_root1_F13 = IntConstraintFactory.arithm(root1_F246, "<=", root1_F13);
		requiresroot1_F246_root1_F13.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F246_root1_F13);
		Constraint excludesroot1_F284_root1_F284 = IntConstraintFactory.arithm(root1_F284, "+", root1_F221, "<=", 1);
		excludesroot1_F284_root1_F284.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F284_root1_F284);
		Constraint excludesroot1_F313_root1_F313 = IntConstraintFactory.arithm(root1_F313, "+", root1_F245, "<=", 1);
		excludesroot1_F313_root1_F313.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F313_root1_F313);
		Constraint requiresroot1_F183_root1_F80 = IntConstraintFactory.arithm(root1_F183, "<=", root1_F80);
		requiresroot1_F183_root1_F80.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F183_root1_F80);
		Constraint requiresroot1_F82_root1_F235 = IntConstraintFactory.arithm(root1_F82, "<=", root1_F235);
		requiresroot1_F82_root1_F235.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F82_root1_F235);
		Constraint requiresroot1_F318_root1_F12 = IntConstraintFactory.arithm(root1_F318, "<=", root1_F12);
		requiresroot1_F318_root1_F12.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F318_root1_F12);
		Constraint excludesroot1_F56_root1_F56 = IntConstraintFactory.arithm(root1_F56, "+", root1_F148, "<=", 1);
		excludesroot1_F56_root1_F56.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F56_root1_F56);
		Constraint requiresroot1_F62_root1_F78 = IntConstraintFactory.arithm(root1_F62, "<=", root1_F78);
		requiresroot1_F62_root1_F78.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F62_root1_F78);
		Constraint requiresroot1_F68_root1_F139 = IntConstraintFactory.arithm(root1_F68, "<=", root1_F139);
		requiresroot1_F68_root1_F139.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F68_root1_F139);
		Constraint requiresroot1_F175_root1_F90 = IntConstraintFactory.arithm(root1_F175, "<=", root1_F90);
		requiresroot1_F175_root1_F90.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F175_root1_F90);
		Constraint excludesroot1_F11_root1_F11 = IntConstraintFactory.arithm(root1_F11, "+", root1_F158, "<=", 1);
		excludesroot1_F11_root1_F11.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F11_root1_F11);
		Constraint requiresroot1_F206_root1_F47 = IntConstraintFactory.arithm(root1_F206, "<=", root1_F47);
		requiresroot1_F206_root1_F47.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F206_root1_F47);
		Constraint excludesroot1_F222_root1_F222 = IntConstraintFactory.arithm(root1_F222, "+", root1_F296, "<=", 1);
		excludesroot1_F222_root1_F222.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F222_root1_F222);
		Constraint excludesroot1_F236_root1_F236 = IntConstraintFactory.arithm(root1_F236, "+", root1_F193, "<=", 1);
		excludesroot1_F236_root1_F236.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F236_root1_F236);
		Constraint requiresroot1_F1_root1_F55 = IntConstraintFactory.arithm(root1_F1, "<=", root1_F55);
		requiresroot1_F1_root1_F55.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F1_root1_F55);
		Constraint requiresroot1_F253_root1_F81 = IntConstraintFactory.arithm(root1_F253, "<=", root1_F81);
		requiresroot1_F253_root1_F81.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F253_root1_F81);
		
		//--------------------------------------------
		//Cross-Model Constraints
		//--------------------------------------------
		
		//--------------------------------------------
		//Solve
		//--------------------------------------------
		long start = System.currentTimeMillis();
		System.out.println("Started at: " + start);
		
		List<IntVar> varsAtribute0List = new ArrayList<IntVar>(featureAttrAtribute0.values());
		IntVar[] varsAtribute0 = new IntVar[featureAttrAtribute0.values().size()];
			
		for(int i = 0; i < varsAtribute0List.size(); i++) {
		varsAtribute0[i] = (IntVar) varsAtribute0List.get(i);
		}
		
		List<IntVar> varsAtribute1List = new ArrayList<IntVar>(featureAttrAtribute1.values());
		IntVar[] varsAtribute1 = new IntVar[featureAttrAtribute1.values().size()];
			
		for(int i = 0; i < varsAtribute1List.size(); i++) {
		varsAtribute1[i] = VariableFactory.minus(varsAtribute1List.get(i));
		}
		
		IntVar totalAtribute0 = VariableFactory.bounded("totalAtribute0", 0, 1000000, solver);
			solver.post(IntConstraintFactory.sum(varsAtribute0, totalAtribute0));
		IntVar totalAtribute1 = VariableFactory.bounded("totalAtribute1", -1000000, 0, solver);
			solver.post(IntConstraintFactory.sum(varsAtribute1, totalAtribute1));
		
		//SMF.limitSolution(solver, 10);
		//Chatterbox.showSolutions(solver);
		solver.findParetoFront(ResolutionPolicy.MINIMIZE, totalAtribute0, totalAtribute1);
		Chatterbox.printStatistics(solver);
		
		
		long end = System.currentTimeMillis();
		System.out.println("Ended at: " + end);
		System.out.println("Total time: " + (end - start));
	}
	
	private static void initializeVars(){
		int contFeatures = 320;
			
		root1_root = (BoolVar) VariableFactory.fixed("feature_root1_root", 1, solver);
		root1_F1 = VariableFactory.bool("feature_root1_F1", solver);
		root1_F2 = VariableFactory.bool("feature_root1_F2", solver);
		root1_F42 = VariableFactory.bool("feature_root1_F42", solver);
		root1_F46 = VariableFactory.bool("feature_root1_F46", solver);
		root1_F47 = VariableFactory.bool("feature_root1_F47", solver);
		root1_F48 = VariableFactory.bool("feature_root1_F48", solver);
		root1_F258 = VariableFactory.bool("feature_root1_F258", solver);
		root1_F259 = VariableFactory.bool("feature_root1_F259", solver);
		root1_F260 = VariableFactory.bool("feature_root1_F260", solver);
		root1_F261 = VariableFactory.bool("feature_root1_F261", solver);
		root1_F262 = VariableFactory.bool("feature_root1_F262", solver);
		root1_F263 = VariableFactory.bool("feature_root1_F263", solver);
		root1_F264 = VariableFactory.bool("feature_root1_F264", solver);
		root1_F265 = VariableFactory.bool("feature_root1_F265", solver);
		root1_F266 = VariableFactory.bool("feature_root1_F266", solver);
		root1_F49 = VariableFactory.bool("feature_root1_F49", solver);
		root1_F73 = VariableFactory.bool("feature_root1_F73", solver);
		root1_F81 = VariableFactory.bool("feature_root1_F81", solver);
		root1_F82 = VariableFactory.bool("feature_root1_F82", solver);
		root1_F74 = VariableFactory.bool("feature_root1_F74", solver);
		root1_F75 = VariableFactory.bool("feature_root1_F75", solver);
		root1_F228 = VariableFactory.bool("feature_root1_F228", solver);
		root1_F76 = VariableFactory.bool("feature_root1_F76", solver);
		root1_F77 = VariableFactory.bool("feature_root1_F77", solver);
		root1_F157 = VariableFactory.bool("feature_root1_F157", solver);
		root1_F158 = VariableFactory.bool("feature_root1_F158", solver);
		root1_F159 = VariableFactory.bool("feature_root1_F159", solver);
		root1_F160 = VariableFactory.bool("feature_root1_F160", solver);
		root1_F161 = VariableFactory.bool("feature_root1_F161", solver);
		root1_F162 = VariableFactory.bool("feature_root1_F162", solver);
		root1_F163 = VariableFactory.bool("feature_root1_F163", solver);
		root1_F78 = VariableFactory.bool("feature_root1_F78", solver);
		root1_F79 = VariableFactory.bool("feature_root1_F79", solver);
		root1_F115 = VariableFactory.bool("feature_root1_F115", solver);
		root1_F257 = VariableFactory.bool("feature_root1_F257", solver);
		root1_F116 = VariableFactory.bool("feature_root1_F116", solver);
		root1_F117 = VariableFactory.bool("feature_root1_F117", solver);
		root1_F118 = VariableFactory.bool("feature_root1_F118", solver);
		root1_F119 = VariableFactory.bool("feature_root1_F119", solver);
		root1_F128 = VariableFactory.bool("feature_root1_F128", solver);
		root1_F129 = VariableFactory.bool("feature_root1_F129", solver);
		root1_F130 = VariableFactory.bool("feature_root1_F130", solver);
		root1_F184 = VariableFactory.bool("feature_root1_F184", solver);
		root1_F185 = VariableFactory.bool("feature_root1_F185", solver);
		root1_F247 = VariableFactory.bool("feature_root1_F247", solver);
		root1_F186 = VariableFactory.bool("feature_root1_F186", solver);
		root1_F187 = VariableFactory.bool("feature_root1_F187", solver);
		root1_F188 = VariableFactory.bool("feature_root1_F188", solver);
		root1_F236 = VariableFactory.bool("feature_root1_F236", solver);
		root1_F237 = VariableFactory.bool("feature_root1_F237", solver);
		root1_F238 = VariableFactory.bool("feature_root1_F238", solver);
		root1_F239 = VariableFactory.bool("feature_root1_F239", solver);
		root1_F240 = VariableFactory.bool("feature_root1_F240", solver);
		root1_F189 = VariableFactory.bool("feature_root1_F189", solver);
		root1_F190 = VariableFactory.bool("feature_root1_F190", solver);
		root1_F191 = VariableFactory.bool("feature_root1_F191", solver);
		root1_F131 = VariableFactory.bool("feature_root1_F131", solver);
		root1_F132 = VariableFactory.bool("feature_root1_F132", solver);
		root1_F133 = VariableFactory.bool("feature_root1_F133", solver);
		root1_F134 = VariableFactory.bool("feature_root1_F134", solver);
		root1_F120 = VariableFactory.bool("feature_root1_F120", solver);
		root1_F121 = VariableFactory.bool("feature_root1_F121", solver);
		root1_F80 = VariableFactory.bool("feature_root1_F80", solver);
		root1_F164 = VariableFactory.bool("feature_root1_F164", solver);
		root1_F165 = VariableFactory.bool("feature_root1_F165", solver);
		root1_F166 = VariableFactory.bool("feature_root1_F166", solver);
		root1_F167 = VariableFactory.bool("feature_root1_F167", solver);
		root1_F269 = VariableFactory.bool("feature_root1_F269", solver);
		root1_F270 = VariableFactory.bool("feature_root1_F270", solver);
		root1_F271 = VariableFactory.bool("feature_root1_F271", solver);
		root1_F272 = VariableFactory.bool("feature_root1_F272", solver);
		root1_F273 = VariableFactory.bool("feature_root1_F273", solver);
		root1_F274 = VariableFactory.bool("feature_root1_F274", solver);
		root1_F168 = VariableFactory.bool("feature_root1_F168", solver);
		root1_F169 = VariableFactory.bool("feature_root1_F169", solver);
		root1_F50 = VariableFactory.bool("feature_root1_F50", solver);
		root1_F51 = VariableFactory.bool("feature_root1_F51", solver);
		root1_F52 = VariableFactory.bool("feature_root1_F52", solver);
		root1_F53 = VariableFactory.bool("feature_root1_F53", solver);
		root1_F54 = VariableFactory.bool("feature_root1_F54", solver);
		root1_F55 = VariableFactory.bool("feature_root1_F55", solver);
		root1_F43 = VariableFactory.bool("feature_root1_F43", solver);
		root1_F145 = VariableFactory.bool("feature_root1_F145", solver);
		root1_F146 = VariableFactory.bool("feature_root1_F146", solver);
		root1_F147 = VariableFactory.bool("feature_root1_F147", solver);
		root1_F148 = VariableFactory.bool("feature_root1_F148", solver);
		root1_F44 = VariableFactory.bool("feature_root1_F44", solver);
		root1_F170 = VariableFactory.bool("feature_root1_F170", solver);
		root1_F171 = VariableFactory.bool("feature_root1_F171", solver);
		root1_F201 = VariableFactory.bool("feature_root1_F201", solver);
		root1_F202 = VariableFactory.bool("feature_root1_F202", solver);
		root1_F203 = VariableFactory.bool("feature_root1_F203", solver);
		root1_F204 = VariableFactory.bool("feature_root1_F204", solver);
		root1_F205 = VariableFactory.bool("feature_root1_F205", solver);
		root1_F306 = VariableFactory.bool("feature_root1_F306", solver);
		root1_F206 = VariableFactory.bool("feature_root1_F206", solver);
		root1_F207 = VariableFactory.bool("feature_root1_F207", solver);
		root1_F208 = VariableFactory.bool("feature_root1_F208", solver);
		root1_F209 = VariableFactory.bool("feature_root1_F209", solver);
		root1_F210 = VariableFactory.bool("feature_root1_F210", solver);
		root1_F45 = VariableFactory.bool("feature_root1_F45", solver);
		root1_F3 = VariableFactory.bool("feature_root1_F3", solver);
		root1_F69 = VariableFactory.bool("feature_root1_F69", solver);
		root1_F70 = VariableFactory.bool("feature_root1_F70", solver);
		root1_F143 = VariableFactory.bool("feature_root1_F143", solver);
		root1_F144 = VariableFactory.bool("feature_root1_F144", solver);
		root1_F71 = VariableFactory.bool("feature_root1_F71", solver);
		root1_F211 = VariableFactory.bool("feature_root1_F211", solver);
		root1_F212 = VariableFactory.bool("feature_root1_F212", solver);
		root1_F229 = VariableFactory.bool("feature_root1_F229", solver);
		root1_F235 = VariableFactory.bool("feature_root1_F235", solver);
		root1_F230 = VariableFactory.bool("feature_root1_F230", solver);
		root1_F231 = VariableFactory.bool("feature_root1_F231", solver);
		root1_F232 = VariableFactory.bool("feature_root1_F232", solver);
		root1_F233 = VariableFactory.bool("feature_root1_F233", solver);
		root1_F234 = VariableFactory.bool("feature_root1_F234", solver);
		root1_F213 = VariableFactory.bool("feature_root1_F213", solver);
		root1_F294 = VariableFactory.bool("feature_root1_F294", solver);
		root1_F214 = VariableFactory.bool("feature_root1_F214", solver);
		root1_F215 = VariableFactory.bool("feature_root1_F215", solver);
		root1_F216 = VariableFactory.bool("feature_root1_F216", solver);
		root1_F217 = VariableFactory.bool("feature_root1_F217", solver);
		root1_F218 = VariableFactory.bool("feature_root1_F218", solver);
		root1_F219 = VariableFactory.bool("feature_root1_F219", solver);
		root1_F4 = VariableFactory.bool("feature_root1_F4", solver);
		root1_F267 = VariableFactory.bool("feature_root1_F267", solver);
		root1_F268 = VariableFactory.bool("feature_root1_F268", solver);
		root1_F5 = VariableFactory.bool("feature_root1_F5", solver);
		root1_F90 = VariableFactory.bool("feature_root1_F90", solver);
		root1_F280 = VariableFactory.bool("feature_root1_F280", solver);
		root1_F281 = VariableFactory.bool("feature_root1_F281", solver);
		root1_F282 = VariableFactory.bool("feature_root1_F282", solver);
		root1_F6 = VariableFactory.bool("feature_root1_F6", solver);
		root1_F11 = VariableFactory.bool("feature_root1_F11", solver);
		root1_F112 = VariableFactory.bool("feature_root1_F112", solver);
		root1_F113 = VariableFactory.bool("feature_root1_F113", solver);
		root1_F192 = VariableFactory.bool("feature_root1_F192", solver);
		root1_F193 = VariableFactory.bool("feature_root1_F193", solver);
		root1_F194 = VariableFactory.bool("feature_root1_F194", solver);
		root1_F195 = VariableFactory.bool("feature_root1_F195", solver);
		root1_F196 = VariableFactory.bool("feature_root1_F196", solver);
		root1_F197 = VariableFactory.bool("feature_root1_F197", solver);
		root1_F198 = VariableFactory.bool("feature_root1_F198", solver);
		root1_F199 = VariableFactory.bool("feature_root1_F199", solver);
		root1_F200 = VariableFactory.bool("feature_root1_F200", solver);
		root1_F12 = VariableFactory.bool("feature_root1_F12", solver);
		root1_F59 = VariableFactory.bool("feature_root1_F59", solver);
		root1_F149 = VariableFactory.bool("feature_root1_F149", solver);
		root1_F150 = VariableFactory.bool("feature_root1_F150", solver);
		root1_F151 = VariableFactory.bool("feature_root1_F151", solver);
		root1_F152 = VariableFactory.bool("feature_root1_F152", solver);
		root1_F153 = VariableFactory.bool("feature_root1_F153", solver);
		root1_F154 = VariableFactory.bool("feature_root1_F154", solver);
		root1_F155 = VariableFactory.bool("feature_root1_F155", solver);
		root1_F172 = VariableFactory.bool("feature_root1_F172", solver);
		root1_F173 = VariableFactory.bool("feature_root1_F173", solver);
		root1_F174 = VariableFactory.bool("feature_root1_F174", solver);
		root1_F175 = VariableFactory.bool("feature_root1_F175", solver);
		root1_F176 = VariableFactory.bool("feature_root1_F176", solver);
		root1_F177 = VariableFactory.bool("feature_root1_F177", solver);
		root1_F178 = VariableFactory.bool("feature_root1_F178", solver);
		root1_F226 = VariableFactory.bool("feature_root1_F226", solver);
		root1_F227 = VariableFactory.bool("feature_root1_F227", solver);
		root1_F179 = VariableFactory.bool("feature_root1_F179", solver);
		root1_F156 = VariableFactory.bool("feature_root1_F156", solver);
		root1_F60 = VariableFactory.bool("feature_root1_F60", solver);
		root1_F122 = VariableFactory.bool("feature_root1_F122", solver);
		root1_F123 = VariableFactory.bool("feature_root1_F123", solver);
		root1_F124 = VariableFactory.bool("feature_root1_F124", solver);
		root1_F125 = VariableFactory.bool("feature_root1_F125", solver);
		root1_F126 = VariableFactory.bool("feature_root1_F126", solver);
		root1_F127 = VariableFactory.bool("feature_root1_F127", solver);
		root1_F61 = VariableFactory.bool("feature_root1_F61", solver);
		root1_F62 = VariableFactory.bool("feature_root1_F62", solver);
		root1_F63 = VariableFactory.bool("feature_root1_F63", solver);
		root1_F220 = VariableFactory.bool("feature_root1_F220", solver);
		root1_F221 = VariableFactory.bool("feature_root1_F221", solver);
		root1_F222 = VariableFactory.bool("feature_root1_F222", solver);
		root1_F223 = VariableFactory.bool("feature_root1_F223", solver);
		root1_F224 = VariableFactory.bool("feature_root1_F224", solver);
		root1_F225 = VariableFactory.bool("feature_root1_F225", solver);
		root1_F64 = VariableFactory.bool("feature_root1_F64", solver);
		root1_F65 = VariableFactory.bool("feature_root1_F65", solver);
		root1_F66 = VariableFactory.bool("feature_root1_F66", solver);
		root1_F67 = VariableFactory.bool("feature_root1_F67", solver);
		root1_F68 = VariableFactory.bool("feature_root1_F68", solver);
		root1_F13 = VariableFactory.bool("feature_root1_F13", solver);
		root1_F14 = VariableFactory.bool("feature_root1_F14", solver);
		root1_F91 = VariableFactory.bool("feature_root1_F91", solver);
		root1_F92 = VariableFactory.bool("feature_root1_F92", solver);
		root1_F103 = VariableFactory.bool("feature_root1_F103", solver);
		root1_F104 = VariableFactory.bool("feature_root1_F104", solver);
		root1_F105 = VariableFactory.bool("feature_root1_F105", solver);
		root1_F106 = VariableFactory.bool("feature_root1_F106", solver);
		root1_F107 = VariableFactory.bool("feature_root1_F107", solver);
		root1_F108 = VariableFactory.bool("feature_root1_F108", solver);
		root1_F109 = VariableFactory.bool("feature_root1_F109", solver);
		root1_F110 = VariableFactory.bool("feature_root1_F110", solver);
		root1_F111 = VariableFactory.bool("feature_root1_F111", solver);
		root1_F93 = VariableFactory.bool("feature_root1_F93", solver);
		root1_F94 = VariableFactory.bool("feature_root1_F94", solver);
		root1_F95 = VariableFactory.bool("feature_root1_F95", solver);
		root1_F180 = VariableFactory.bool("feature_root1_F180", solver);
		root1_F181 = VariableFactory.bool("feature_root1_F181", solver);
		root1_F182 = VariableFactory.bool("feature_root1_F182", solver);
		root1_F183 = VariableFactory.bool("feature_root1_F183", solver);
		root1_F96 = VariableFactory.bool("feature_root1_F96", solver);
		root1_F15 = VariableFactory.bool("feature_root1_F15", solver);
		root1_F16 = VariableFactory.bool("feature_root1_F16", solver);
		root1_F40 = VariableFactory.bool("feature_root1_F40", solver);
		root1_F41 = VariableFactory.bool("feature_root1_F41", solver);
		root1_F17 = VariableFactory.bool("feature_root1_F17", solver);
		root1_F28 = VariableFactory.bool("feature_root1_F28", solver);
		root1_F29 = VariableFactory.bool("feature_root1_F29", solver);
		root1_F30 = VariableFactory.bool("feature_root1_F30", solver);
		root1_F18 = VariableFactory.bool("feature_root1_F18", solver);
		root1_F97 = VariableFactory.bool("feature_root1_F97", solver);
		root1_F98 = VariableFactory.bool("feature_root1_F98", solver);
		root1_F139 = VariableFactory.bool("feature_root1_F139", solver);
		root1_F140 = VariableFactory.bool("feature_root1_F140", solver);
		root1_F141 = VariableFactory.bool("feature_root1_F141", solver);
		root1_F142 = VariableFactory.bool("feature_root1_F142", solver);
		root1_F99 = VariableFactory.bool("feature_root1_F99", solver);
		root1_F100 = VariableFactory.bool("feature_root1_F100", solver);
		root1_F101 = VariableFactory.bool("feature_root1_F101", solver);
		root1_F102 = VariableFactory.bool("feature_root1_F102", solver);
		root1_F283 = VariableFactory.bool("feature_root1_F283", solver);
		root1_F284 = VariableFactory.bool("feature_root1_F284", solver);
		root1_F300 = VariableFactory.bool("feature_root1_F300", solver);
		root1_F285 = VariableFactory.bool("feature_root1_F285", solver);
		root1_F7 = VariableFactory.bool("feature_root1_F7", solver);
		root1_F8 = VariableFactory.bool("feature_root1_F8", solver);
		root1_F19 = VariableFactory.bool("feature_root1_F19", solver);
		root1_F20 = VariableFactory.bool("feature_root1_F20", solver);
		root1_F72 = VariableFactory.bool("feature_root1_F72", solver);
		root1_F135 = VariableFactory.bool("feature_root1_F135", solver);
		root1_F136 = VariableFactory.bool("feature_root1_F136", solver);
		root1_F137 = VariableFactory.bool("feature_root1_F137", solver);
		root1_F138 = VariableFactory.bool("feature_root1_F138", solver);
		root1_F21 = VariableFactory.bool("feature_root1_F21", solver);
		root1_F22 = VariableFactory.bool("feature_root1_F22", solver);
		root1_F23 = VariableFactory.bool("feature_root1_F23", solver);
		root1_F24 = VariableFactory.bool("feature_root1_F24", solver);
		root1_F318 = VariableFactory.bool("feature_root1_F318", solver);
		root1_F319 = VariableFactory.bool("feature_root1_F319", solver);
		root1_F25 = VariableFactory.bool("feature_root1_F25", solver);
		root1_F31 = VariableFactory.bool("feature_root1_F31", solver);
		root1_F32 = VariableFactory.bool("feature_root1_F32", solver);
		root1_F114 = VariableFactory.bool("feature_root1_F114", solver);
		root1_F33 = VariableFactory.bool("feature_root1_F33", solver);
		root1_F83 = VariableFactory.bool("feature_root1_F83", solver);
		root1_F84 = VariableFactory.bool("feature_root1_F84", solver);
		root1_F248 = VariableFactory.bool("feature_root1_F248", solver);
		root1_F249 = VariableFactory.bool("feature_root1_F249", solver);
		root1_F250 = VariableFactory.bool("feature_root1_F250", solver);
		root1_F251 = VariableFactory.bool("feature_root1_F251", solver);
		root1_F252 = VariableFactory.bool("feature_root1_F252", solver);
		root1_F253 = VariableFactory.bool("feature_root1_F253", solver);
		root1_F254 = VariableFactory.bool("feature_root1_F254", solver);
		root1_F255 = VariableFactory.bool("feature_root1_F255", solver);
		root1_F256 = VariableFactory.bool("feature_root1_F256", solver);
		root1_F85 = VariableFactory.bool("feature_root1_F85", solver);
		root1_F312 = VariableFactory.bool("feature_root1_F312", solver);
		root1_F313 = VariableFactory.bool("feature_root1_F313", solver);
		root1_F314 = VariableFactory.bool("feature_root1_F314", solver);
		root1_F315 = VariableFactory.bool("feature_root1_F315", solver);
		root1_F316 = VariableFactory.bool("feature_root1_F316", solver);
		root1_F317 = VariableFactory.bool("feature_root1_F317", solver);
		root1_F86 = VariableFactory.bool("feature_root1_F86", solver);
		root1_F87 = VariableFactory.bool("feature_root1_F87", solver);
		root1_F88 = VariableFactory.bool("feature_root1_F88", solver);
		root1_F89 = VariableFactory.bool("feature_root1_F89", solver);
		root1_F34 = VariableFactory.bool("feature_root1_F34", solver);
		root1_F35 = VariableFactory.bool("feature_root1_F35", solver);
		root1_F36 = VariableFactory.bool("feature_root1_F36", solver);
		root1_F241 = VariableFactory.bool("feature_root1_F241", solver);
		root1_F242 = VariableFactory.bool("feature_root1_F242", solver);
		root1_F243 = VariableFactory.bool("feature_root1_F243", solver);
		root1_F244 = VariableFactory.bool("feature_root1_F244", solver);
		root1_F245 = VariableFactory.bool("feature_root1_F245", solver);
		root1_F246 = VariableFactory.bool("feature_root1_F246", solver);
		root1_F37 = VariableFactory.bool("feature_root1_F37", solver);
		root1_F38 = VariableFactory.bool("feature_root1_F38", solver);
		root1_F295 = VariableFactory.bool("feature_root1_F295", solver);
		root1_F296 = VariableFactory.bool("feature_root1_F296", solver);
		root1_F297 = VariableFactory.bool("feature_root1_F297", solver);
		root1_F298 = VariableFactory.bool("feature_root1_F298", solver);
		root1_F299 = VariableFactory.bool("feature_root1_F299", solver);
		root1_F39 = VariableFactory.bool("feature_root1_F39", solver);
		root1_F26 = VariableFactory.bool("feature_root1_F26", solver);
		root1_F275 = VariableFactory.bool("feature_root1_F275", solver);
		root1_F276 = VariableFactory.bool("feature_root1_F276", solver);
		root1_F277 = VariableFactory.bool("feature_root1_F277", solver);
		root1_F278 = VariableFactory.bool("feature_root1_F278", solver);
		root1_F279 = VariableFactory.bool("feature_root1_F279", solver);
		root1_F27 = VariableFactory.bool("feature_root1_F27", solver);
		root1_F9 = VariableFactory.bool("feature_root1_F9", solver);
		root1_F56 = VariableFactory.bool("feature_root1_F56", solver);
		root1_F57 = VariableFactory.bool("feature_root1_F57", solver);
		root1_F58 = VariableFactory.bool("feature_root1_F58", solver);
		root1_F10 = VariableFactory.bool("feature_root1_F10", solver);
		root1_F286 = VariableFactory.bool("feature_root1_F286", solver);
		root1_F287 = VariableFactory.bool("feature_root1_F287", solver);
		root1_F301 = VariableFactory.bool("feature_root1_F301", solver);
		root1_F302 = VariableFactory.bool("feature_root1_F302", solver);
		root1_F303 = VariableFactory.bool("feature_root1_F303", solver);
		root1_F304 = VariableFactory.bool("feature_root1_F304", solver);
		root1_F305 = VariableFactory.bool("feature_root1_F305", solver);
		root1_F288 = VariableFactory.bool("feature_root1_F288", solver);
		root1_F289 = VariableFactory.bool("feature_root1_F289", solver);
		root1_F307 = VariableFactory.bool("feature_root1_F307", solver);
		root1_F308 = VariableFactory.bool("feature_root1_F308", solver);
		root1_F309 = VariableFactory.bool("feature_root1_F309", solver);
		root1_F310 = VariableFactory.bool("feature_root1_F310", solver);
		root1_F311 = VariableFactory.bool("feature_root1_F311", solver);
		root1_F290 = VariableFactory.bool("feature_root1_F290", solver);
		root1_F291 = VariableFactory.bool("feature_root1_F291", solver);
		root1_F292 = VariableFactory.bool("feature_root1_F292", solver);
		root1_F293 = VariableFactory.bool("feature_root1_F293", solver);
	}
	
	private static void initializeFeatureAttributes(){
		featureAttrAtribute1 = new HashMap<String, IntVar>();
		featureAttrAtribute0 = new HashMap<String, IntVar>();
		
		featureAttrAtribute1.put("root1_F1", VariableFactory.enumerated("root1_F1Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F1"), "=", 0));
		featureAttrAtribute0.put("root1_F1", VariableFactory.enumerated("root1_F1Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F1"), "=", 0));
		featureAttrAtribute1.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F46"), "=", 0));
		featureAttrAtribute0.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F46"), "=", 0));
		featureAttrAtribute1.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F47"), "=", 0));
		featureAttrAtribute0.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F47"), "=", 0));
		featureAttrAtribute1.put("root1_F258", VariableFactory.enumerated("root1_F258Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F258, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F258"), "=", 0));
		featureAttrAtribute0.put("root1_F258", VariableFactory.enumerated("root1_F258Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F258, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F258"), "=", 0));
		featureAttrAtribute1.put("root1_F259", VariableFactory.enumerated("root1_F259Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F259, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F259"), "=", 0));
		featureAttrAtribute0.put("root1_F259", VariableFactory.enumerated("root1_F259Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F259, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F259"), "=", 0));
		featureAttrAtribute1.put("root1_F260", VariableFactory.enumerated("root1_F260Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F260, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F260"), "=", 0));
		featureAttrAtribute0.put("root1_F260", VariableFactory.enumerated("root1_F260Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F260, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F260"), "=", 0));
		featureAttrAtribute1.put("root1_F261", VariableFactory.enumerated("root1_F261Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F261, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F261"), "=", 0));
		featureAttrAtribute0.put("root1_F261", VariableFactory.enumerated("root1_F261Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F261, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F261"), "=", 0));
		featureAttrAtribute1.put("root1_F262", VariableFactory.enumerated("root1_F262Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F262, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F262"), "=", 0));
		featureAttrAtribute0.put("root1_F262", VariableFactory.enumerated("root1_F262Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F262, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F262"), "=", 0));
		featureAttrAtribute1.put("root1_F263", VariableFactory.enumerated("root1_F263Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F263, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F263"), "=", 0));
		featureAttrAtribute0.put("root1_F263", VariableFactory.enumerated("root1_F263Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F263, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F263"), "=", 0));
		featureAttrAtribute1.put("root1_F264", VariableFactory.enumerated("root1_F264Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F264, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F264"), "=", 0));
		featureAttrAtribute0.put("root1_F264", VariableFactory.enumerated("root1_F264Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F264, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F264"), "=", 0));
		featureAttrAtribute1.put("root1_F265", VariableFactory.enumerated("root1_F265Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F265, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F265"), "=", 0));
		featureAttrAtribute0.put("root1_F265", VariableFactory.enumerated("root1_F265Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F265, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F265"), "=", 0));
		featureAttrAtribute1.put("root1_F266", VariableFactory.enumerated("root1_F266Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F266, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F266"), "=", 0));
		featureAttrAtribute0.put("root1_F266", VariableFactory.enumerated("root1_F266Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F266, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F266"), "=", 0));
		featureAttrAtribute1.put("root1_F81", VariableFactory.enumerated("root1_F81Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F81"), "=", 0));
		featureAttrAtribute0.put("root1_F81", VariableFactory.enumerated("root1_F81Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F81"), "=", 0));
		featureAttrAtribute1.put("root1_F82", VariableFactory.enumerated("root1_F82Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F82"), "=", 0));
		featureAttrAtribute0.put("root1_F82", VariableFactory.enumerated("root1_F82Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F82"), "=", 0));
		featureAttrAtribute1.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "=", 0));
		featureAttrAtribute0.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "=", 0));
		featureAttrAtribute1.put("root1_F228", VariableFactory.enumerated("root1_F228Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F228, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F228"), "=", 0));
		featureAttrAtribute0.put("root1_F228", VariableFactory.enumerated("root1_F228Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F228, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F228"), "=", 0));
		featureAttrAtribute1.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "=", 0));
		featureAttrAtribute0.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "=", 0));
		featureAttrAtribute1.put("root1_F157", VariableFactory.enumerated("root1_F157Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F157"), "=", 0));
		featureAttrAtribute0.put("root1_F157", VariableFactory.enumerated("root1_F157Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F157"), "=", 0));
		featureAttrAtribute1.put("root1_F158", VariableFactory.enumerated("root1_F158Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F158"), "=", 0));
		featureAttrAtribute0.put("root1_F158", VariableFactory.enumerated("root1_F158Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F158"), "=", 0));
		featureAttrAtribute1.put("root1_F159", VariableFactory.enumerated("root1_F159Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F159"), "=", 0));
		featureAttrAtribute0.put("root1_F159", VariableFactory.enumerated("root1_F159Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F159"), "=", 0));
		featureAttrAtribute1.put("root1_F160", VariableFactory.enumerated("root1_F160Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F160, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F160"), "=", 0));
		featureAttrAtribute0.put("root1_F160", VariableFactory.enumerated("root1_F160Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F160, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F160"), "=", 0));
		featureAttrAtribute1.put("root1_F161", VariableFactory.enumerated("root1_F161Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F161, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F161"), "=", 0));
		featureAttrAtribute0.put("root1_F161", VariableFactory.enumerated("root1_F161Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F161, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F161"), "=", 0));
		featureAttrAtribute1.put("root1_F162", VariableFactory.enumerated("root1_F162Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F162, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F162"), "=", 0));
		featureAttrAtribute0.put("root1_F162", VariableFactory.enumerated("root1_F162Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F162, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F162"), "=", 0));
		featureAttrAtribute1.put("root1_F163", VariableFactory.enumerated("root1_F163Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F163, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F163"), "=", 0));
		featureAttrAtribute0.put("root1_F163", VariableFactory.enumerated("root1_F163Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F163, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F163"), "=", 0));
		featureAttrAtribute1.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "=", 0));
		featureAttrAtribute0.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "=", 0));
		featureAttrAtribute1.put("root1_F257", VariableFactory.enumerated("root1_F257Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F257, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F257"), "=", 0));
		featureAttrAtribute0.put("root1_F257", VariableFactory.enumerated("root1_F257Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F257, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F257"), "=", 0));
		featureAttrAtribute1.put("root1_F116", VariableFactory.enumerated("root1_F116Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F116"), "=", 0));
		featureAttrAtribute0.put("root1_F116", VariableFactory.enumerated("root1_F116Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F116"), "=", 0));
		featureAttrAtribute1.put("root1_F117", VariableFactory.enumerated("root1_F117Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F117"), "=", 0));
		featureAttrAtribute0.put("root1_F117", VariableFactory.enumerated("root1_F117Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F117"), "=", 0));
		featureAttrAtribute1.put("root1_F118", VariableFactory.enumerated("root1_F118Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F118"), "=", 0));
		featureAttrAtribute0.put("root1_F118", VariableFactory.enumerated("root1_F118Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F118"), "=", 0));
		featureAttrAtribute1.put("root1_F128", VariableFactory.enumerated("root1_F128Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F128"), "=", 0));
		featureAttrAtribute0.put("root1_F128", VariableFactory.enumerated("root1_F128Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F128"), "=", 0));
		featureAttrAtribute1.put("root1_F129", VariableFactory.enumerated("root1_F129Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F129"), "=", 0));
		featureAttrAtribute0.put("root1_F129", VariableFactory.enumerated("root1_F129Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F129"), "=", 0));
		featureAttrAtribute1.put("root1_F184", VariableFactory.enumerated("root1_F184Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F184, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F184"), "=", 0));
		featureAttrAtribute0.put("root1_F184", VariableFactory.enumerated("root1_F184Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F184, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F184"), "=", 0));
		featureAttrAtribute1.put("root1_F247", VariableFactory.enumerated("root1_F247Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F247, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F247"), "=", 0));
		featureAttrAtribute0.put("root1_F247", VariableFactory.enumerated("root1_F247Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F247, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F247"), "=", 0));
		featureAttrAtribute1.put("root1_F186", VariableFactory.enumerated("root1_F186Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F186, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F186"), "=", 0));
		featureAttrAtribute0.put("root1_F186", VariableFactory.enumerated("root1_F186Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F186, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F186"), "=", 0));
		featureAttrAtribute1.put("root1_F187", VariableFactory.enumerated("root1_F187Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F187, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F187"), "=", 0));
		featureAttrAtribute0.put("root1_F187", VariableFactory.enumerated("root1_F187Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F187, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F187"), "=", 0));
		featureAttrAtribute1.put("root1_F236", VariableFactory.enumerated("root1_F236Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F236, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F236"), "=", 0));
		featureAttrAtribute0.put("root1_F236", VariableFactory.enumerated("root1_F236Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F236, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F236"), "=", 0));
		featureAttrAtribute1.put("root1_F237", VariableFactory.enumerated("root1_F237Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F237, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F237"), "=", 0));
		featureAttrAtribute0.put("root1_F237", VariableFactory.enumerated("root1_F237Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F237, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F237"), "=", 0));
		featureAttrAtribute1.put("root1_F238", VariableFactory.enumerated("root1_F238Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F238, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F238"), "=", 0));
		featureAttrAtribute0.put("root1_F238", VariableFactory.enumerated("root1_F238Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F238, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F238"), "=", 0));
		featureAttrAtribute1.put("root1_F239", VariableFactory.enumerated("root1_F239Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F239, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F239"), "=", 0));
		featureAttrAtribute0.put("root1_F239", VariableFactory.enumerated("root1_F239Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F239, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F239"), "=", 0));
		featureAttrAtribute1.put("root1_F240", VariableFactory.enumerated("root1_F240Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F240, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F240"), "=", 0));
		featureAttrAtribute0.put("root1_F240", VariableFactory.enumerated("root1_F240Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F240, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F240"), "=", 0));
		featureAttrAtribute1.put("root1_F189", VariableFactory.enumerated("root1_F189Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F189, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F189"), "=", 0));
		featureAttrAtribute0.put("root1_F189", VariableFactory.enumerated("root1_F189Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F189, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F189"), "=", 0));
		featureAttrAtribute1.put("root1_F190", VariableFactory.enumerated("root1_F190Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F190, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F190"), "=", 0));
		featureAttrAtribute0.put("root1_F190", VariableFactory.enumerated("root1_F190Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F190, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F190"), "=", 0));
		featureAttrAtribute1.put("root1_F191", VariableFactory.enumerated("root1_F191Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F191, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F191"), "=", 0));
		featureAttrAtribute0.put("root1_F191", VariableFactory.enumerated("root1_F191Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F191, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F191"), "=", 0));
		featureAttrAtribute1.put("root1_F131", VariableFactory.enumerated("root1_F131Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F131"), "=", 0));
		featureAttrAtribute0.put("root1_F131", VariableFactory.enumerated("root1_F131Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F131"), "=", 0));
		featureAttrAtribute1.put("root1_F132", VariableFactory.enumerated("root1_F132Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F132"), "=", 0));
		featureAttrAtribute0.put("root1_F132", VariableFactory.enumerated("root1_F132Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F132"), "=", 0));
		featureAttrAtribute1.put("root1_F133", VariableFactory.enumerated("root1_F133Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F133"), "=", 0));
		featureAttrAtribute0.put("root1_F133", VariableFactory.enumerated("root1_F133Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F133"), "=", 0));
		featureAttrAtribute1.put("root1_F134", VariableFactory.enumerated("root1_F134Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F134"), "=", 0));
		featureAttrAtribute0.put("root1_F134", VariableFactory.enumerated("root1_F134Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F134"), "=", 0));
		featureAttrAtribute1.put("root1_F120", VariableFactory.enumerated("root1_F120Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F120"), "=", 0));
		featureAttrAtribute0.put("root1_F120", VariableFactory.enumerated("root1_F120Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F120"), "=", 0));
		featureAttrAtribute1.put("root1_F121", VariableFactory.enumerated("root1_F121Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F121"), "=", 0));
		featureAttrAtribute0.put("root1_F121", VariableFactory.enumerated("root1_F121Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F121"), "=", 0));
		featureAttrAtribute1.put("root1_F164", VariableFactory.enumerated("root1_F164Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F164, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F164"), "=", 0));
		featureAttrAtribute0.put("root1_F164", VariableFactory.enumerated("root1_F164Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F164, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F164"), "=", 0));
		featureAttrAtribute1.put("root1_F165", VariableFactory.enumerated("root1_F165Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F165, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F165"), "=", 0));
		featureAttrAtribute0.put("root1_F165", VariableFactory.enumerated("root1_F165Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F165, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F165"), "=", 0));
		featureAttrAtribute1.put("root1_F166", VariableFactory.enumerated("root1_F166Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F166, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F166"), "=", 0));
		featureAttrAtribute0.put("root1_F166", VariableFactory.enumerated("root1_F166Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F166, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F166"), "=", 0));
		featureAttrAtribute1.put("root1_F269", VariableFactory.enumerated("root1_F269Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F269, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F269"), "=", 0));
		featureAttrAtribute0.put("root1_F269", VariableFactory.enumerated("root1_F269Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F269, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F269"), "=", 0));
		featureAttrAtribute1.put("root1_F270", VariableFactory.enumerated("root1_F270Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F270, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F270"), "=", 0));
		featureAttrAtribute0.put("root1_F270", VariableFactory.enumerated("root1_F270Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F270, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F270"), "=", 0));
		featureAttrAtribute1.put("root1_F271", VariableFactory.enumerated("root1_F271Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F271, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F271"), "=", 0));
		featureAttrAtribute0.put("root1_F271", VariableFactory.enumerated("root1_F271Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F271, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F271"), "=", 0));
		featureAttrAtribute1.put("root1_F272", VariableFactory.enumerated("root1_F272Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F272, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F272"), "=", 0));
		featureAttrAtribute0.put("root1_F272", VariableFactory.enumerated("root1_F272Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F272, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F272"), "=", 0));
		featureAttrAtribute1.put("root1_F273", VariableFactory.enumerated("root1_F273Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F273, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F273"), "=", 0));
		featureAttrAtribute0.put("root1_F273", VariableFactory.enumerated("root1_F273Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F273, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F273"), "=", 0));
		featureAttrAtribute1.put("root1_F274", VariableFactory.enumerated("root1_F274Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F274, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F274"), "=", 0));
		featureAttrAtribute0.put("root1_F274", VariableFactory.enumerated("root1_F274Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F274, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F274"), "=", 0));
		featureAttrAtribute1.put("root1_F168", VariableFactory.enumerated("root1_F168Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F168, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F168"), "=", 0));
		featureAttrAtribute0.put("root1_F168", VariableFactory.enumerated("root1_F168Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F168, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F168"), "=", 0));
		featureAttrAtribute1.put("root1_F169", VariableFactory.enumerated("root1_F169Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F169, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F169"), "=", 0));
		featureAttrAtribute0.put("root1_F169", VariableFactory.enumerated("root1_F169Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F169, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F169"), "=", 0));
		featureAttrAtribute1.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "=", 0));
		featureAttrAtribute0.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "=", 0));
		featureAttrAtribute1.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F51"), "=", 0));
		featureAttrAtribute0.put("root1_F51", VariableFactory.enumerated("root1_F51Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F51"), "=", 0));
		featureAttrAtribute1.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F52"), "=", 0));
		featureAttrAtribute0.put("root1_F52", VariableFactory.enumerated("root1_F52Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F52"), "=", 0));
		featureAttrAtribute1.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F53"), "=", 0));
		featureAttrAtribute0.put("root1_F53", VariableFactory.enumerated("root1_F53Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F53"), "=", 0));
		featureAttrAtribute1.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "=", 0));
		featureAttrAtribute0.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "=", 0));
		featureAttrAtribute1.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F55"), "=", 0));
		featureAttrAtribute0.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F55"), "=", 0));
		featureAttrAtribute1.put("root1_F145", VariableFactory.enumerated("root1_F145Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F145"), "=", 0));
		featureAttrAtribute0.put("root1_F145", VariableFactory.enumerated("root1_F145Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F145"), "=", 0));
		featureAttrAtribute1.put("root1_F146", VariableFactory.enumerated("root1_F146Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F146"), "=", 0));
		featureAttrAtribute0.put("root1_F146", VariableFactory.enumerated("root1_F146Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F146"), "=", 0));
		featureAttrAtribute1.put("root1_F147", VariableFactory.enumerated("root1_F147Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F147"), "=", 0));
		featureAttrAtribute0.put("root1_F147", VariableFactory.enumerated("root1_F147Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F147"), "=", 0));
		featureAttrAtribute1.put("root1_F148", VariableFactory.enumerated("root1_F148Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F148"), "=", 0));
		featureAttrAtribute0.put("root1_F148", VariableFactory.enumerated("root1_F148Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F148"), "=", 0));
		featureAttrAtribute1.put("root1_F170", VariableFactory.enumerated("root1_F170Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F170, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F170"), "=", 0));
		featureAttrAtribute0.put("root1_F170", VariableFactory.enumerated("root1_F170Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F170, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F170"), "=", 0));
		featureAttrAtribute1.put("root1_F201", VariableFactory.enumerated("root1_F201Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F201, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F201"), "=", 0));
		featureAttrAtribute0.put("root1_F201", VariableFactory.enumerated("root1_F201Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F201, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F201"), "=", 0));
		featureAttrAtribute1.put("root1_F202", VariableFactory.enumerated("root1_F202Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F202, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F202"), "=", 0));
		featureAttrAtribute0.put("root1_F202", VariableFactory.enumerated("root1_F202Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F202, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F202"), "=", 0));
		featureAttrAtribute1.put("root1_F203", VariableFactory.enumerated("root1_F203Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F203, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F203"), "=", 0));
		featureAttrAtribute0.put("root1_F203", VariableFactory.enumerated("root1_F203Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F203, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F203"), "=", 0));
		featureAttrAtribute1.put("root1_F204", VariableFactory.enumerated("root1_F204Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F204, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F204"), "=", 0));
		featureAttrAtribute0.put("root1_F204", VariableFactory.enumerated("root1_F204Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F204, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F204"), "=", 0));
		featureAttrAtribute1.put("root1_F306", VariableFactory.enumerated("root1_F306Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F306, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F306"), "=", 0));
		featureAttrAtribute0.put("root1_F306", VariableFactory.enumerated("root1_F306Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F306, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F306"), "=", 0));
		featureAttrAtribute1.put("root1_F206", VariableFactory.enumerated("root1_F206Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F206, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F206"), "=", 0));
		featureAttrAtribute0.put("root1_F206", VariableFactory.enumerated("root1_F206Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F206, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F206"), "=", 0));
		featureAttrAtribute1.put("root1_F207", VariableFactory.enumerated("root1_F207Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F207, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F207"), "=", 0));
		featureAttrAtribute0.put("root1_F207", VariableFactory.enumerated("root1_F207Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F207, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F207"), "=", 0));
		featureAttrAtribute1.put("root1_F208", VariableFactory.enumerated("root1_F208Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F208, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F208"), "=", 0));
		featureAttrAtribute0.put("root1_F208", VariableFactory.enumerated("root1_F208Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F208, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F208"), "=", 0));
		featureAttrAtribute1.put("root1_F209", VariableFactory.enumerated("root1_F209Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F209, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F209"), "=", 0));
		featureAttrAtribute0.put("root1_F209", VariableFactory.enumerated("root1_F209Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F209, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F209"), "=", 0));
		featureAttrAtribute1.put("root1_F210", VariableFactory.enumerated("root1_F210Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F210, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F210"), "=", 0));
		featureAttrAtribute0.put("root1_F210", VariableFactory.enumerated("root1_F210Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F210, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F210"), "=", 0));
		featureAttrAtribute1.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "=", 0));
		featureAttrAtribute0.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "=", 0));
		featureAttrAtribute1.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "=", 0));
		featureAttrAtribute0.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "=", 0));
		featureAttrAtribute1.put("root1_F143", VariableFactory.enumerated("root1_F143Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F143"), "=", 0));
		featureAttrAtribute0.put("root1_F143", VariableFactory.enumerated("root1_F143Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F143"), "=", 0));
		featureAttrAtribute1.put("root1_F144", VariableFactory.enumerated("root1_F144Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F144"), "=", 0));
		featureAttrAtribute0.put("root1_F144", VariableFactory.enumerated("root1_F144Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F144"), "=", 0));
		featureAttrAtribute1.put("root1_F211", VariableFactory.enumerated("root1_F211Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F211, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F211"), "=", 0));
		featureAttrAtribute0.put("root1_F211", VariableFactory.enumerated("root1_F211Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F211, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F211"), "=", 0));
		featureAttrAtribute1.put("root1_F235", VariableFactory.enumerated("root1_F235Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F235, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F235"), "=", 0));
		featureAttrAtribute0.put("root1_F235", VariableFactory.enumerated("root1_F235Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F235, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F235"), "=", 0));
		featureAttrAtribute1.put("root1_F230", VariableFactory.enumerated("root1_F230Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F230, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F230"), "=", 0));
		featureAttrAtribute0.put("root1_F230", VariableFactory.enumerated("root1_F230Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F230, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F230"), "=", 0));
		featureAttrAtribute1.put("root1_F231", VariableFactory.enumerated("root1_F231Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F231, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F231"), "=", 0));
		featureAttrAtribute0.put("root1_F231", VariableFactory.enumerated("root1_F231Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F231, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F231"), "=", 0));
		featureAttrAtribute1.put("root1_F232", VariableFactory.enumerated("root1_F232Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F232, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F232"), "=", 0));
		featureAttrAtribute0.put("root1_F232", VariableFactory.enumerated("root1_F232Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F232, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F232"), "=", 0));
		featureAttrAtribute1.put("root1_F233", VariableFactory.enumerated("root1_F233Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F233, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F233"), "=", 0));
		featureAttrAtribute0.put("root1_F233", VariableFactory.enumerated("root1_F233Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F233, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F233"), "=", 0));
		featureAttrAtribute1.put("root1_F234", VariableFactory.enumerated("root1_F234Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F234, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F234"), "=", 0));
		featureAttrAtribute0.put("root1_F234", VariableFactory.enumerated("root1_F234Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F234, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F234"), "=", 0));
		featureAttrAtribute1.put("root1_F294", VariableFactory.enumerated("root1_F294Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F294, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F294"), "=", 0));
		featureAttrAtribute0.put("root1_F294", VariableFactory.enumerated("root1_F294Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F294, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F294"), "=", 0));
		featureAttrAtribute1.put("root1_F214", VariableFactory.enumerated("root1_F214Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F214, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F214"), "=", 0));
		featureAttrAtribute0.put("root1_F214", VariableFactory.enumerated("root1_F214Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F214, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F214"), "=", 0));
		featureAttrAtribute1.put("root1_F215", VariableFactory.enumerated("root1_F215Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F215, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F215"), "=", 0));
		featureAttrAtribute0.put("root1_F215", VariableFactory.enumerated("root1_F215Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F215, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F215"), "=", 0));
		featureAttrAtribute1.put("root1_F216", VariableFactory.enumerated("root1_F216Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F216, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F216"), "=", 0));
		featureAttrAtribute0.put("root1_F216", VariableFactory.enumerated("root1_F216Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F216, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F216"), "=", 0));
		featureAttrAtribute1.put("root1_F217", VariableFactory.enumerated("root1_F217Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F217, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F217"), "=", 0));
		featureAttrAtribute0.put("root1_F217", VariableFactory.enumerated("root1_F217Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F217, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F217"), "=", 0));
		featureAttrAtribute1.put("root1_F218", VariableFactory.enumerated("root1_F218Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F218, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F218"), "=", 0));
		featureAttrAtribute0.put("root1_F218", VariableFactory.enumerated("root1_F218Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F218, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F218"), "=", 0));
		featureAttrAtribute1.put("root1_F219", VariableFactory.enumerated("root1_F219Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F219, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F219"), "=", 0));
		featureAttrAtribute0.put("root1_F219", VariableFactory.enumerated("root1_F219Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F219, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F219"), "=", 0));
		featureAttrAtribute1.put("root1_F267", VariableFactory.enumerated("root1_F267Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F267, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F267"), "=", 0));
		featureAttrAtribute0.put("root1_F267", VariableFactory.enumerated("root1_F267Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F267, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F267"), "=", 0));
		featureAttrAtribute1.put("root1_F268", VariableFactory.enumerated("root1_F268Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F268, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F268"), "=", 0));
		featureAttrAtribute0.put("root1_F268", VariableFactory.enumerated("root1_F268Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F268, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F268"), "=", 0));
		featureAttrAtribute1.put("root1_F280", VariableFactory.enumerated("root1_F280Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F280, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F280"), "=", 0));
		featureAttrAtribute0.put("root1_F280", VariableFactory.enumerated("root1_F280Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F280, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F280"), "=", 0));
		featureAttrAtribute1.put("root1_F281", VariableFactory.enumerated("root1_F281Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F281, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F281"), "=", 0));
		featureAttrAtribute0.put("root1_F281", VariableFactory.enumerated("root1_F281Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F281, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F281"), "=", 0));
		featureAttrAtribute1.put("root1_F282", VariableFactory.enumerated("root1_F282Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F282, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F282"), "=", 0));
		featureAttrAtribute0.put("root1_F282", VariableFactory.enumerated("root1_F282Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F282, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F282"), "=", 0));
		featureAttrAtribute1.put("root1_F112", VariableFactory.enumerated("root1_F112Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F112"), "=", 0));
		featureAttrAtribute0.put("root1_F112", VariableFactory.enumerated("root1_F112Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F112"), "=", 0));
		featureAttrAtribute1.put("root1_F192", VariableFactory.enumerated("root1_F192Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F192, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F192"), "=", 0));
		featureAttrAtribute0.put("root1_F192", VariableFactory.enumerated("root1_F192Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F192, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F192"), "=", 0));
		featureAttrAtribute1.put("root1_F193", VariableFactory.enumerated("root1_F193Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F193, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F193"), "=", 0));
		featureAttrAtribute0.put("root1_F193", VariableFactory.enumerated("root1_F193Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F193, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F193"), "=", 0));
		featureAttrAtribute1.put("root1_F194", VariableFactory.enumerated("root1_F194Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F194, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F194"), "=", 0));
		featureAttrAtribute0.put("root1_F194", VariableFactory.enumerated("root1_F194Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F194, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F194"), "=", 0));
		featureAttrAtribute1.put("root1_F195", VariableFactory.enumerated("root1_F195Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F195, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F195"), "=", 0));
		featureAttrAtribute0.put("root1_F195", VariableFactory.enumerated("root1_F195Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F195, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F195"), "=", 0));
		featureAttrAtribute1.put("root1_F196", VariableFactory.enumerated("root1_F196Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F196, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F196"), "=", 0));
		featureAttrAtribute0.put("root1_F196", VariableFactory.enumerated("root1_F196Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F196, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F196"), "=", 0));
		featureAttrAtribute1.put("root1_F197", VariableFactory.enumerated("root1_F197Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F197, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F197"), "=", 0));
		featureAttrAtribute0.put("root1_F197", VariableFactory.enumerated("root1_F197Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F197, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F197"), "=", 0));
		featureAttrAtribute1.put("root1_F198", VariableFactory.enumerated("root1_F198Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F198, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F198"), "=", 0));
		featureAttrAtribute0.put("root1_F198", VariableFactory.enumerated("root1_F198Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F198, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F198"), "=", 0));
		featureAttrAtribute1.put("root1_F199", VariableFactory.enumerated("root1_F199Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F199, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F199"), "=", 0));
		featureAttrAtribute0.put("root1_F199", VariableFactory.enumerated("root1_F199Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F199, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F199"), "=", 0));
		featureAttrAtribute1.put("root1_F200", VariableFactory.enumerated("root1_F200Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F200, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F200"), "=", 0));
		featureAttrAtribute0.put("root1_F200", VariableFactory.enumerated("root1_F200Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F200, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F200"), "=", 0));
		featureAttrAtribute1.put("root1_F149", VariableFactory.enumerated("root1_F149Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F149"), "=", 0));
		featureAttrAtribute0.put("root1_F149", VariableFactory.enumerated("root1_F149Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F149"), "=", 0));
		featureAttrAtribute1.put("root1_F150", VariableFactory.enumerated("root1_F150Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F150"), "=", 0));
		featureAttrAtribute0.put("root1_F150", VariableFactory.enumerated("root1_F150Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F150"), "=", 0));
		featureAttrAtribute1.put("root1_F151", VariableFactory.enumerated("root1_F151Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F151"), "=", 0));
		featureAttrAtribute0.put("root1_F151", VariableFactory.enumerated("root1_F151Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F151"), "=", 0));
		featureAttrAtribute1.put("root1_F152", VariableFactory.enumerated("root1_F152Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F152"), "=", 0));
		featureAttrAtribute0.put("root1_F152", VariableFactory.enumerated("root1_F152Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F152"), "=", 0));
		featureAttrAtribute1.put("root1_F153", VariableFactory.enumerated("root1_F153Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F153"), "=", 0));
		featureAttrAtribute0.put("root1_F153", VariableFactory.enumerated("root1_F153Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F153"), "=", 0));
		featureAttrAtribute1.put("root1_F154", VariableFactory.enumerated("root1_F154Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F154"), "=", 0));
		featureAttrAtribute0.put("root1_F154", VariableFactory.enumerated("root1_F154Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F154"), "=", 0));
		featureAttrAtribute1.put("root1_F172", VariableFactory.enumerated("root1_F172Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F172, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F172"), "=", 0));
		featureAttrAtribute0.put("root1_F172", VariableFactory.enumerated("root1_F172Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F172, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F172"), "=", 0));
		featureAttrAtribute1.put("root1_F173", VariableFactory.enumerated("root1_F173Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F173, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F173"), "=", 0));
		featureAttrAtribute0.put("root1_F173", VariableFactory.enumerated("root1_F173Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F173, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F173"), "=", 0));
		featureAttrAtribute1.put("root1_F174", VariableFactory.enumerated("root1_F174Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F174, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F174"), "=", 0));
		featureAttrAtribute0.put("root1_F174", VariableFactory.enumerated("root1_F174Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F174, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F174"), "=", 0));
		featureAttrAtribute1.put("root1_F175", VariableFactory.enumerated("root1_F175Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F175, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F175"), "=", 0));
		featureAttrAtribute0.put("root1_F175", VariableFactory.enumerated("root1_F175Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F175, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F175"), "=", 0));
		featureAttrAtribute1.put("root1_F176", VariableFactory.enumerated("root1_F176Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F176, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F176"), "=", 0));
		featureAttrAtribute0.put("root1_F176", VariableFactory.enumerated("root1_F176Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F176, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F176"), "=", 0));
		featureAttrAtribute1.put("root1_F177", VariableFactory.enumerated("root1_F177Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F177, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F177"), "=", 0));
		featureAttrAtribute0.put("root1_F177", VariableFactory.enumerated("root1_F177Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F177, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F177"), "=", 0));
		featureAttrAtribute1.put("root1_F226", VariableFactory.enumerated("root1_F226Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F226, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F226"), "=", 0));
		featureAttrAtribute0.put("root1_F226", VariableFactory.enumerated("root1_F226Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F226, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F226"), "=", 0));
		featureAttrAtribute1.put("root1_F227", VariableFactory.enumerated("root1_F227Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F227, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F227"), "=", 0));
		featureAttrAtribute0.put("root1_F227", VariableFactory.enumerated("root1_F227Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F227, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F227"), "=", 0));
		featureAttrAtribute1.put("root1_F179", VariableFactory.enumerated("root1_F179Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F179, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F179"), "=", 0));
		featureAttrAtribute0.put("root1_F179", VariableFactory.enumerated("root1_F179Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F179, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F179"), "=", 0));
		featureAttrAtribute1.put("root1_F156", VariableFactory.enumerated("root1_F156Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F156"), "=", 0));
		featureAttrAtribute0.put("root1_F156", VariableFactory.enumerated("root1_F156Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F156"), "=", 0));
		featureAttrAtribute1.put("root1_F122", VariableFactory.enumerated("root1_F122Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F122"), "=", 0));
		featureAttrAtribute0.put("root1_F122", VariableFactory.enumerated("root1_F122Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F122"), "=", 0));
		featureAttrAtribute1.put("root1_F123", VariableFactory.enumerated("root1_F123Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F123"), "=", 0));
		featureAttrAtribute0.put("root1_F123", VariableFactory.enumerated("root1_F123Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F123"), "=", 0));
		featureAttrAtribute1.put("root1_F124", VariableFactory.enumerated("root1_F124Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F124"), "=", 0));
		featureAttrAtribute0.put("root1_F124", VariableFactory.enumerated("root1_F124Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F124"), "=", 0));
		featureAttrAtribute1.put("root1_F125", VariableFactory.enumerated("root1_F125Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F125"), "=", 0));
		featureAttrAtribute0.put("root1_F125", VariableFactory.enumerated("root1_F125Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F125"), "=", 0));
		featureAttrAtribute1.put("root1_F126", VariableFactory.enumerated("root1_F126Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F126"), "=", 0));
		featureAttrAtribute0.put("root1_F126", VariableFactory.enumerated("root1_F126Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F126"), "=", 0));
		featureAttrAtribute1.put("root1_F127", VariableFactory.enumerated("root1_F127Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F127"), "=", 0));
		featureAttrAtribute0.put("root1_F127", VariableFactory.enumerated("root1_F127Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F127"), "=", 0));
		featureAttrAtribute1.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "=", 0));
		featureAttrAtribute0.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "=", 0));
		featureAttrAtribute1.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "=", 0));
		featureAttrAtribute0.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "=", 0));
		featureAttrAtribute1.put("root1_F220", VariableFactory.enumerated("root1_F220Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F220, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F220"), "=", 0));
		featureAttrAtribute0.put("root1_F220", VariableFactory.enumerated("root1_F220Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F220, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F220"), "=", 0));
		featureAttrAtribute1.put("root1_F221", VariableFactory.enumerated("root1_F221Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F221, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F221"), "=", 0));
		featureAttrAtribute0.put("root1_F221", VariableFactory.enumerated("root1_F221Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F221, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F221"), "=", 0));
		featureAttrAtribute1.put("root1_F222", VariableFactory.enumerated("root1_F222Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F222, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F222"), "=", 0));
		featureAttrAtribute0.put("root1_F222", VariableFactory.enumerated("root1_F222Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F222, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F222"), "=", 0));
		featureAttrAtribute1.put("root1_F223", VariableFactory.enumerated("root1_F223Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F223, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F223"), "=", 0));
		featureAttrAtribute0.put("root1_F223", VariableFactory.enumerated("root1_F223Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F223, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F223"), "=", 0));
		featureAttrAtribute1.put("root1_F224", VariableFactory.enumerated("root1_F224Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F224, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F224"), "=", 0));
		featureAttrAtribute0.put("root1_F224", VariableFactory.enumerated("root1_F224Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F224, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F224"), "=", 0));
		featureAttrAtribute1.put("root1_F225", VariableFactory.enumerated("root1_F225Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F225, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F225"), "=", 0));
		featureAttrAtribute0.put("root1_F225", VariableFactory.enumerated("root1_F225Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F225, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F225"), "=", 0));
		featureAttrAtribute1.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F64"), "=", 0));
		featureAttrAtribute0.put("root1_F64", VariableFactory.enumerated("root1_F64Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F64"), "=", 0));
		featureAttrAtribute1.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "=", 0));
		featureAttrAtribute0.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "=", 0));
		featureAttrAtribute1.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "=", 0));
		featureAttrAtribute0.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "=", 0));
		featureAttrAtribute1.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "=", 0));
		featureAttrAtribute0.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "=", 0));
		featureAttrAtribute1.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "=", 0));
		featureAttrAtribute0.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "=", 0));
		featureAttrAtribute1.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "=", 0));
		featureAttrAtribute0.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "=", 0));
		featureAttrAtribute1.put("root1_F91", VariableFactory.enumerated("root1_F91Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F91"), "=", 0));
		featureAttrAtribute0.put("root1_F91", VariableFactory.enumerated("root1_F91Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F91"), "=", 0));
		featureAttrAtribute1.put("root1_F103", VariableFactory.enumerated("root1_F103Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F103"), "=", 0));
		featureAttrAtribute0.put("root1_F103", VariableFactory.enumerated("root1_F103Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F103"), "=", 0));
		featureAttrAtribute1.put("root1_F104", VariableFactory.enumerated("root1_F104Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F104"), "=", 0));
		featureAttrAtribute0.put("root1_F104", VariableFactory.enumerated("root1_F104Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F104"), "=", 0));
		featureAttrAtribute1.put("root1_F105", VariableFactory.enumerated("root1_F105Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F105"), "=", 0));
		featureAttrAtribute0.put("root1_F105", VariableFactory.enumerated("root1_F105Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F105"), "=", 0));
		featureAttrAtribute1.put("root1_F106", VariableFactory.enumerated("root1_F106Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F106"), "=", 0));
		featureAttrAtribute0.put("root1_F106", VariableFactory.enumerated("root1_F106Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F106"), "=", 0));
		featureAttrAtribute1.put("root1_F107", VariableFactory.enumerated("root1_F107Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F107"), "=", 0));
		featureAttrAtribute0.put("root1_F107", VariableFactory.enumerated("root1_F107Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F107"), "=", 0));
		featureAttrAtribute1.put("root1_F108", VariableFactory.enumerated("root1_F108Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F108"), "=", 0));
		featureAttrAtribute0.put("root1_F108", VariableFactory.enumerated("root1_F108Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F108"), "=", 0));
		featureAttrAtribute1.put("root1_F109", VariableFactory.enumerated("root1_F109Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F109"), "=", 0));
		featureAttrAtribute0.put("root1_F109", VariableFactory.enumerated("root1_F109Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F109"), "=", 0));
		featureAttrAtribute1.put("root1_F110", VariableFactory.enumerated("root1_F110Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F110"), "=", 0));
		featureAttrAtribute0.put("root1_F110", VariableFactory.enumerated("root1_F110Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F110"), "=", 0));
		featureAttrAtribute1.put("root1_F111", VariableFactory.enumerated("root1_F111Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F111"), "=", 0));
		featureAttrAtribute0.put("root1_F111", VariableFactory.enumerated("root1_F111Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F111"), "=", 0));
		featureAttrAtribute1.put("root1_F93", VariableFactory.enumerated("root1_F93Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F93"), "=", 0));
		featureAttrAtribute0.put("root1_F93", VariableFactory.enumerated("root1_F93Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F93"), "=", 0));
		featureAttrAtribute1.put("root1_F94", VariableFactory.enumerated("root1_F94Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F94"), "=", 0));
		featureAttrAtribute0.put("root1_F94", VariableFactory.enumerated("root1_F94Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F94"), "=", 0));
		featureAttrAtribute1.put("root1_F180", VariableFactory.enumerated("root1_F180Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F180, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F180"), "=", 0));
		featureAttrAtribute0.put("root1_F180", VariableFactory.enumerated("root1_F180Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F180, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F180"), "=", 0));
		featureAttrAtribute1.put("root1_F181", VariableFactory.enumerated("root1_F181Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F181, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F181"), "=", 0));
		featureAttrAtribute0.put("root1_F181", VariableFactory.enumerated("root1_F181Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F181, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F181"), "=", 0));
		featureAttrAtribute1.put("root1_F182", VariableFactory.enumerated("root1_F182Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F182, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F182"), "=", 0));
		featureAttrAtribute0.put("root1_F182", VariableFactory.enumerated("root1_F182Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F182, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F182"), "=", 0));
		featureAttrAtribute1.put("root1_F183", VariableFactory.enumerated("root1_F183Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F183, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F183"), "=", 0));
		featureAttrAtribute0.put("root1_F183", VariableFactory.enumerated("root1_F183Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F183, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F183"), "=", 0));
		featureAttrAtribute1.put("root1_F96", VariableFactory.enumerated("root1_F96Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F96"), "=", 0));
		featureAttrAtribute0.put("root1_F96", VariableFactory.enumerated("root1_F96Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F96"), "=", 0));
		featureAttrAtribute1.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "=", 0));
		featureAttrAtribute0.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "=", 0));
		featureAttrAtribute1.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F40"), "=", 0));
		featureAttrAtribute0.put("root1_F40", VariableFactory.enumerated("root1_F40Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F40"), "=", 0));
		featureAttrAtribute1.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "=", 0));
		featureAttrAtribute0.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "=", 0));
		featureAttrAtribute1.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "=", 0));
		featureAttrAtribute0.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "=", 0));
		featureAttrAtribute1.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "=", 0));
		featureAttrAtribute0.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "=", 0));
		featureAttrAtribute1.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "=", 0));
		featureAttrAtribute0.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "=", 0));
		featureAttrAtribute1.put("root1_F97", VariableFactory.enumerated("root1_F97Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F97"), "=", 0));
		featureAttrAtribute0.put("root1_F97", VariableFactory.enumerated("root1_F97Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F97"), "=", 0));
		featureAttrAtribute1.put("root1_F139", VariableFactory.enumerated("root1_F139Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F139"), "=", 0));
		featureAttrAtribute0.put("root1_F139", VariableFactory.enumerated("root1_F139Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F139"), "=", 0));
		featureAttrAtribute1.put("root1_F140", VariableFactory.enumerated("root1_F140Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F140"), "=", 0));
		featureAttrAtribute0.put("root1_F140", VariableFactory.enumerated("root1_F140Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F140"), "=", 0));
		featureAttrAtribute1.put("root1_F141", VariableFactory.enumerated("root1_F141Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F141"), "=", 0));
		featureAttrAtribute0.put("root1_F141", VariableFactory.enumerated("root1_F141Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F141"), "=", 0));
		featureAttrAtribute1.put("root1_F142", VariableFactory.enumerated("root1_F142Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F142"), "=", 0));
		featureAttrAtribute0.put("root1_F142", VariableFactory.enumerated("root1_F142Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F142"), "=", 0));
		featureAttrAtribute1.put("root1_F99", VariableFactory.enumerated("root1_F99Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F99"), "=", 0));
		featureAttrAtribute0.put("root1_F99", VariableFactory.enumerated("root1_F99Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F99"), "=", 0));
		featureAttrAtribute1.put("root1_F100", VariableFactory.enumerated("root1_F100Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F100"), "=", 0));
		featureAttrAtribute0.put("root1_F100", VariableFactory.enumerated("root1_F100Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F100"), "=", 0));
		featureAttrAtribute1.put("root1_F101", VariableFactory.enumerated("root1_F101Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F101"), "=", 0));
		featureAttrAtribute0.put("root1_F101", VariableFactory.enumerated("root1_F101Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F101"), "=", 0));
		featureAttrAtribute1.put("root1_F283", VariableFactory.enumerated("root1_F283Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F283, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F283"), "=", 0));
		featureAttrAtribute0.put("root1_F283", VariableFactory.enumerated("root1_F283Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F283, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F283"), "=", 0));
		featureAttrAtribute1.put("root1_F300", VariableFactory.enumerated("root1_F300Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F300, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F300"), "=", 0));
		featureAttrAtribute0.put("root1_F300", VariableFactory.enumerated("root1_F300Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F300, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F300"), "=", 0));
		featureAttrAtribute1.put("root1_F285", VariableFactory.enumerated("root1_F285Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F285, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F285"), "=", 0));
		featureAttrAtribute0.put("root1_F285", VariableFactory.enumerated("root1_F285Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F285, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F285"), "=", 0));
		featureAttrAtribute1.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F7"), "=", 0));
		featureAttrAtribute0.put("root1_F7", VariableFactory.enumerated("root1_F7Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F7"), "=", 0));
		featureAttrAtribute1.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "=", 0));
		featureAttrAtribute0.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "=", 0));
		featureAttrAtribute1.put("root1_F135", VariableFactory.enumerated("root1_F135Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F135"), "=", 0));
		featureAttrAtribute0.put("root1_F135", VariableFactory.enumerated("root1_F135Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F135"), "=", 0));
		featureAttrAtribute1.put("root1_F136", VariableFactory.enumerated("root1_F136Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F136"), "=", 0));
		featureAttrAtribute0.put("root1_F136", VariableFactory.enumerated("root1_F136Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F136"), "=", 0));
		featureAttrAtribute1.put("root1_F137", VariableFactory.enumerated("root1_F137Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F137"), "=", 0));
		featureAttrAtribute0.put("root1_F137", VariableFactory.enumerated("root1_F137Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F137"), "=", 0));
		featureAttrAtribute1.put("root1_F138", VariableFactory.enumerated("root1_F138Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F138"), "=", 0));
		featureAttrAtribute0.put("root1_F138", VariableFactory.enumerated("root1_F138Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F138"), "=", 0));
		featureAttrAtribute1.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F21"), "=", 0));
		featureAttrAtribute0.put("root1_F21", VariableFactory.enumerated("root1_F21Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F21"), "=", 0));
		featureAttrAtribute1.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "=", 0));
		featureAttrAtribute0.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "=", 0));
		featureAttrAtribute1.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F23"), "=", 0));
		featureAttrAtribute0.put("root1_F23", VariableFactory.enumerated("root1_F23Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F23"), "=", 0));
		featureAttrAtribute1.put("root1_F318", VariableFactory.enumerated("root1_F318Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F318, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F318"), "=", 0));
		featureAttrAtribute0.put("root1_F318", VariableFactory.enumerated("root1_F318Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F318, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F318"), "=", 0));
		featureAttrAtribute1.put("root1_F319", VariableFactory.enumerated("root1_F319Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F319, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F319"), "=", 0));
		featureAttrAtribute0.put("root1_F319", VariableFactory.enumerated("root1_F319Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F319, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F319"), "=", 0));
		featureAttrAtribute1.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F31"), "=", 0));
		featureAttrAtribute0.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F31"), "=", 0));
		featureAttrAtribute1.put("root1_F114", VariableFactory.enumerated("root1_F114Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F114"), "=", 0));
		featureAttrAtribute0.put("root1_F114", VariableFactory.enumerated("root1_F114Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F114"), "=", 0));
		featureAttrAtribute1.put("root1_F83", VariableFactory.enumerated("root1_F83Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F83"), "=", 0));
		featureAttrAtribute0.put("root1_F83", VariableFactory.enumerated("root1_F83Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F83"), "=", 0));
		featureAttrAtribute1.put("root1_F248", VariableFactory.enumerated("root1_F248Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F248, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F248"), "=", 0));
		featureAttrAtribute0.put("root1_F248", VariableFactory.enumerated("root1_F248Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F248, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F248"), "=", 0));
		featureAttrAtribute1.put("root1_F249", VariableFactory.enumerated("root1_F249Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F249, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F249"), "=", 0));
		featureAttrAtribute0.put("root1_F249", VariableFactory.enumerated("root1_F249Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F249, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F249"), "=", 0));
		featureAttrAtribute1.put("root1_F250", VariableFactory.enumerated("root1_F250Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F250, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F250"), "=", 0));
		featureAttrAtribute0.put("root1_F250", VariableFactory.enumerated("root1_F250Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F250, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F250"), "=", 0));
		featureAttrAtribute1.put("root1_F251", VariableFactory.enumerated("root1_F251Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F251, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F251"), "=", 0));
		featureAttrAtribute0.put("root1_F251", VariableFactory.enumerated("root1_F251Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F251, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F251"), "=", 0));
		featureAttrAtribute1.put("root1_F252", VariableFactory.enumerated("root1_F252Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F252, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F252"), "=", 0));
		featureAttrAtribute0.put("root1_F252", VariableFactory.enumerated("root1_F252Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F252, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F252"), "=", 0));
		featureAttrAtribute1.put("root1_F253", VariableFactory.enumerated("root1_F253Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F253, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F253"), "=", 0));
		featureAttrAtribute0.put("root1_F253", VariableFactory.enumerated("root1_F253Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F253, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F253"), "=", 0));
		featureAttrAtribute1.put("root1_F254", VariableFactory.enumerated("root1_F254Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F254, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F254"), "=", 0));
		featureAttrAtribute0.put("root1_F254", VariableFactory.enumerated("root1_F254Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F254, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F254"), "=", 0));
		featureAttrAtribute1.put("root1_F255", VariableFactory.enumerated("root1_F255Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F255, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F255"), "=", 0));
		featureAttrAtribute0.put("root1_F255", VariableFactory.enumerated("root1_F255Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F255, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F255"), "=", 0));
		featureAttrAtribute1.put("root1_F256", VariableFactory.enumerated("root1_F256Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F256, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F256"), "=", 0));
		featureAttrAtribute0.put("root1_F256", VariableFactory.enumerated("root1_F256Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F256, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F256"), "=", 0));
		featureAttrAtribute1.put("root1_F312", VariableFactory.enumerated("root1_F312Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F312, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F312"), "=", 0));
		featureAttrAtribute0.put("root1_F312", VariableFactory.enumerated("root1_F312Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F312, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F312"), "=", 0));
		featureAttrAtribute1.put("root1_F313", VariableFactory.enumerated("root1_F313Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F313, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F313"), "=", 0));
		featureAttrAtribute0.put("root1_F313", VariableFactory.enumerated("root1_F313Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F313, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F313"), "=", 0));
		featureAttrAtribute1.put("root1_F314", VariableFactory.enumerated("root1_F314Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F314, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F314"), "=", 0));
		featureAttrAtribute0.put("root1_F314", VariableFactory.enumerated("root1_F314Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F314, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F314"), "=", 0));
		featureAttrAtribute1.put("root1_F315", VariableFactory.enumerated("root1_F315Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F315, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F315"), "=", 0));
		featureAttrAtribute0.put("root1_F315", VariableFactory.enumerated("root1_F315Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F315, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F315"), "=", 0));
		featureAttrAtribute1.put("root1_F316", VariableFactory.enumerated("root1_F316Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F316, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F316"), "=", 0));
		featureAttrAtribute0.put("root1_F316", VariableFactory.enumerated("root1_F316Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F316, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F316"), "=", 0));
		featureAttrAtribute1.put("root1_F317", VariableFactory.enumerated("root1_F317Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F317, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F317"), "=", 0));
		featureAttrAtribute0.put("root1_F317", VariableFactory.enumerated("root1_F317Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F317, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F317"), "=", 0));
		featureAttrAtribute1.put("root1_F86", VariableFactory.enumerated("root1_F86Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F86"), "=", 0));
		featureAttrAtribute0.put("root1_F86", VariableFactory.enumerated("root1_F86Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F86"), "=", 0));
		featureAttrAtribute1.put("root1_F87", VariableFactory.enumerated("root1_F87Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F87"), "=", 0));
		featureAttrAtribute0.put("root1_F87", VariableFactory.enumerated("root1_F87Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F87"), "=", 0));
		featureAttrAtribute1.put("root1_F88", VariableFactory.enumerated("root1_F88Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F88"), "=", 0));
		featureAttrAtribute0.put("root1_F88", VariableFactory.enumerated("root1_F88Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F88"), "=", 0));
		featureAttrAtribute1.put("root1_F89", VariableFactory.enumerated("root1_F89Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F89"), "=", 0));
		featureAttrAtribute0.put("root1_F89", VariableFactory.enumerated("root1_F89Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F89"), "=", 0));
		featureAttrAtribute1.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F34"), "=", 0));
		featureAttrAtribute0.put("root1_F34", VariableFactory.enumerated("root1_F34Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F34"), "=", 0));
		featureAttrAtribute1.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "=", 0));
		featureAttrAtribute0.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "=", 0));
		featureAttrAtribute1.put("root1_F241", VariableFactory.enumerated("root1_F241Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F241, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F241"), "=", 0));
		featureAttrAtribute0.put("root1_F241", VariableFactory.enumerated("root1_F241Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F241, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F241"), "=", 0));
		featureAttrAtribute1.put("root1_F242", VariableFactory.enumerated("root1_F242Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F242, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F242"), "=", 0));
		featureAttrAtribute0.put("root1_F242", VariableFactory.enumerated("root1_F242Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F242, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F242"), "=", 0));
		featureAttrAtribute1.put("root1_F243", VariableFactory.enumerated("root1_F243Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F243, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F243"), "=", 0));
		featureAttrAtribute0.put("root1_F243", VariableFactory.enumerated("root1_F243Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F243, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F243"), "=", 0));
		featureAttrAtribute1.put("root1_F244", VariableFactory.enumerated("root1_F244Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F244, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F244"), "=", 0));
		featureAttrAtribute0.put("root1_F244", VariableFactory.enumerated("root1_F244Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F244, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F244"), "=", 0));
		featureAttrAtribute1.put("root1_F245", VariableFactory.enumerated("root1_F245Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F245, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F245"), "=", 0));
		featureAttrAtribute0.put("root1_F245", VariableFactory.enumerated("root1_F245Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F245, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F245"), "=", 0));
		featureAttrAtribute1.put("root1_F246", VariableFactory.enumerated("root1_F246Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F246, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F246"), "=", 0));
		featureAttrAtribute0.put("root1_F246", VariableFactory.enumerated("root1_F246Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F246, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F246"), "=", 0));
		featureAttrAtribute1.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "=", 0));
		featureAttrAtribute0.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "=", 0));
		featureAttrAtribute1.put("root1_F295", VariableFactory.enumerated("root1_F295Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F295, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F295"), "=", 0));
		featureAttrAtribute0.put("root1_F295", VariableFactory.enumerated("root1_F295Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F295, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F295"), "=", 0));
		featureAttrAtribute1.put("root1_F296", VariableFactory.enumerated("root1_F296Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F296, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F296"), "=", 0));
		featureAttrAtribute0.put("root1_F296", VariableFactory.enumerated("root1_F296Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F296, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F296"), "=", 0));
		featureAttrAtribute1.put("root1_F297", VariableFactory.enumerated("root1_F297Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F297, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F297"), "=", 0));
		featureAttrAtribute0.put("root1_F297", VariableFactory.enumerated("root1_F297Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F297, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F297"), "=", 0));
		featureAttrAtribute1.put("root1_F298", VariableFactory.enumerated("root1_F298Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F298, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F298"), "=", 0));
		featureAttrAtribute0.put("root1_F298", VariableFactory.enumerated("root1_F298Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F298, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F298"), "=", 0));
		featureAttrAtribute1.put("root1_F299", VariableFactory.enumerated("root1_F299Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F299, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F299"), "=", 0));
		featureAttrAtribute0.put("root1_F299", VariableFactory.enumerated("root1_F299Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F299, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F299"), "=", 0));
		featureAttrAtribute1.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "=", 0));
		featureAttrAtribute0.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "=", 0));
		featureAttrAtribute1.put("root1_F275", VariableFactory.enumerated("root1_F275Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F275, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F275"), "=", 0));
		featureAttrAtribute0.put("root1_F275", VariableFactory.enumerated("root1_F275Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F275, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F275"), "=", 0));
		featureAttrAtribute1.put("root1_F276", VariableFactory.enumerated("root1_F276Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F276, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F276"), "=", 0));
		featureAttrAtribute0.put("root1_F276", VariableFactory.enumerated("root1_F276Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F276, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F276"), "=", 0));
		featureAttrAtribute1.put("root1_F277", VariableFactory.enumerated("root1_F277Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F277, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F277"), "=", 0));
		featureAttrAtribute0.put("root1_F277", VariableFactory.enumerated("root1_F277Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F277, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F277"), "=", 0));
		featureAttrAtribute1.put("root1_F278", VariableFactory.enumerated("root1_F278Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F278, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F278"), "=", 0));
		featureAttrAtribute0.put("root1_F278", VariableFactory.enumerated("root1_F278Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F278, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F278"), "=", 0));
		featureAttrAtribute1.put("root1_F279", VariableFactory.enumerated("root1_F279Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F279, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F279"), "=", 0));
		featureAttrAtribute0.put("root1_F279", VariableFactory.enumerated("root1_F279Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F279, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F279"), "=", 0));
		featureAttrAtribute1.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "=", 0));
		featureAttrAtribute0.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "=", 0));
		featureAttrAtribute1.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "=", 0));
		featureAttrAtribute0.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "=", 0));
		featureAttrAtribute1.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F57"), "=", 0));
		featureAttrAtribute0.put("root1_F57", VariableFactory.enumerated("root1_F57Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F57"), "=", 0));
		featureAttrAtribute1.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "=", 0));
		featureAttrAtribute0.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "=", 0));
		featureAttrAtribute1.put("root1_F286", VariableFactory.enumerated("root1_F286Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F286, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F286"), "=", 0));
		featureAttrAtribute0.put("root1_F286", VariableFactory.enumerated("root1_F286Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F286, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F286"), "=", 0));
		featureAttrAtribute1.put("root1_F301", VariableFactory.enumerated("root1_F301Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F301, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F301"), "=", 0));
		featureAttrAtribute0.put("root1_F301", VariableFactory.enumerated("root1_F301Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F301, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F301"), "=", 0));
		featureAttrAtribute1.put("root1_F302", VariableFactory.enumerated("root1_F302Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F302, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F302"), "=", 0));
		featureAttrAtribute0.put("root1_F302", VariableFactory.enumerated("root1_F302Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F302, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F302"), "=", 0));
		featureAttrAtribute1.put("root1_F303", VariableFactory.enumerated("root1_F303Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F303, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F303"), "=", 0));
		featureAttrAtribute0.put("root1_F303", VariableFactory.enumerated("root1_F303Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F303, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F303"), "=", 0));
		featureAttrAtribute1.put("root1_F304", VariableFactory.enumerated("root1_F304Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F304, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F304"), "=", 0));
		featureAttrAtribute0.put("root1_F304", VariableFactory.enumerated("root1_F304Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F304, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F304"), "=", 0));
		featureAttrAtribute1.put("root1_F305", VariableFactory.enumerated("root1_F305Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F305, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F305"), "=", 0));
		featureAttrAtribute0.put("root1_F305", VariableFactory.enumerated("root1_F305Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F305, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F305"), "=", 0));
		featureAttrAtribute1.put("root1_F288", VariableFactory.enumerated("root1_F288Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F288, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F288"), "=", 0));
		featureAttrAtribute0.put("root1_F288", VariableFactory.enumerated("root1_F288Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F288, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F288"), "=", 0));
		featureAttrAtribute1.put("root1_F307", VariableFactory.enumerated("root1_F307Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F307, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F307"), "=", 0));
		featureAttrAtribute0.put("root1_F307", VariableFactory.enumerated("root1_F307Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F307, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F307"), "=", 0));
		featureAttrAtribute1.put("root1_F308", VariableFactory.enumerated("root1_F308Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F308, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F308"), "=", 0));
		featureAttrAtribute0.put("root1_F308", VariableFactory.enumerated("root1_F308Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F308, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F308"), "=", 0));
		featureAttrAtribute1.put("root1_F309", VariableFactory.enumerated("root1_F309Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F309, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F309"), "=", 0));
		featureAttrAtribute0.put("root1_F309", VariableFactory.enumerated("root1_F309Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F309, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F309"), "=", 0));
		featureAttrAtribute1.put("root1_F310", VariableFactory.enumerated("root1_F310Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F310, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F310"), "=", 0));
		featureAttrAtribute0.put("root1_F310", VariableFactory.enumerated("root1_F310Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F310, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F310"), "=", 0));
		featureAttrAtribute1.put("root1_F311", VariableFactory.enumerated("root1_F311Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F311, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F311"), "=", 0));
		featureAttrAtribute0.put("root1_F311", VariableFactory.enumerated("root1_F311Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F311, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F311"), "=", 0));
		featureAttrAtribute1.put("root1_F290", VariableFactory.enumerated("root1_F290Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F290, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F290"), "=", 0));
		featureAttrAtribute0.put("root1_F290", VariableFactory.enumerated("root1_F290Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F290, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F290"), "=", 0));
		featureAttrAtribute1.put("root1_F291", VariableFactory.enumerated("root1_F291Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F291, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F291"), "=", 0));
		featureAttrAtribute0.put("root1_F291", VariableFactory.enumerated("root1_F291Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F291, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F291"), "=", 0));
		featureAttrAtribute1.put("root1_F292", VariableFactory.enumerated("root1_F292Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F292, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F292"), "=", 0));
		featureAttrAtribute0.put("root1_F292", VariableFactory.enumerated("root1_F292Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F292, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F292"), "=", 0));
		featureAttrAtribute1.put("root1_F293", VariableFactory.enumerated("root1_F293Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F293, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F293"), "=", 0));
		featureAttrAtribute0.put("root1_F293", VariableFactory.enumerated("root1_F293Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F293, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F293"), "=", 0));
	}
	
	private static IntVar[] getFeatureVars(int contFeatures){
		IntVar[] featureVars = new IntVar[contFeatures];
		Variable[] varsSolver = solver.getVars();
		int index = 0;
		for(int i = 0; i < varsSolver.length; i++) {
			Variable current = varsSolver[i];
			if(current.getName().startsWith("feature_")) {
				featureVars[index] = (IntVar) current;
				index++;
			}
		}
		
		return featureVars;
	}
}

