
package multiModelTests.defaul.features40;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.chocosolver.solver.ResolutionPolicy;
import org.chocosolver.solver.Solver;
import org.chocosolver.solver.constraints.Constraint;
import org.chocosolver.solver.constraints.IntConstraintFactory;
import org.chocosolver.solver.constraints.LogicalConstraintFactory;
import org.chocosolver.solver.constraints.SatFactory;
import org.chocosolver.solver.constraints.nary.cnf.LogOp;
import org.chocosolver.solver.search.loop.monitors.SMF;
import org.chocosolver.solver.search.strategy.IntStrategyFactory;
import org.chocosolver.solver.search.strategy.strategy.IntStrategy;
import org.chocosolver.solver.trace.Chatterbox;
import org.chocosolver.solver.variables.BoolVar;
import org.chocosolver.solver.variables.IntVar;
import org.chocosolver.solver.variables.Variable;
import org.chocosolver.solver.variables.VariableFactory;
import searchStrategies.Utilities;

public class CoCoModelDefault {
	private static Solver solver;
	private static BoolVar root1_root;
	private static BoolVar root1_F1;
	private static BoolVar root1_F18;
	private static BoolVar root1_F19;
	private static BoolVar root1_F20;
	private static BoolVar root1_F21;
	private static BoolVar root1_F140;
	private static BoolVar root1_F141;
	private static BoolVar root1_F142;
	private static BoolVar root1_F143;
	private static BoolVar root1_F144;
	private static BoolVar root1_F22;
	private static BoolVar root1_F23;
	private static BoolVar root1_F54;
	private static BoolVar root1_F55;
	private static BoolVar root1_F56;
	private static BoolVar root1_F57;
	private static BoolVar root1_F132;
	private static BoolVar root1_F58;
	private static BoolVar root1_F59;
	private static BoolVar root1_F60;
	private static BoolVar root1_F24;
	private static BoolVar root1_F61;
	private static BoolVar root1_F62;
	private static BoolVar root1_F63;
	private static BoolVar root1_F64;
	private static BoolVar root1_F75;
	private static BoolVar root1_F76;
	private static BoolVar root1_F77;
	private static BoolVar root1_F118;
	private static BoolVar root1_F78;
	private static BoolVar root1_F79;
	private static BoolVar root1_F80;
	private static BoolVar root1_F81;
	private static BoolVar root1_F85;
	private static BoolVar root1_F124;
	private static BoolVar root1_F125;
	private static BoolVar root1_F126;
	private static BoolVar root1_F127;
	private static BoolVar root1_F128;
	private static BoolVar root1_F129;
	private static BoolVar root1_F130;
	private static BoolVar root1_F131;
	private static BoolVar root1_F86;
	private static BoolVar root1_F82;
	private static BoolVar root1_F83;
	private static BoolVar root1_F84;
	private static BoolVar root1_F65;
	private static BoolVar root1_F66;
	private static BoolVar root1_F67;
	private static BoolVar root1_F68;
	private static BoolVar root1_F69;
	private static BoolVar root1_F25;
	private static BoolVar root1_F26;
	private static BoolVar root1_F74;
	private static BoolVar root1_F2;
	private static BoolVar root1_F3;
	private static BoolVar root1_F70;
	private static BoolVar root1_F71;
	private static BoolVar root1_F72;
	private static BoolVar root1_F73;
	private static BoolVar root1_F100;
	private static BoolVar root1_F101;
	private static BoolVar root1_F102;
	private static BoolVar root1_F103;
	private static BoolVar root1_F104;
	private static BoolVar root1_F105;
	private static BoolVar root1_F106;
	private static BoolVar root1_F107;
	private static BoolVar root1_F108;
	private static BoolVar root1_F4;
	private static BoolVar root1_F5;
	private static BoolVar root1_F8;
	private static BoolVar root1_F9;
	private static BoolVar root1_F10;
	private static BoolVar root1_F11;
	private static BoolVar root1_F12;
	private static BoolVar root1_F27;
	private static BoolVar root1_F28;
	private static BoolVar root1_F29;
	private static BoolVar root1_F30;
	private static BoolVar root1_F31;
	private static BoolVar root1_F32;
	private static BoolVar root1_F87;
	private static BoolVar root1_F33;
	private static BoolVar root1_F34;
	private static BoolVar root1_F36;
	private static BoolVar root1_F95;
	private static BoolVar root1_F147;
	private static BoolVar root1_F148;
	private static BoolVar root1_F149;
	private static BoolVar root1_F150;
	private static BoolVar root1_F151;
	private static BoolVar root1_F152;
	private static BoolVar root1_F96;
	private static BoolVar root1_F97;
	private static BoolVar root1_F98;
	private static BoolVar root1_F119;
	private static BoolVar root1_F120;
	private static BoolVar root1_F121;
	private static BoolVar root1_F122;
	private static BoolVar root1_F123;
	private static BoolVar root1_F99;
	private static BoolVar root1_F37;
	private static BoolVar root1_F38;
	private static BoolVar root1_F39;
	private static BoolVar root1_F40;
	private static BoolVar root1_F53;
	private static BoolVar root1_F159;
	private static BoolVar root1_F41;
	private static BoolVar root1_F42;
	private static BoolVar root1_F46;
	private static BoolVar root1_F47;
	private static BoolVar root1_F48;
	private static BoolVar root1_F109;
	private static BoolVar root1_F110;
	private static BoolVar root1_F111;
	private static BoolVar root1_F136;
	private static BoolVar root1_F137;
	private static BoolVar root1_F138;
	private static BoolVar root1_F139;
	private static BoolVar root1_F112;
	private static BoolVar root1_F145;
	private static BoolVar root1_F146;
	private static BoolVar root1_F113;
	private static BoolVar root1_F114;
	private static BoolVar root1_F115;
	private static BoolVar root1_F158;
	private static BoolVar root1_F116;
	private static BoolVar root1_F117;
	private static BoolVar root1_F49;
	private static BoolVar root1_F43;
	private static BoolVar root1_F44;
	private static BoolVar root1_F45;
	private static BoolVar root1_F35;
	private static BoolVar root1_F13;
	private static BoolVar root1_F14;
	private static BoolVar root1_F50;
	private static BoolVar root1_F51;
	private static BoolVar root1_F153;
	private static BoolVar root1_F154;
	private static BoolVar root1_F155;
	private static BoolVar root1_F156;
	private static BoolVar root1_F157;
	private static BoolVar root1_F52;
	private static BoolVar root1_F133;
	private static BoolVar root1_F134;
	private static BoolVar root1_F135;
	private static BoolVar root1_F15;
	private static BoolVar root1_F16;
	private static BoolVar root1_F17;
	private static BoolVar root1_F6;
	private static BoolVar root1_F7;
	private static BoolVar root1_F88;
	private static BoolVar root1_F89;
	private static BoolVar root1_F90;
	private static BoolVar root1_F91;
	private static BoolVar root1_F92;
	private static BoolVar root1_F93;
	private static BoolVar root1_F94;
	private static BoolVar root2_root;
	private static BoolVar root2_F1;
	private static BoolVar root2_F94;
	private static BoolVar root2_F95;
	private static BoolVar root2_F96;
	private static BoolVar root2_F97;
	private static BoolVar root2_F2;
	private static BoolVar root2_F21;
	private static BoolVar root2_F120;
	private static BoolVar root2_F155;
	private static BoolVar root2_F156;
	private static BoolVar root2_F157;
	private static BoolVar root2_F158;
	private static BoolVar root2_F159;
	private static BoolVar root2_F121;
	private static BoolVar root2_F122;
	private static BoolVar root2_F123;
	private static BoolVar root2_F124;
	private static BoolVar root2_F125;
	private static BoolVar root2_F22;
	private static BoolVar root2_F23;
	private static BoolVar root2_F65;
	private static BoolVar root2_F24;
	private static BoolVar root2_F25;
	private static BoolVar root2_F46;
	private static BoolVar root2_F47;
	private static BoolVar root2_F110;
	private static BoolVar root2_F111;
	private static BoolVar root2_F112;
	private static BoolVar root2_F131;
	private static BoolVar root2_F132;
	private static BoolVar root2_F113;
	private static BoolVar root2_F114;
	private static BoolVar root2_F115;
	private static BoolVar root2_F116;
	private static BoolVar root2_F117;
	private static BoolVar root2_F118;
	private static BoolVar root2_F119;
	private static BoolVar root2_F26;
	private static BoolVar root2_F27;
	private static BoolVar root2_F28;
	private static BoolVar root2_F48;
	private static BoolVar root2_F29;
	private static BoolVar root2_F50;
	private static BoolVar root2_F51;
	private static BoolVar root2_F62;
	private static BoolVar root2_F63;
	private static BoolVar root2_F133;
	private static BoolVar root2_F134;
	private static BoolVar root2_F135;
	private static BoolVar root2_F136;
	private static BoolVar root2_F137;
	private static BoolVar root2_F138;
	private static BoolVar root2_F139;
	private static BoolVar root2_F140;
	private static BoolVar root2_F141;
	private static BoolVar root2_F142;
	private static BoolVar root2_F64;
	private static BoolVar root2_F81;
	private static BoolVar root2_F82;
	private static BoolVar root2_F126;
	private static BoolVar root2_F127;
	private static BoolVar root2_F128;
	private static BoolVar root2_F129;
	private static BoolVar root2_F130;
	private static BoolVar root2_F83;
	private static BoolVar root2_F84;
	private static BoolVar root2_F85;
	private static BoolVar root2_F86;
	private static BoolVar root2_F87;
	private static BoolVar root2_F52;
	private static BoolVar root2_F66;
	private static BoolVar root2_F77;
	private static BoolVar root2_F78;
	private static BoolVar root2_F67;
	private static BoolVar root2_F68;
	private static BoolVar root2_F69;
	private static BoolVar root2_F98;
	private static BoolVar root2_F99;
	private static BoolVar root2_F100;
	private static BoolVar root2_F70;
	private static BoolVar root2_F71;
	private static BoolVar root2_F72;
	private static BoolVar root2_F73;
	private static BoolVar root2_F53;
	private static BoolVar root2_F54;
	private static BoolVar root2_F80;
	private static BoolVar root2_F55;
	private static BoolVar root2_F3;
	private static BoolVar root2_F4;
	private static BoolVar root2_F5;
	private static BoolVar root2_F19;
	private static BoolVar root2_F20;
	private static BoolVar root2_F6;
	private static BoolVar root2_F7;
	private static BoolVar root2_F56;
	private static BoolVar root2_F57;
	private static BoolVar root2_F8;
	private static BoolVar root2_F9;
	private static BoolVar root2_F10;
	private static BoolVar root2_F11;
	private static BoolVar root2_F88;
	private static BoolVar root2_F89;
	private static BoolVar root2_F90;
	private static BoolVar root2_F93;
	private static BoolVar root2_F91;
	private static BoolVar root2_F92;
	private static BoolVar root2_F12;
	private static BoolVar root2_F13;
	private static BoolVar root2_F14;
	private static BoolVar root2_F30;
	private static BoolVar root2_F31;
	private static BoolVar root2_F58;
	private static BoolVar root2_F59;
	private static BoolVar root2_F60;
	private static BoolVar root2_F79;
	private static BoolVar root2_F61;
	private static BoolVar root2_F32;
	private static BoolVar root2_F33;
	private static BoolVar root2_F74;
	private static BoolVar root2_F75;
	private static BoolVar root2_F76;
	private static BoolVar root2_F34;
	private static BoolVar root2_F35;
	private static BoolVar root2_F36;
	private static BoolVar root2_F37;
	private static BoolVar root2_F38;
	private static BoolVar root2_F143;
	private static BoolVar root2_F144;
	private static BoolVar root2_F145;
	private static BoolVar root2_F146;
	private static BoolVar root2_F147;
	private static BoolVar root2_F39;
	private static BoolVar root2_F15;
	private static BoolVar root2_F40;
	private static BoolVar root2_F41;
	private static BoolVar root2_F42;
	private static BoolVar root2_F49;
	private static BoolVar root2_F101;
	private static BoolVar root2_F102;
	private static BoolVar root2_F103;
	private static BoolVar root2_F104;
	private static BoolVar root2_F105;
	private static BoolVar root2_F106;
	private static BoolVar root2_F107;
	private static BoolVar root2_F108;
	private static BoolVar root2_F109;
	private static BoolVar root2_F43;
	private static BoolVar root2_F44;
	private static BoolVar root2_F148;
	private static BoolVar root2_F149;
	private static BoolVar root2_F150;
	private static BoolVar root2_F151;
	private static BoolVar root2_F152;
	private static BoolVar root2_F153;
	private static BoolVar root2_F154;
	private static BoolVar root2_F45;
	private static BoolVar root2_F16;
	private static BoolVar root2_F17;
	private static BoolVar root2_F18;
	private static BoolVar root3_root;
	private static BoolVar root3_F1;
	private static BoolVar root3_F2;
	private static BoolVar root3_F3;
	private static BoolVar root3_F10;
	private static BoolVar root3_F37;
	private static BoolVar root3_F129;
	private static BoolVar root3_F130;
	private static BoolVar root3_F131;
	private static BoolVar root3_F132;
	private static BoolVar root3_F133;
	private static BoolVar root3_F134;
	private static BoolVar root3_F135;
	private static BoolVar root3_F136;
	private static BoolVar root3_F137;
	private static BoolVar root3_F38;
	private static BoolVar root3_F39;
	private static BoolVar root3_F43;
	private static BoolVar root3_F44;
	private static BoolVar root3_F45;
	private static BoolVar root3_F40;
	private static BoolVar root3_F41;
	private static BoolVar root3_F54;
	private static BoolVar root3_F11;
	private static BoolVar root3_F12;
	private static BoolVar root3_F26;
	private static BoolVar root3_F35;
	private static BoolVar root3_F36;
	private static BoolVar root3_F27;
	private static BoolVar root3_F46;
	private static BoolVar root3_F75;
	private static BoolVar root3_F76;
	private static BoolVar root3_F77;
	private static BoolVar root3_F47;
	private static BoolVar root3_F48;
	private static BoolVar root3_F158;
	private static BoolVar root3_F49;
	private static BoolVar root3_F50;
	private static BoolVar root3_F51;
	private static BoolVar root3_F52;
	private static BoolVar root3_F119;
	private static BoolVar root3_F53;
	private static BoolVar root3_F28;
	private static BoolVar root3_F97;
	private static BoolVar root3_F98;
	private static BoolVar root3_F99;
	private static BoolVar root3_F100;
	private static BoolVar root3_F101;
	private static BoolVar root3_F29;
	private static BoolVar root3_F30;
	private static BoolVar root3_F31;
	private static BoolVar root3_F32;
	private static BoolVar root3_F63;
	private static BoolVar root3_F64;
	private static BoolVar root3_F65;
	private static BoolVar root3_F66;
	private static BoolVar root3_F78;
	private static BoolVar root3_F79;
	private static BoolVar root3_F67;
	private static BoolVar root3_F33;
	private static BoolVar root3_F34;
	private static BoolVar root3_F13;
	private static BoolVar root3_F14;
	private static BoolVar root3_F15;
	private static BoolVar root3_F159;
	private static BoolVar root3_F4;
	private static BoolVar root3_F5;
	private static BoolVar root3_F16;
	private static BoolVar root3_F138;
	private static BoolVar root3_F139;
	private static BoolVar root3_F140;
	private static BoolVar root3_F141;
	private static BoolVar root3_F142;
	private static BoolVar root3_F143;
	private static BoolVar root3_F144;
	private static BoolVar root3_F145;
	private static BoolVar root3_F146;
	private static BoolVar root3_F17;
	private static BoolVar root3_F18;
	private static BoolVar root3_F68;
	private static BoolVar root3_F69;
	private static BoolVar root3_F70;
	private static BoolVar root3_F102;
	private static BoolVar root3_F103;
	private static BoolVar root3_F104;
	private static BoolVar root3_F105;
	private static BoolVar root3_F106;
	private static BoolVar root3_F107;
	private static BoolVar root3_F108;
	private static BoolVar root3_F71;
	private static BoolVar root3_F72;
	private static BoolVar root3_F87;
	private static BoolVar root3_F88;
	private static BoolVar root3_F120;
	private static BoolVar root3_F121;
	private static BoolVar root3_F122;
	private static BoolVar root3_F123;
	private static BoolVar root3_F124;
	private static BoolVar root3_F125;
	private static BoolVar root3_F126;
	private static BoolVar root3_F127;
	private static BoolVar root3_F128;
	private static BoolVar root3_F89;
	private static BoolVar root3_F90;
	private static BoolVar root3_F91;
	private static BoolVar root3_F92;
	private static BoolVar root3_F93;
	private static BoolVar root3_F94;
	private static BoolVar root3_F95;
	private static BoolVar root3_F96;
	private static BoolVar root3_F73;
	private static BoolVar root3_F74;
	private static BoolVar root3_F19;
	private static BoolVar root3_F156;
	private static BoolVar root3_F157;
	private static BoolVar root3_F20;
	private static BoolVar root3_F21;
	private static BoolVar root3_F22;
	private static BoolVar root3_F23;
	private static BoolVar root3_F24;
	private static BoolVar root3_F55;
	private static BoolVar root3_F80;
	private static BoolVar root3_F81;
	private static BoolVar root3_F82;
	private static BoolVar root3_F83;
	private static BoolVar root3_F84;
	private static BoolVar root3_F85;
	private static BoolVar root3_F86;
	private static BoolVar root3_F56;
	private static BoolVar root3_F151;
	private static BoolVar root3_F152;
	private static BoolVar root3_F57;
	private static BoolVar root3_F58;
	private static BoolVar root3_F59;
	private static BoolVar root3_F109;
	private static BoolVar root3_F110;
	private static BoolVar root3_F111;
	private static BoolVar root3_F153;
	private static BoolVar root3_F154;
	private static BoolVar root3_F155;
	private static BoolVar root3_F112;
	private static BoolVar root3_F113;
	private static BoolVar root3_F147;
	private static BoolVar root3_F148;
	private static BoolVar root3_F149;
	private static BoolVar root3_F150;
	private static BoolVar root3_F114;
	private static BoolVar root3_F115;
	private static BoolVar root3_F116;
	private static BoolVar root3_F117;
	private static BoolVar root3_F118;
	private static BoolVar root3_F60;
	private static BoolVar root3_F61;
	private static BoolVar root3_F62;
	private static BoolVar root3_F25;
	private static BoolVar root3_F6;
	private static BoolVar root3_F7;
	private static BoolVar root3_F8;
	private static BoolVar root3_F42;
	private static BoolVar root3_F9;
	private static BoolVar root4_root;
	private static BoolVar root4_F1;
	private static BoolVar root4_F2;
	private static BoolVar root4_F3;
	private static BoolVar root4_F4;
	private static BoolVar root4_F5;
	private static BoolVar root4_F6;
	private static BoolVar root4_F7;
	private static BoolVar root4_F11;
	private static BoolVar root4_F41;
	private static BoolVar root4_F42;
	private static BoolVar root4_F43;
	private static BoolVar root4_F156;
	private static BoolVar root4_F157;
	private static BoolVar root4_F158;
	private static BoolVar root4_F44;
	private static BoolVar root4_F45;
	private static BoolVar root4_F46;
	private static BoolVar root4_F47;
	private static BoolVar root4_F116;
	private static BoolVar root4_F117;
	private static BoolVar root4_F118;
	private static BoolVar root4_F119;
	private static BoolVar root4_F120;
	private static BoolVar root4_F121;
	private static BoolVar root4_F48;
	private static BoolVar root4_F49;
	private static BoolVar root4_F50;
	private static BoolVar root4_F79;
	private static BoolVar root4_F80;
	private static BoolVar root4_F81;
	private static BoolVar root4_F82;
	private static BoolVar root4_F12;
	private static BoolVar root4_F130;
	private static BoolVar root4_F131;
	private static BoolVar root4_F132;
	private static BoolVar root4_F133;
	private static BoolVar root4_F134;
	private static BoolVar root4_F135;
	private static BoolVar root4_F136;
	private static BoolVar root4_F13;
	private static BoolVar root4_F14;
	private static BoolVar root4_F15;
	private static BoolVar root4_F16;
	private static BoolVar root4_F17;
	private static BoolVar root4_F61;
	private static BoolVar root4_F83;
	private static BoolVar root4_F84;
	private static BoolVar root4_F85;
	private static BoolVar root4_F109;
	private static BoolVar root4_F110;
	private static BoolVar root4_F111;
	private static BoolVar root4_F112;
	private static BoolVar root4_F113;
	private static BoolVar root4_F114;
	private static BoolVar root4_F86;
	private static BoolVar root4_F87;
	private static BoolVar root4_F88;
	private static BoolVar root4_F89;
	private static BoolVar root4_F90;
	private static BoolVar root4_F91;
	private static BoolVar root4_F92;
	private static BoolVar root4_F93;
	private static BoolVar root4_F94;
	private static BoolVar root4_F95;
	private static BoolVar root4_F62;
	private static BoolVar root4_F63;
	private static BoolVar root4_F64;
	private static BoolVar root4_F65;
	private static BoolVar root4_F66;
	private static BoolVar root4_F18;
	private static BoolVar root4_F19;
	private static BoolVar root4_F20;
	private static BoolVar root4_F21;
	private static BoolVar root4_F115;
	private static BoolVar root4_F22;
	private static BoolVar root4_F23;
	private static BoolVar root4_F24;
	private static BoolVar root4_F25;
	private static BoolVar root4_F26;
	private static BoolVar root4_F8;
	private static BoolVar root4_F9;
	private static BoolVar root4_F10;
	private static BoolVar root4_F27;
	private static BoolVar root4_F32;
	private static BoolVar root4_F33;
	private static BoolVar root4_F51;
	private static BoolVar root4_F52;
	private static BoolVar root4_F53;
	private static BoolVar root4_F54;
	private static BoolVar root4_F55;
	private static BoolVar root4_F56;
	private static BoolVar root4_F57;
	private static BoolVar root4_F58;
	private static BoolVar root4_F67;
	private static BoolVar root4_F68;
	private static BoolVar root4_F69;
	private static BoolVar root4_F59;
	private static BoolVar root4_F60;
	private static BoolVar root4_F140;
	private static BoolVar root4_F141;
	private static BoolVar root4_F142;
	private static BoolVar root4_F143;
	private static BoolVar root4_F34;
	private static BoolVar root4_F35;
	private static BoolVar root4_F105;
	private static BoolVar root4_F159;
	private static BoolVar root4_F106;
	private static BoolVar root4_F36;
	private static BoolVar root4_F37;
	private static BoolVar root4_F38;
	private static BoolVar root4_F70;
	private static BoolVar root4_F71;
	private static BoolVar root4_F72;
	private static BoolVar root4_F73;
	private static BoolVar root4_F74;
	private static BoolVar root4_F75;
	private static BoolVar root4_F76;
	private static BoolVar root4_F144;
	private static BoolVar root4_F145;
	private static BoolVar root4_F146;
	private static BoolVar root4_F147;
	private static BoolVar root4_F148;
	private static BoolVar root4_F149;
	private static BoolVar root4_F150;
	private static BoolVar root4_F151;
	private static BoolVar root4_F152;
	private static BoolVar root4_F77;
	private static BoolVar root4_F78;
	private static BoolVar root4_F107;
	private static BoolVar root4_F108;
	private static BoolVar root4_F39;
	private static BoolVar root4_F40;
	private static BoolVar root4_F28;
	private static BoolVar root4_F122;
	private static BoolVar root4_F123;
	private static BoolVar root4_F153;
	private static BoolVar root4_F154;
	private static BoolVar root4_F155;
	private static BoolVar root4_F124;
	private static BoolVar root4_F125;
	private static BoolVar root4_F126;
	private static BoolVar root4_F127;
	private static BoolVar root4_F128;
	private static BoolVar root4_F137;
	private static BoolVar root4_F138;
	private static BoolVar root4_F139;
	private static BoolVar root4_F129;
	private static BoolVar root4_F29;
	private static BoolVar root4_F97;
	private static BoolVar root4_F98;
	private static BoolVar root4_F99;
	private static BoolVar root4_F100;
	private static BoolVar root4_F101;
	private static BoolVar root4_F102;
	private static BoolVar root4_F103;
	private static BoolVar root4_F104;
	private static BoolVar root4_F30;
	private static BoolVar root4_F31;
	private static BoolVar root4_F96;
		private static HashMap<String, IntVar> featureAttrAtribute1;
		private static HashMap<String, IntVar> featureAttrAtribute0;
	
	public static void main(String[] args) {
		solver = new Solver();
		
		//--------------------------------------------
		//Features
		//--------------------------------------------
		initializeVars();
		
		//--------------------------------------------
		//Feature Attributes
		//--------------------------------------------
		initializeFeatureAttributes();
		
		//--------------------------------------------
		//Tree Constraints
		//--------------------------------------------
		Constraint optionalroot1_root_root1_F1 = IntConstraintFactory.arithm(root1_F1, "<=", root1_root);
		optionalroot1_root_root1_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_root_root1_F1);
		Constraint optionalroot1_F1_root1_F18 = IntConstraintFactory.arithm(root1_F18, "<=", root1_F1);
		optionalroot1_F1_root1_F18.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F1_root1_F18);
		Constraint mandatoryroot1_F1_root1_F19 = IntConstraintFactory.arithm(root1_F1, "=", root1_F19);
		mandatoryroot1_F1_root1_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F19);
		Constraint mandatoryroot1_F1_root1_F20 = IntConstraintFactory.arithm(root1_F1, "=", root1_F20);
		mandatoryroot1_F1_root1_F20.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F20);
		Constraint optionalroot1_F1_root1_F21 = IntConstraintFactory.arithm(root1_F21, "<=", root1_F1);
		optionalroot1_F1_root1_F21.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F1_root1_F21);
		Constraint mandatoryroot1_F21_root1_F140 = IntConstraintFactory.arithm(root1_F21, "=", root1_F140);
		mandatoryroot1_F21_root1_F140.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F21_root1_F140);
		Constraint optionalroot1_F21_root1_F141 = IntConstraintFactory.arithm(root1_F141, "<=", root1_F21);
		optionalroot1_F21_root1_F141.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F21_root1_F141);
		Constraint mandatoryroot1_F21_root1_F142 = IntConstraintFactory.arithm(root1_F21, "=", root1_F142);
		mandatoryroot1_F21_root1_F142.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F21_root1_F142);
		Constraint optionalroot1_F21_root1_F143 = IntConstraintFactory.arithm(root1_F143, "<=", root1_F21);
		optionalroot1_F21_root1_F143.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F21_root1_F143);
		Constraint mandatoryroot1_F21_root1_F144 = IntConstraintFactory.arithm(root1_F21, "=", root1_F144);
		mandatoryroot1_F21_root1_F144.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F21_root1_F144);
		Constraint mandatoryroot1_F1_root1_F22 = IntConstraintFactory.arithm(root1_F1, "=", root1_F22);
		mandatoryroot1_F1_root1_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F22);
		Constraint mandatoryroot1_F1_root1_F23 = IntConstraintFactory.arithm(root1_F1, "=", root1_F23);
		mandatoryroot1_F1_root1_F23.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F23);
		Constraint mandatoryroot1_F23_root1_F54 = IntConstraintFactory.arithm(root1_F23, "=", root1_F54);
		mandatoryroot1_F23_root1_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F54);
		Constraint mandatoryroot1_F23_root1_F55 = IntConstraintFactory.arithm(root1_F23, "=", root1_F55);
		mandatoryroot1_F23_root1_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F55);
		IntVar sumOrroot1_F23_2 = VariableFactory.enumerated("sumOrroot1_F23", 0, 2, solver); 
		BoolVar[] varsOrroot1_F23_2 = new BoolVar[2];
		varsOrroot1_F23_2[0] = root1_F56;
		varsOrroot1_F23_2[1] = root1_F57;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F23_2, sumOrroot1_F23_2));
		Constraint or1root1_F23_2 = IntConstraintFactory.arithm(sumOrroot1_F23_2, ">=", 1);
		or1root1_F23_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F23_2 = IntConstraintFactory.arithm(sumOrroot1_F23_2, "=", 0);
		or0root1_F23_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F23, or1root1_F23_2, or0root1_F23_2);
			
		Constraint mandatoryroot1_F57_root1_F132 = IntConstraintFactory.arithm(root1_F57, "=", root1_F132);
		mandatoryroot1_F57_root1_F132.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F57_root1_F132);
		Constraint mandatoryroot1_F23_root1_F58 = IntConstraintFactory.arithm(root1_F23, "=", root1_F58);
		mandatoryroot1_F23_root1_F58.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F58);
		Constraint mandatoryroot1_F23_root1_F59 = IntConstraintFactory.arithm(root1_F23, "=", root1_F59);
		mandatoryroot1_F23_root1_F59.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F59);
		Constraint mandatoryroot1_F23_root1_F60 = IntConstraintFactory.arithm(root1_F23, "=", root1_F60);
		mandatoryroot1_F23_root1_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F23_root1_F60);
		Constraint mandatoryroot1_F1_root1_F24 = IntConstraintFactory.arithm(root1_F1, "=", root1_F24);
		mandatoryroot1_F1_root1_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F24);
		Constraint optionalroot1_F24_root1_F61 = IntConstraintFactory.arithm(root1_F61, "<=", root1_F24);
		optionalroot1_F24_root1_F61.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F24_root1_F61);
		Constraint mandatoryroot1_F24_root1_F62 = IntConstraintFactory.arithm(root1_F24, "=", root1_F62);
		mandatoryroot1_F24_root1_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F62);
		Constraint mandatoryroot1_F24_root1_F63 = IntConstraintFactory.arithm(root1_F24, "=", root1_F63);
		mandatoryroot1_F24_root1_F63.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F63);
		Constraint optionalroot1_F24_root1_F64 = IntConstraintFactory.arithm(root1_F64, "<=", root1_F24);
		optionalroot1_F24_root1_F64.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F24_root1_F64);
		Constraint optionalroot1_F64_root1_F75 = IntConstraintFactory.arithm(root1_F75, "<=", root1_F64);
		optionalroot1_F64_root1_F75.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F64_root1_F75);
		Constraint mandatoryroot1_F64_root1_F76 = IntConstraintFactory.arithm(root1_F64, "=", root1_F76);
		mandatoryroot1_F64_root1_F76.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F76);
		Constraint mandatoryroot1_F64_root1_F77 = IntConstraintFactory.arithm(root1_F64, "=", root1_F77);
		mandatoryroot1_F64_root1_F77.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F77);
		Constraint optionalroot1_F77_root1_F118 = IntConstraintFactory.arithm(root1_F118, "<=", root1_F77);
		optionalroot1_F77_root1_F118.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F77_root1_F118);
		Constraint mandatoryroot1_F64_root1_F78 = IntConstraintFactory.arithm(root1_F64, "=", root1_F78);
		mandatoryroot1_F64_root1_F78.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F78);
		Constraint optionalroot1_F64_root1_F79 = IntConstraintFactory.arithm(root1_F79, "<=", root1_F64);
		optionalroot1_F64_root1_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F64_root1_F79);
		IntVar sumOrroot1_F64_5 = VariableFactory.enumerated("sumOrroot1_F64", 0, 2, solver); 
		BoolVar[] varsOrroot1_F64_5 = new BoolVar[2];
		varsOrroot1_F64_5[0] = root1_F80;
		varsOrroot1_F64_5[1] = root1_F81;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F64_5, sumOrroot1_F64_5));
		Constraint or1root1_F64_5 = IntConstraintFactory.arithm(sumOrroot1_F64_5, ">=", 1);
		or1root1_F64_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F64_5 = IntConstraintFactory.arithm(sumOrroot1_F64_5, "=", 0);
		or0root1_F64_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F64, or1root1_F64_5, or0root1_F64_5);
			
		Constraint mandatoryroot1_F81_root1_F85 = IntConstraintFactory.arithm(root1_F81, "=", root1_F85);
		mandatoryroot1_F81_root1_F85.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F81_root1_F85);
		Constraint mandatoryroot1_F85_root1_F124 = IntConstraintFactory.arithm(root1_F85, "=", root1_F124);
		mandatoryroot1_F85_root1_F124.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F124);
		Constraint optionalroot1_F85_root1_F125 = IntConstraintFactory.arithm(root1_F125, "<=", root1_F85);
		optionalroot1_F85_root1_F125.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F85_root1_F125);
		Constraint optionalroot1_F85_root1_F126 = IntConstraintFactory.arithm(root1_F126, "<=", root1_F85);
		optionalroot1_F85_root1_F126.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F85_root1_F126);
		Constraint optionalroot1_F85_root1_F127 = IntConstraintFactory.arithm(root1_F127, "<=", root1_F85);
		optionalroot1_F85_root1_F127.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F85_root1_F127);
		Constraint mandatoryroot1_F85_root1_F128 = IntConstraintFactory.arithm(root1_F85, "=", root1_F128);
		mandatoryroot1_F85_root1_F128.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F128);
		Constraint mandatoryroot1_F85_root1_F129 = IntConstraintFactory.arithm(root1_F85, "=", root1_F129);
		mandatoryroot1_F85_root1_F129.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F129);
		Constraint mandatoryroot1_F85_root1_F130 = IntConstraintFactory.arithm(root1_F85, "=", root1_F130);
		mandatoryroot1_F85_root1_F130.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F130);
		Constraint mandatoryroot1_F85_root1_F131 = IntConstraintFactory.arithm(root1_F85, "=", root1_F131);
		mandatoryroot1_F85_root1_F131.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F85_root1_F131);
		Constraint mandatoryroot1_F81_root1_F86 = IntConstraintFactory.arithm(root1_F81, "=", root1_F86);
		mandatoryroot1_F81_root1_F86.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F81_root1_F86);
		Constraint mandatoryroot1_F64_root1_F82 = IntConstraintFactory.arithm(root1_F64, "=", root1_F82);
		mandatoryroot1_F64_root1_F82.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F82);
		Constraint mandatoryroot1_F64_root1_F83 = IntConstraintFactory.arithm(root1_F64, "=", root1_F83);
		mandatoryroot1_F64_root1_F83.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F83);
		Constraint mandatoryroot1_F64_root1_F84 = IntConstraintFactory.arithm(root1_F64, "=", root1_F84);
		mandatoryroot1_F64_root1_F84.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F64_root1_F84);
		Constraint mandatoryroot1_F24_root1_F65 = IntConstraintFactory.arithm(root1_F24, "=", root1_F65);
		mandatoryroot1_F24_root1_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F24_root1_F65);
		IntVar sumOrroot1_F24_5 = VariableFactory.enumerated("sumOrroot1_F24", 0, 2, solver); 
		BoolVar[] varsOrroot1_F24_5 = new BoolVar[2];
		varsOrroot1_F24_5[0] = root1_F66;
		varsOrroot1_F24_5[1] = root1_F67;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F24_5, sumOrroot1_F24_5));
		Constraint or1root1_F24_5 = IntConstraintFactory.arithm(sumOrroot1_F24_5, ">=", 1);
		or1root1_F24_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F24_5 = IntConstraintFactory.arithm(sumOrroot1_F24_5, "=", 0);
		or0root1_F24_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F24, or1root1_F24_5, or0root1_F24_5);
			
		IntVar sumOrroot1_F24_6 = VariableFactory.enumerated("sumOrroot1_F24", 0, 2, solver); 
		BoolVar[] varsOrroot1_F24_6 = new BoolVar[2];
		varsOrroot1_F24_6[0] = root1_F68;
		varsOrroot1_F24_6[1] = root1_F69;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F24_6, sumOrroot1_F24_6));
		Constraint or1root1_F24_6 = IntConstraintFactory.arithm(sumOrroot1_F24_6, ">=", 1);
		or1root1_F24_6.setName(Utilities.OR_TC);
		
		Constraint or0root1_F24_6 = IntConstraintFactory.arithm(sumOrroot1_F24_6, "=", 0);
		or0root1_F24_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F24, or1root1_F24_6, or0root1_F24_6);
			
		Constraint mandatoryroot1_F1_root1_F25 = IntConstraintFactory.arithm(root1_F1, "=", root1_F25);
		mandatoryroot1_F1_root1_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F25);
		Constraint mandatoryroot1_F1_root1_F26 = IntConstraintFactory.arithm(root1_F1, "=", root1_F26);
		mandatoryroot1_F1_root1_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F1_root1_F26);
		Constraint optionalroot1_F26_root1_F74 = IntConstraintFactory.arithm(root1_F74, "<=", root1_F26);
		optionalroot1_F26_root1_F74.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F26_root1_F74);
		Constraint mandatoryroot1_root_root1_F2 = IntConstraintFactory.arithm(root1_root, "=", root1_F2);
		mandatoryroot1_root_root1_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F2);
		Constraint mandatoryroot1_root_root1_F3 = IntConstraintFactory.arithm(root1_root, "=", root1_F3);
		mandatoryroot1_root_root1_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F3);
		Constraint optionalroot1_F3_root1_F70 = IntConstraintFactory.arithm(root1_F70, "<=", root1_F3);
		optionalroot1_F3_root1_F70.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F3_root1_F70);
		Constraint optionalroot1_F3_root1_F71 = IntConstraintFactory.arithm(root1_F71, "<=", root1_F3);
		optionalroot1_F3_root1_F71.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F3_root1_F71);
		Constraint optionalroot1_F3_root1_F72 = IntConstraintFactory.arithm(root1_F72, "<=", root1_F3);
		optionalroot1_F3_root1_F72.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F3_root1_F72);
		Constraint mandatoryroot1_F3_root1_F73 = IntConstraintFactory.arithm(root1_F3, "=", root1_F73);
		mandatoryroot1_F3_root1_F73.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F3_root1_F73);
		Constraint mandatoryroot1_F73_root1_F100 = IntConstraintFactory.arithm(root1_F73, "=", root1_F100);
		mandatoryroot1_F73_root1_F100.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F73_root1_F100);
		Constraint optionalroot1_F73_root1_F101 = IntConstraintFactory.arithm(root1_F101, "<=", root1_F73);
		optionalroot1_F73_root1_F101.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F73_root1_F101);
		Constraint optionalroot1_F73_root1_F102 = IntConstraintFactory.arithm(root1_F102, "<=", root1_F73);
		optionalroot1_F73_root1_F102.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F73_root1_F102);
		IntVar sumOrroot1_F73_3 = VariableFactory.enumerated("sumOrroot1_F73", 0, 3, solver); 
		BoolVar[] varsOrroot1_F73_3 = new BoolVar[3];
		varsOrroot1_F73_3[0] = root1_F103;
		varsOrroot1_F73_3[1] = root1_F104;
		varsOrroot1_F73_3[2] = root1_F105;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F73_3, sumOrroot1_F73_3));
		Constraint or1root1_F73_3 = IntConstraintFactory.arithm(sumOrroot1_F73_3, ">=", 1);
		or1root1_F73_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F73_3 = IntConstraintFactory.arithm(sumOrroot1_F73_3, "=", 0);
		or0root1_F73_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F73, or1root1_F73_3, or0root1_F73_3);
			
		Constraint mandatoryroot1_F73_root1_F106 = IntConstraintFactory.arithm(root1_F73, "=", root1_F106);
		mandatoryroot1_F73_root1_F106.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F73_root1_F106);
		Constraint mandatoryroot1_F73_root1_F107 = IntConstraintFactory.arithm(root1_F73, "=", root1_F107);
		mandatoryroot1_F73_root1_F107.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F73_root1_F107);
		Constraint mandatoryroot1_F73_root1_F108 = IntConstraintFactory.arithm(root1_F73, "=", root1_F108);
		mandatoryroot1_F73_root1_F108.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F73_root1_F108);
		Constraint mandatoryroot1_root_root1_F4 = IntConstraintFactory.arithm(root1_root, "=", root1_F4);
		mandatoryroot1_root_root1_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F4);
		Constraint mandatoryroot1_root_root1_F5 = IntConstraintFactory.arithm(root1_root, "=", root1_F5);
		mandatoryroot1_root_root1_F5.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F5);
		Constraint optionalroot1_F5_root1_F8 = IntConstraintFactory.arithm(root1_F8, "<=", root1_F5);
		optionalroot1_F5_root1_F8.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F5_root1_F8);
		Constraint mandatoryroot1_F5_root1_F9 = IntConstraintFactory.arithm(root1_F5, "=", root1_F9);
		mandatoryroot1_F5_root1_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F5_root1_F9);
		IntVar sumOrroot1_F5_2 = VariableFactory.enumerated("sumOrroot1_F5", 0, 4, solver); 
		BoolVar[] varsOrroot1_F5_2 = new BoolVar[4];
		varsOrroot1_F5_2[0] = root1_F10;
		varsOrroot1_F5_2[1] = root1_F11;
		varsOrroot1_F5_2[2] = root1_F12;
		varsOrroot1_F5_2[3] = root1_F13;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F5_2, sumOrroot1_F5_2));
		Constraint or1root1_F5_2 = IntConstraintFactory.arithm(sumOrroot1_F5_2, ">=", 1);
		or1root1_F5_2.setName(Utilities.OR_TC);
		
		Constraint or0root1_F5_2 = IntConstraintFactory.arithm(sumOrroot1_F5_2, "=", 0);
		or0root1_F5_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F5, or1root1_F5_2, or0root1_F5_2);
			
		Constraint mandatoryroot1_F12_root1_F27 = IntConstraintFactory.arithm(root1_F12, "=", root1_F27);
		mandatoryroot1_F12_root1_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F27);
		Constraint mandatoryroot1_F12_root1_F28 = IntConstraintFactory.arithm(root1_F12, "=", root1_F28);
		mandatoryroot1_F12_root1_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F28);
		Constraint optionalroot1_F12_root1_F29 = IntConstraintFactory.arithm(root1_F29, "<=", root1_F12);
		optionalroot1_F12_root1_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F12_root1_F29);
		IntVar sumOrroot1_F12_3 = VariableFactory.enumerated("sumOrroot1_F12", 0, 3, solver); 
		BoolVar[] varsOrroot1_F12_3 = new BoolVar[3];
		varsOrroot1_F12_3[0] = root1_F30;
		varsOrroot1_F12_3[1] = root1_F31;
		varsOrroot1_F12_3[2] = root1_F32;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F12_3, sumOrroot1_F12_3));
		Constraint or1root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, ">=", 1);
		or1root1_F12_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F12_3 = IntConstraintFactory.arithm(sumOrroot1_F12_3, "=", 0);
		or0root1_F12_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F12, or1root1_F12_3, or0root1_F12_3);
			
		Constraint optionalroot1_F32_root1_F87 = IntConstraintFactory.arithm(root1_F87, "<=", root1_F32);
		optionalroot1_F32_root1_F87.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F32_root1_F87);
		Constraint mandatoryroot1_F12_root1_F33 = IntConstraintFactory.arithm(root1_F12, "=", root1_F33);
		mandatoryroot1_F12_root1_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F33);
		Constraint mandatoryroot1_F12_root1_F34 = IntConstraintFactory.arithm(root1_F12, "=", root1_F34);
		mandatoryroot1_F12_root1_F34.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F34);
		Constraint mandatoryroot1_F34_root1_F36 = IntConstraintFactory.arithm(root1_F34, "=", root1_F36);
		mandatoryroot1_F34_root1_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F34_root1_F36);
		Constraint mandatoryroot1_F36_root1_F95 = IntConstraintFactory.arithm(root1_F36, "=", root1_F95);
		mandatoryroot1_F36_root1_F95.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F95);
		Constraint optionalroot1_F95_root1_F147 = IntConstraintFactory.arithm(root1_F147, "<=", root1_F95);
		optionalroot1_F95_root1_F147.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F95_root1_F147);
		Constraint optionalroot1_F95_root1_F148 = IntConstraintFactory.arithm(root1_F148, "<=", root1_F95);
		optionalroot1_F95_root1_F148.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F95_root1_F148);
		Constraint mandatoryroot1_F95_root1_F149 = IntConstraintFactory.arithm(root1_F95, "=", root1_F149);
		mandatoryroot1_F95_root1_F149.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F149);
		Constraint mandatoryroot1_F95_root1_F150 = IntConstraintFactory.arithm(root1_F95, "=", root1_F150);
		mandatoryroot1_F95_root1_F150.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F150);
		Constraint mandatoryroot1_F95_root1_F151 = IntConstraintFactory.arithm(root1_F95, "=", root1_F151);
		mandatoryroot1_F95_root1_F151.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F151);
		Constraint mandatoryroot1_F95_root1_F152 = IntConstraintFactory.arithm(root1_F95, "=", root1_F152);
		mandatoryroot1_F95_root1_F152.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F95_root1_F152);
		Constraint mandatoryroot1_F36_root1_F96 = IntConstraintFactory.arithm(root1_F36, "=", root1_F96);
		mandatoryroot1_F36_root1_F96.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F36_root1_F96);
		Constraint optionalroot1_F36_root1_F97 = IntConstraintFactory.arithm(root1_F97, "<=", root1_F36);
		optionalroot1_F36_root1_F97.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F36_root1_F97);
		IntVar sumOrroot1_F36_3 = VariableFactory.enumerated("sumOrroot1_F36", 0, 2, solver); 
		BoolVar[] varsOrroot1_F36_3 = new BoolVar[2];
		varsOrroot1_F36_3[0] = root1_F98;
		varsOrroot1_F36_3[1] = root1_F99;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F36_3, sumOrroot1_F36_3));
		Constraint or1root1_F36_3 = IntConstraintFactory.arithm(sumOrroot1_F36_3, ">=", 1);
		or1root1_F36_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F36_3 = IntConstraintFactory.arithm(sumOrroot1_F36_3, "=", 0);
		or0root1_F36_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F36, or1root1_F36_3, or0root1_F36_3);
			
		Constraint optionalroot1_F98_root1_F119 = IntConstraintFactory.arithm(root1_F119, "<=", root1_F98);
		optionalroot1_F98_root1_F119.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F98_root1_F119);
		Constraint mandatoryroot1_F98_root1_F120 = IntConstraintFactory.arithm(root1_F98, "=", root1_F120);
		mandatoryroot1_F98_root1_F120.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F120);
		Constraint optionalroot1_F98_root1_F121 = IntConstraintFactory.arithm(root1_F121, "<=", root1_F98);
		optionalroot1_F98_root1_F121.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F98_root1_F121);
		Constraint mandatoryroot1_F98_root1_F122 = IntConstraintFactory.arithm(root1_F98, "=", root1_F122);
		mandatoryroot1_F98_root1_F122.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F122);
		Constraint mandatoryroot1_F98_root1_F123 = IntConstraintFactory.arithm(root1_F98, "=", root1_F123);
		mandatoryroot1_F98_root1_F123.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F98_root1_F123);
		Constraint mandatoryroot1_F34_root1_F37 = IntConstraintFactory.arithm(root1_F34, "=", root1_F37);
		mandatoryroot1_F34_root1_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F34_root1_F37);
		Constraint optionalroot1_F34_root1_F38 = IntConstraintFactory.arithm(root1_F38, "<=", root1_F34);
		optionalroot1_F34_root1_F38.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F34_root1_F38);
		Constraint optionalroot1_F34_root1_F39 = IntConstraintFactory.arithm(root1_F39, "<=", root1_F34);
		optionalroot1_F34_root1_F39.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F34_root1_F39);
		Constraint optionalroot1_F34_root1_F40 = IntConstraintFactory.arithm(root1_F40, "<=", root1_F34);
		optionalroot1_F34_root1_F40.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F34_root1_F40);
		Constraint optionalroot1_F40_root1_F53 = IntConstraintFactory.arithm(root1_F53, "<=", root1_F40);
		optionalroot1_F40_root1_F53.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F40_root1_F53);
		Constraint mandatoryroot1_F53_root1_F159 = IntConstraintFactory.arithm(root1_F53, "=", root1_F159);
		mandatoryroot1_F53_root1_F159.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F53_root1_F159);
		Constraint mandatoryroot1_F34_root1_F41 = IntConstraintFactory.arithm(root1_F34, "=", root1_F41);
		mandatoryroot1_F34_root1_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F34_root1_F41);
		IntVar sumOrroot1_F34_6 = VariableFactory.enumerated("sumOrroot1_F34", 0, 2, solver); 
		BoolVar[] varsOrroot1_F34_6 = new BoolVar[2];
		varsOrroot1_F34_6[0] = root1_F42;
		varsOrroot1_F34_6[1] = root1_F43;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F34_6, sumOrroot1_F34_6));
		Constraint or1root1_F34_6 = IntConstraintFactory.arithm(sumOrroot1_F34_6, ">=", 1);
		or1root1_F34_6.setName(Utilities.OR_TC);
		
		Constraint or0root1_F34_6 = IntConstraintFactory.arithm(sumOrroot1_F34_6, "=", 0);
		or0root1_F34_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F34, or1root1_F34_6, or0root1_F34_6);
			
		Constraint mandatoryroot1_F42_root1_F46 = IntConstraintFactory.arithm(root1_F42, "=", root1_F46);
		mandatoryroot1_F42_root1_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F46);
		Constraint mandatoryroot1_F42_root1_F47 = IntConstraintFactory.arithm(root1_F42, "=", root1_F47);
		mandatoryroot1_F42_root1_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F47);
		Constraint mandatoryroot1_F42_root1_F48 = IntConstraintFactory.arithm(root1_F42, "=", root1_F48);
		mandatoryroot1_F42_root1_F48.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F48);
		Constraint mandatoryroot1_F48_root1_F109 = IntConstraintFactory.arithm(root1_F48, "=", root1_F109);
		mandatoryroot1_F48_root1_F109.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F109);
		Constraint mandatoryroot1_F48_root1_F110 = IntConstraintFactory.arithm(root1_F48, "=", root1_F110);
		mandatoryroot1_F48_root1_F110.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F110);
		Constraint optionalroot1_F48_root1_F111 = IntConstraintFactory.arithm(root1_F111, "<=", root1_F48);
		optionalroot1_F48_root1_F111.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F48_root1_F111);
		Constraint mandatoryroot1_F111_root1_F136 = IntConstraintFactory.arithm(root1_F111, "=", root1_F136);
		mandatoryroot1_F111_root1_F136.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F111_root1_F136);
		Constraint mandatoryroot1_F111_root1_F137 = IntConstraintFactory.arithm(root1_F111, "=", root1_F137);
		mandatoryroot1_F111_root1_F137.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F111_root1_F137);
		Constraint mandatoryroot1_F111_root1_F138 = IntConstraintFactory.arithm(root1_F111, "=", root1_F138);
		mandatoryroot1_F111_root1_F138.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F111_root1_F138);
		Constraint mandatoryroot1_F111_root1_F139 = IntConstraintFactory.arithm(root1_F111, "=", root1_F139);
		mandatoryroot1_F111_root1_F139.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F111_root1_F139);
		IntVar sumOrroot1_F48_3 = VariableFactory.enumerated("sumOrroot1_F48", 0, 2, solver); 
		BoolVar[] varsOrroot1_F48_3 = new BoolVar[2];
		varsOrroot1_F48_3[0] = root1_F112;
		varsOrroot1_F48_3[1] = root1_F113;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F48_3, sumOrroot1_F48_3));
		Constraint or1root1_F48_3 = IntConstraintFactory.arithm(sumOrroot1_F48_3, ">=", 1);
		or1root1_F48_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F48_3 = IntConstraintFactory.arithm(sumOrroot1_F48_3, "=", 0);
		or0root1_F48_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F48, or1root1_F48_3, or0root1_F48_3);
			
		IntVar sumOrroot1_F112_0 = VariableFactory.enumerated("sumOrroot1_F112", 0, 2, solver); 
		BoolVar[] varsOrroot1_F112_0 = new BoolVar[2];
		varsOrroot1_F112_0[0] = root1_F145;
		varsOrroot1_F112_0[1] = root1_F146;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F112_0, sumOrroot1_F112_0));
		Constraint or1root1_F112_0 = IntConstraintFactory.arithm(sumOrroot1_F112_0, ">=", 1);
		or1root1_F112_0.setName(Utilities.OR_TC);
		
		Constraint or0root1_F112_0 = IntConstraintFactory.arithm(sumOrroot1_F112_0, "=", 0);
		or0root1_F112_0.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F112, or1root1_F112_0, or0root1_F112_0);
			
		Constraint mandatoryroot1_F48_root1_F114 = IntConstraintFactory.arithm(root1_F48, "=", root1_F114);
		mandatoryroot1_F48_root1_F114.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F114);
		Constraint mandatoryroot1_F48_root1_F115 = IntConstraintFactory.arithm(root1_F48, "=", root1_F115);
		mandatoryroot1_F48_root1_F115.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F115);
		Constraint optionalroot1_F115_root1_F158 = IntConstraintFactory.arithm(root1_F158, "<=", root1_F115);
		optionalroot1_F115_root1_F158.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F115_root1_F158);
		Constraint mandatoryroot1_F48_root1_F116 = IntConstraintFactory.arithm(root1_F48, "=", root1_F116);
		mandatoryroot1_F48_root1_F116.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F116);
		Constraint mandatoryroot1_F48_root1_F117 = IntConstraintFactory.arithm(root1_F48, "=", root1_F117);
		mandatoryroot1_F48_root1_F117.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F48_root1_F117);
		Constraint mandatoryroot1_F42_root1_F49 = IntConstraintFactory.arithm(root1_F42, "=", root1_F49);
		mandatoryroot1_F42_root1_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F42_root1_F49);
		Constraint mandatoryroot1_F34_root1_F44 = IntConstraintFactory.arithm(root1_F34, "=", root1_F44);
		mandatoryroot1_F34_root1_F44.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F34_root1_F44);
		Constraint mandatoryroot1_F34_root1_F45 = IntConstraintFactory.arithm(root1_F34, "=", root1_F45);
		mandatoryroot1_F34_root1_F45.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F34_root1_F45);
		Constraint mandatoryroot1_F12_root1_F35 = IntConstraintFactory.arithm(root1_F12, "=", root1_F35);
		mandatoryroot1_F12_root1_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F12_root1_F35);
		IntVar sumOrroot1_F5_3 = VariableFactory.enumerated("sumOrroot1_F5", 0, 4, solver); 
		BoolVar[] varsOrroot1_F5_3 = new BoolVar[4];
		varsOrroot1_F5_3[0] = root1_F14;
		varsOrroot1_F5_3[1] = root1_F15;
		varsOrroot1_F5_3[2] = root1_F16;
		varsOrroot1_F5_3[3] = root1_F17;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F5_3, sumOrroot1_F5_3));
		Constraint or1root1_F5_3 = IntConstraintFactory.arithm(sumOrroot1_F5_3, ">=", 1);
		or1root1_F5_3.setName(Utilities.OR_TC);
		
		Constraint or0root1_F5_3 = IntConstraintFactory.arithm(sumOrroot1_F5_3, "=", 0);
		or0root1_F5_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F5, or1root1_F5_3, or0root1_F5_3);
			
		Constraint optionalroot1_F14_root1_F50 = IntConstraintFactory.arithm(root1_F50, "<=", root1_F14);
		optionalroot1_F14_root1_F50.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F14_root1_F50);
		Constraint mandatoryroot1_F14_root1_F51 = IntConstraintFactory.arithm(root1_F14, "=", root1_F51);
		mandatoryroot1_F14_root1_F51.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F14_root1_F51);
		Constraint optionalroot1_F51_root1_F153 = IntConstraintFactory.arithm(root1_F153, "<=", root1_F51);
		optionalroot1_F51_root1_F153.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F51_root1_F153);
		Constraint optionalroot1_F51_root1_F154 = IntConstraintFactory.arithm(root1_F154, "<=", root1_F51);
		optionalroot1_F51_root1_F154.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F51_root1_F154);
		Constraint mandatoryroot1_F51_root1_F155 = IntConstraintFactory.arithm(root1_F51, "=", root1_F155);
		mandatoryroot1_F51_root1_F155.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F51_root1_F155);
		Constraint mandatoryroot1_F51_root1_F156 = IntConstraintFactory.arithm(root1_F51, "=", root1_F156);
		mandatoryroot1_F51_root1_F156.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F51_root1_F156);
		Constraint mandatoryroot1_F51_root1_F157 = IntConstraintFactory.arithm(root1_F51, "=", root1_F157);
		mandatoryroot1_F51_root1_F157.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F51_root1_F157);
		Constraint mandatoryroot1_F14_root1_F52 = IntConstraintFactory.arithm(root1_F14, "=", root1_F52);
		mandatoryroot1_F14_root1_F52.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F14_root1_F52);
		Constraint mandatoryroot1_F52_root1_F133 = IntConstraintFactory.arithm(root1_F52, "=", root1_F133);
		mandatoryroot1_F52_root1_F133.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F52_root1_F133);
		IntVar sumOrroot1_F52_1 = VariableFactory.enumerated("sumOrroot1_F52", 0, 2, solver); 
		BoolVar[] varsOrroot1_F52_1 = new BoolVar[2];
		varsOrroot1_F52_1[0] = root1_F134;
		varsOrroot1_F52_1[1] = root1_F135;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F52_1, sumOrroot1_F52_1));
		Constraint or1root1_F52_1 = IntConstraintFactory.arithm(sumOrroot1_F52_1, ">=", 1);
		or1root1_F52_1.setName(Utilities.OR_TC);
		
		Constraint or0root1_F52_1 = IntConstraintFactory.arithm(sumOrroot1_F52_1, "=", 0);
		or0root1_F52_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F52, or1root1_F52_1, or0root1_F52_1);
			
		Constraint mandatoryroot1_root_root1_F6 = IntConstraintFactory.arithm(root1_root, "=", root1_F6);
		mandatoryroot1_root_root1_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F6);
		Constraint mandatoryroot1_root_root1_F7 = IntConstraintFactory.arithm(root1_root, "=", root1_F7);
		mandatoryroot1_root_root1_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_root_root1_F7);
		Constraint optionalroot1_F7_root1_F88 = IntConstraintFactory.arithm(root1_F88, "<=", root1_F7);
		optionalroot1_F7_root1_F88.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F7_root1_F88);
		Constraint optionalroot1_F7_root1_F89 = IntConstraintFactory.arithm(root1_F89, "<=", root1_F7);
		optionalroot1_F7_root1_F89.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F7_root1_F89);
		Constraint mandatoryroot1_F7_root1_F90 = IntConstraintFactory.arithm(root1_F7, "=", root1_F90);
		mandatoryroot1_F7_root1_F90.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F90);
		Constraint optionalroot1_F7_root1_F91 = IntConstraintFactory.arithm(root1_F91, "<=", root1_F7);
		optionalroot1_F7_root1_F91.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot1_F7_root1_F91);
		Constraint mandatoryroot1_F7_root1_F92 = IntConstraintFactory.arithm(root1_F7, "=", root1_F92);
		mandatoryroot1_F7_root1_F92.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot1_F7_root1_F92);
		IntVar sumOrroot1_F7_5 = VariableFactory.enumerated("sumOrroot1_F7", 0, 2, solver); 
		BoolVar[] varsOrroot1_F7_5 = new BoolVar[2];
		varsOrroot1_F7_5[0] = root1_F93;
		varsOrroot1_F7_5[1] = root1_F94;
		solver.post(IntConstraintFactory.sum(varsOrroot1_F7_5, sumOrroot1_F7_5));
		Constraint or1root1_F7_5 = IntConstraintFactory.arithm(sumOrroot1_F7_5, ">=", 1);
		or1root1_F7_5.setName(Utilities.OR_TC);
		
		Constraint or0root1_F7_5 = IntConstraintFactory.arithm(sumOrroot1_F7_5, "=", 0);
		or0root1_F7_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root1_F7, or1root1_F7_5, or0root1_F7_5);
			
		Constraint mandatoryroot2_root_root2_F1 = IntConstraintFactory.arithm(root2_root, "=", root2_F1);
		mandatoryroot2_root_root2_F1.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F1);
		Constraint mandatoryroot2_F1_root2_F94 = IntConstraintFactory.arithm(root2_F1, "=", root2_F94);
		mandatoryroot2_F1_root2_F94.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F94);
		Constraint mandatoryroot2_F1_root2_F95 = IntConstraintFactory.arithm(root2_F1, "=", root2_F95);
		mandatoryroot2_F1_root2_F95.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F1_root2_F95);
		Constraint optionalroot2_F1_root2_F96 = IntConstraintFactory.arithm(root2_F96, "<=", root2_F1);
		optionalroot2_F1_root2_F96.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F1_root2_F96);
		Constraint optionalroot2_F1_root2_F97 = IntConstraintFactory.arithm(root2_F97, "<=", root2_F1);
		optionalroot2_F1_root2_F97.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F1_root2_F97);
		Constraint mandatoryroot2_root_root2_F2 = IntConstraintFactory.arithm(root2_root, "=", root2_F2);
		mandatoryroot2_root_root2_F2.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F2);
		Constraint mandatoryroot2_F2_root2_F21 = IntConstraintFactory.arithm(root2_F2, "=", root2_F21);
		mandatoryroot2_F2_root2_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F21);
		Constraint mandatoryroot2_F21_root2_F120 = IntConstraintFactory.arithm(root2_F21, "=", root2_F120);
		mandatoryroot2_F21_root2_F120.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F21_root2_F120);
		Constraint mandatoryroot2_F120_root2_F155 = IntConstraintFactory.arithm(root2_F120, "=", root2_F155);
		mandatoryroot2_F120_root2_F155.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F120_root2_F155);
		Constraint mandatoryroot2_F120_root2_F156 = IntConstraintFactory.arithm(root2_F120, "=", root2_F156);
		mandatoryroot2_F120_root2_F156.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F120_root2_F156);
		Constraint optionalroot2_F120_root2_F157 = IntConstraintFactory.arithm(root2_F157, "<=", root2_F120);
		optionalroot2_F120_root2_F157.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F120_root2_F157);
		Constraint mandatoryroot2_F120_root2_F158 = IntConstraintFactory.arithm(root2_F120, "=", root2_F158);
		mandatoryroot2_F120_root2_F158.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F120_root2_F158);
		Constraint optionalroot2_F120_root2_F159 = IntConstraintFactory.arithm(root2_F159, "<=", root2_F120);
		optionalroot2_F120_root2_F159.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F120_root2_F159);
		Constraint optionalroot2_F21_root2_F121 = IntConstraintFactory.arithm(root2_F121, "<=", root2_F21);
		optionalroot2_F21_root2_F121.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F21_root2_F121);
		Constraint mandatoryroot2_F21_root2_F122 = IntConstraintFactory.arithm(root2_F21, "=", root2_F122);
		mandatoryroot2_F21_root2_F122.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F21_root2_F122);
		Constraint mandatoryroot2_F21_root2_F123 = IntConstraintFactory.arithm(root2_F21, "=", root2_F123);
		mandatoryroot2_F21_root2_F123.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F21_root2_F123);
		Constraint mandatoryroot2_F21_root2_F124 = IntConstraintFactory.arithm(root2_F21, "=", root2_F124);
		mandatoryroot2_F21_root2_F124.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F21_root2_F124);
		Constraint mandatoryroot2_F21_root2_F125 = IntConstraintFactory.arithm(root2_F21, "=", root2_F125);
		mandatoryroot2_F21_root2_F125.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F21_root2_F125);
		Constraint mandatoryroot2_F2_root2_F22 = IntConstraintFactory.arithm(root2_F2, "=", root2_F22);
		mandatoryroot2_F2_root2_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F22);
		Constraint optionalroot2_F2_root2_F23 = IntConstraintFactory.arithm(root2_F23, "<=", root2_F2);
		optionalroot2_F2_root2_F23.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F2_root2_F23);
		Constraint mandatoryroot2_F23_root2_F65 = IntConstraintFactory.arithm(root2_F23, "=", root2_F65);
		mandatoryroot2_F23_root2_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F23_root2_F65);
		Constraint mandatoryroot2_F2_root2_F24 = IntConstraintFactory.arithm(root2_F2, "=", root2_F24);
		mandatoryroot2_F2_root2_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F24);
		Constraint mandatoryroot2_F2_root2_F25 = IntConstraintFactory.arithm(root2_F2, "=", root2_F25);
		mandatoryroot2_F2_root2_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F25);
		Constraint mandatoryroot2_F25_root2_F46 = IntConstraintFactory.arithm(root2_F25, "=", root2_F46);
		mandatoryroot2_F25_root2_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F25_root2_F46);
		Constraint optionalroot2_F25_root2_F47 = IntConstraintFactory.arithm(root2_F47, "<=", root2_F25);
		optionalroot2_F25_root2_F47.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F25_root2_F47);
		Constraint optionalroot2_F47_root2_F110 = IntConstraintFactory.arithm(root2_F110, "<=", root2_F47);
		optionalroot2_F47_root2_F110.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F47_root2_F110);
		Constraint mandatoryroot2_F47_root2_F111 = IntConstraintFactory.arithm(root2_F47, "=", root2_F111);
		mandatoryroot2_F47_root2_F111.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F47_root2_F111);
		Constraint mandatoryroot2_F47_root2_F112 = IntConstraintFactory.arithm(root2_F47, "=", root2_F112);
		mandatoryroot2_F47_root2_F112.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F47_root2_F112);
		Constraint mandatoryroot2_F112_root2_F131 = IntConstraintFactory.arithm(root2_F112, "=", root2_F131);
		mandatoryroot2_F112_root2_F131.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F112_root2_F131);
		Constraint mandatoryroot2_F112_root2_F132 = IntConstraintFactory.arithm(root2_F112, "=", root2_F132);
		mandatoryroot2_F112_root2_F132.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F112_root2_F132);
		Constraint optionalroot2_F47_root2_F113 = IntConstraintFactory.arithm(root2_F113, "<=", root2_F47);
		optionalroot2_F47_root2_F113.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F47_root2_F113);
		Constraint optionalroot2_F47_root2_F114 = IntConstraintFactory.arithm(root2_F114, "<=", root2_F47);
		optionalroot2_F47_root2_F114.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F47_root2_F114);
		IntVar sumOrroot2_F47_5 = VariableFactory.enumerated("sumOrroot2_F47", 0, 2, solver); 
		BoolVar[] varsOrroot2_F47_5 = new BoolVar[2];
		varsOrroot2_F47_5[0] = root2_F115;
		varsOrroot2_F47_5[1] = root2_F116;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F47_5, sumOrroot2_F47_5));
		Constraint or1root2_F47_5 = IntConstraintFactory.arithm(sumOrroot2_F47_5, ">=", 1);
		or1root2_F47_5.setName(Utilities.OR_TC);
		
		Constraint or0root2_F47_5 = IntConstraintFactory.arithm(sumOrroot2_F47_5, "=", 0);
		or0root2_F47_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F47, or1root2_F47_5, or0root2_F47_5);
			
		Constraint mandatoryroot2_F47_root2_F117 = IntConstraintFactory.arithm(root2_F47, "=", root2_F117);
		mandatoryroot2_F47_root2_F117.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F47_root2_F117);
		Constraint mandatoryroot2_F47_root2_F118 = IntConstraintFactory.arithm(root2_F47, "=", root2_F118);
		mandatoryroot2_F47_root2_F118.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F47_root2_F118);
		Constraint mandatoryroot2_F47_root2_F119 = IntConstraintFactory.arithm(root2_F47, "=", root2_F119);
		mandatoryroot2_F47_root2_F119.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F47_root2_F119);
		Constraint mandatoryroot2_F2_root2_F26 = IntConstraintFactory.arithm(root2_F2, "=", root2_F26);
		mandatoryroot2_F2_root2_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F26);
		Constraint mandatoryroot2_F2_root2_F27 = IntConstraintFactory.arithm(root2_F2, "=", root2_F27);
		mandatoryroot2_F2_root2_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F27);
		Constraint mandatoryroot2_F2_root2_F28 = IntConstraintFactory.arithm(root2_F2, "=", root2_F28);
		mandatoryroot2_F2_root2_F28.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F28);
		Constraint optionalroot2_F28_root2_F48 = IntConstraintFactory.arithm(root2_F48, "<=", root2_F28);
		optionalroot2_F28_root2_F48.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F28_root2_F48);
		Constraint mandatoryroot2_F2_root2_F29 = IntConstraintFactory.arithm(root2_F2, "=", root2_F29);
		mandatoryroot2_F2_root2_F29.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F2_root2_F29);
		Constraint mandatoryroot2_F29_root2_F50 = IntConstraintFactory.arithm(root2_F29, "=", root2_F50);
		mandatoryroot2_F29_root2_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F29_root2_F50);
		Constraint optionalroot2_F29_root2_F51 = IntConstraintFactory.arithm(root2_F51, "<=", root2_F29);
		optionalroot2_F29_root2_F51.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F29_root2_F51);
		Constraint mandatoryroot2_F51_root2_F62 = IntConstraintFactory.arithm(root2_F51, "=", root2_F62);
		mandatoryroot2_F51_root2_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F51_root2_F62);
		Constraint mandatoryroot2_F51_root2_F63 = IntConstraintFactory.arithm(root2_F51, "=", root2_F63);
		mandatoryroot2_F51_root2_F63.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F51_root2_F63);
		Constraint optionalroot2_F63_root2_F133 = IntConstraintFactory.arithm(root2_F133, "<=", root2_F63);
		optionalroot2_F63_root2_F133.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F63_root2_F133);
		Constraint mandatoryroot2_F63_root2_F134 = IntConstraintFactory.arithm(root2_F63, "=", root2_F134);
		mandatoryroot2_F63_root2_F134.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F63_root2_F134);
		Constraint mandatoryroot2_F63_root2_F135 = IntConstraintFactory.arithm(root2_F63, "=", root2_F135);
		mandatoryroot2_F63_root2_F135.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F63_root2_F135);
		Constraint optionalroot2_F63_root2_F136 = IntConstraintFactory.arithm(root2_F136, "<=", root2_F63);
		optionalroot2_F63_root2_F136.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F63_root2_F136);
		Constraint optionalroot2_F63_root2_F137 = IntConstraintFactory.arithm(root2_F137, "<=", root2_F63);
		optionalroot2_F63_root2_F137.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F63_root2_F137);
		IntVar sumOrroot2_F63_5 = VariableFactory.enumerated("sumOrroot2_F63", 0, 3, solver); 
		BoolVar[] varsOrroot2_F63_5 = new BoolVar[3];
		varsOrroot2_F63_5[0] = root2_F138;
		varsOrroot2_F63_5[1] = root2_F139;
		varsOrroot2_F63_5[2] = root2_F140;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F63_5, sumOrroot2_F63_5));
		Constraint or1root2_F63_5 = IntConstraintFactory.arithm(sumOrroot2_F63_5, ">=", 1);
		or1root2_F63_5.setName(Utilities.OR_TC);
		
		Constraint or0root2_F63_5 = IntConstraintFactory.arithm(sumOrroot2_F63_5, "=", 0);
		or0root2_F63_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F63, or1root2_F63_5, or0root2_F63_5);
			
		Constraint mandatoryroot2_F63_root2_F141 = IntConstraintFactory.arithm(root2_F63, "=", root2_F141);
		mandatoryroot2_F63_root2_F141.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F63_root2_F141);
		Constraint mandatoryroot2_F63_root2_F142 = IntConstraintFactory.arithm(root2_F63, "=", root2_F142);
		mandatoryroot2_F63_root2_F142.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F63_root2_F142);
		Constraint optionalroot2_F51_root2_F64 = IntConstraintFactory.arithm(root2_F64, "<=", root2_F51);
		optionalroot2_F51_root2_F64.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F51_root2_F64);
		Constraint mandatoryroot2_F64_root2_F81 = IntConstraintFactory.arithm(root2_F64, "=", root2_F81);
		mandatoryroot2_F64_root2_F81.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F64_root2_F81);
		IntVar sumOrroot2_F64_1 = VariableFactory.enumerated("sumOrroot2_F64", 0, 3, solver); 
		BoolVar[] varsOrroot2_F64_1 = new BoolVar[3];
		varsOrroot2_F64_1[0] = root2_F82;
		varsOrroot2_F64_1[1] = root2_F83;
		varsOrroot2_F64_1[2] = root2_F84;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F64_1, sumOrroot2_F64_1));
		Constraint or1root2_F64_1 = IntConstraintFactory.arithm(sumOrroot2_F64_1, ">=", 1);
		or1root2_F64_1.setName(Utilities.OR_TC);
		
		Constraint or0root2_F64_1 = IntConstraintFactory.arithm(sumOrroot2_F64_1, "=", 0);
		or0root2_F64_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F64, or1root2_F64_1, or0root2_F64_1);
			
		IntVar sumOrroot2_F82_0 = VariableFactory.enumerated("sumOrroot2_F82", 0, 3, solver); 
		BoolVar[] varsOrroot2_F82_0 = new BoolVar[3];
		varsOrroot2_F82_0[0] = root2_F126;
		varsOrroot2_F82_0[1] = root2_F127;
		varsOrroot2_F82_0[2] = root2_F128;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F82_0, sumOrroot2_F82_0));
		Constraint or1root2_F82_0 = IntConstraintFactory.arithm(sumOrroot2_F82_0, ">=", 1);
		or1root2_F82_0.setName(Utilities.OR_TC);
		
		Constraint or0root2_F82_0 = IntConstraintFactory.arithm(sumOrroot2_F82_0, "=", 0);
		or0root2_F82_0.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F82, or1root2_F82_0, or0root2_F82_0);
			
		Constraint mandatoryroot2_F82_root2_F129 = IntConstraintFactory.arithm(root2_F82, "=", root2_F129);
		mandatoryroot2_F82_root2_F129.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F82_root2_F129);
		Constraint mandatoryroot2_F82_root2_F130 = IntConstraintFactory.arithm(root2_F82, "=", root2_F130);
		mandatoryroot2_F82_root2_F130.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F82_root2_F130);
		Constraint mandatoryroot2_F64_root2_F85 = IntConstraintFactory.arithm(root2_F64, "=", root2_F85);
		mandatoryroot2_F64_root2_F85.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F64_root2_F85);
		Constraint mandatoryroot2_F64_root2_F86 = IntConstraintFactory.arithm(root2_F64, "=", root2_F86);
		mandatoryroot2_F64_root2_F86.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F64_root2_F86);
		Constraint mandatoryroot2_F64_root2_F87 = IntConstraintFactory.arithm(root2_F64, "=", root2_F87);
		mandatoryroot2_F64_root2_F87.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F64_root2_F87);
		Constraint mandatoryroot2_F29_root2_F52 = IntConstraintFactory.arithm(root2_F29, "=", root2_F52);
		mandatoryroot2_F29_root2_F52.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F29_root2_F52);
		Constraint mandatoryroot2_F52_root2_F66 = IntConstraintFactory.arithm(root2_F52, "=", root2_F66);
		mandatoryroot2_F52_root2_F66.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F52_root2_F66);
		Constraint mandatoryroot2_F66_root2_F77 = IntConstraintFactory.arithm(root2_F66, "=", root2_F77);
		mandatoryroot2_F66_root2_F77.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F66_root2_F77);
		Constraint optionalroot2_F66_root2_F78 = IntConstraintFactory.arithm(root2_F78, "<=", root2_F66);
		optionalroot2_F66_root2_F78.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F66_root2_F78);
		Constraint mandatoryroot2_F52_root2_F67 = IntConstraintFactory.arithm(root2_F52, "=", root2_F67);
		mandatoryroot2_F52_root2_F67.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F52_root2_F67);
		Constraint mandatoryroot2_F52_root2_F68 = IntConstraintFactory.arithm(root2_F52, "=", root2_F68);
		mandatoryroot2_F52_root2_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F52_root2_F68);
		Constraint mandatoryroot2_F52_root2_F69 = IntConstraintFactory.arithm(root2_F52, "=", root2_F69);
		mandatoryroot2_F52_root2_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F52_root2_F69);
		Constraint optionalroot2_F69_root2_F98 = IntConstraintFactory.arithm(root2_F98, "<=", root2_F69);
		optionalroot2_F69_root2_F98.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F69_root2_F98);
		Constraint mandatoryroot2_F69_root2_F99 = IntConstraintFactory.arithm(root2_F69, "=", root2_F99);
		mandatoryroot2_F69_root2_F99.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F69_root2_F99);
		Constraint optionalroot2_F69_root2_F100 = IntConstraintFactory.arithm(root2_F100, "<=", root2_F69);
		optionalroot2_F69_root2_F100.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F69_root2_F100);
		Constraint mandatoryroot2_F52_root2_F70 = IntConstraintFactory.arithm(root2_F52, "=", root2_F70);
		mandatoryroot2_F52_root2_F70.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F52_root2_F70);
		Constraint optionalroot2_F52_root2_F71 = IntConstraintFactory.arithm(root2_F71, "<=", root2_F52);
		optionalroot2_F52_root2_F71.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F52_root2_F71);
		IntVar sumOrroot2_F52_6 = VariableFactory.enumerated("sumOrroot2_F52", 0, 2, solver); 
		BoolVar[] varsOrroot2_F52_6 = new BoolVar[2];
		varsOrroot2_F52_6[0] = root2_F72;
		varsOrroot2_F52_6[1] = root2_F73;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F52_6, sumOrroot2_F52_6));
		Constraint or1root2_F52_6 = IntConstraintFactory.arithm(sumOrroot2_F52_6, ">=", 1);
		or1root2_F52_6.setName(Utilities.OR_TC);
		
		Constraint or0root2_F52_6 = IntConstraintFactory.arithm(sumOrroot2_F52_6, "=", 0);
		or0root2_F52_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F52, or1root2_F52_6, or0root2_F52_6);
			
		Constraint optionalroot2_F29_root2_F53 = IntConstraintFactory.arithm(root2_F53, "<=", root2_F29);
		optionalroot2_F29_root2_F53.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F29_root2_F53);
		IntVar sumOrroot2_F29_4 = VariableFactory.enumerated("sumOrroot2_F29", 0, 2, solver); 
		BoolVar[] varsOrroot2_F29_4 = new BoolVar[2];
		varsOrroot2_F29_4[0] = root2_F54;
		varsOrroot2_F29_4[1] = root2_F55;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F29_4, sumOrroot2_F29_4));
		Constraint or1root2_F29_4 = IntConstraintFactory.arithm(sumOrroot2_F29_4, ">=", 1);
		or1root2_F29_4.setName(Utilities.OR_TC);
		
		Constraint or0root2_F29_4 = IntConstraintFactory.arithm(sumOrroot2_F29_4, "=", 0);
		or0root2_F29_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F29, or1root2_F29_4, or0root2_F29_4);
			
		Constraint mandatoryroot2_F54_root2_F80 = IntConstraintFactory.arithm(root2_F54, "=", root2_F80);
		mandatoryroot2_F54_root2_F80.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F54_root2_F80);
		Constraint mandatoryroot2_root_root2_F3 = IntConstraintFactory.arithm(root2_root, "=", root2_F3);
		mandatoryroot2_root_root2_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_root_root2_F3);
		Constraint optionalroot2_F3_root2_F4 = IntConstraintFactory.arithm(root2_F4, "<=", root2_F3);
		optionalroot2_F3_root2_F4.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F3_root2_F4);
		Constraint optionalroot2_F3_root2_F5 = IntConstraintFactory.arithm(root2_F5, "<=", root2_F3);
		optionalroot2_F3_root2_F5.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F3_root2_F5);
		Constraint mandatoryroot2_F5_root2_F19 = IntConstraintFactory.arithm(root2_F5, "=", root2_F19);
		mandatoryroot2_F5_root2_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F5_root2_F19);
		Constraint optionalroot2_F5_root2_F20 = IntConstraintFactory.arithm(root2_F20, "<=", root2_F5);
		optionalroot2_F5_root2_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F5_root2_F20);
		Constraint mandatoryroot2_F3_root2_F6 = IntConstraintFactory.arithm(root2_F3, "=", root2_F6);
		mandatoryroot2_F3_root2_F6.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F6);
		Constraint mandatoryroot2_F3_root2_F7 = IntConstraintFactory.arithm(root2_F3, "=", root2_F7);
		mandatoryroot2_F3_root2_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F7);
		Constraint mandatoryroot2_F7_root2_F56 = IntConstraintFactory.arithm(root2_F7, "=", root2_F56);
		mandatoryroot2_F7_root2_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F7_root2_F56);
		Constraint mandatoryroot2_F7_root2_F57 = IntConstraintFactory.arithm(root2_F7, "=", root2_F57);
		mandatoryroot2_F7_root2_F57.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F7_root2_F57);
		Constraint mandatoryroot2_F3_root2_F8 = IntConstraintFactory.arithm(root2_F3, "=", root2_F8);
		mandatoryroot2_F3_root2_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F3_root2_F8);
		Constraint mandatoryroot2_F8_root2_F9 = IntConstraintFactory.arithm(root2_F8, "=", root2_F9);
		mandatoryroot2_F8_root2_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F8_root2_F9);
		Constraint optionalroot2_F8_root2_F10 = IntConstraintFactory.arithm(root2_F10, "<=", root2_F8);
		optionalroot2_F8_root2_F10.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F8_root2_F10);
		IntVar sumOrroot2_F8_2 = VariableFactory.enumerated("sumOrroot2_F8", 0, 3, solver); 
		BoolVar[] varsOrroot2_F8_2 = new BoolVar[3];
		varsOrroot2_F8_2[0] = root2_F11;
		varsOrroot2_F8_2[1] = root2_F12;
		varsOrroot2_F8_2[2] = root2_F13;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F8_2, sumOrroot2_F8_2));
		Constraint or1root2_F8_2 = IntConstraintFactory.arithm(sumOrroot2_F8_2, ">=", 1);
		or1root2_F8_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F8_2 = IntConstraintFactory.arithm(sumOrroot2_F8_2, "=", 0);
		or0root2_F8_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F8, or1root2_F8_2, or0root2_F8_2);
			
		Constraint optionalroot2_F11_root2_F88 = IntConstraintFactory.arithm(root2_F88, "<=", root2_F11);
		optionalroot2_F11_root2_F88.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F11_root2_F88);
		IntVar sumOrroot2_F11_1 = VariableFactory.enumerated("sumOrroot2_F11", 0, 2, solver); 
		BoolVar[] varsOrroot2_F11_1 = new BoolVar[2];
		varsOrroot2_F11_1[0] = root2_F89;
		varsOrroot2_F11_1[1] = root2_F90;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F11_1, sumOrroot2_F11_1));
		Constraint or1root2_F11_1 = IntConstraintFactory.arithm(sumOrroot2_F11_1, ">=", 1);
		or1root2_F11_1.setName(Utilities.OR_TC);
		
		Constraint or0root2_F11_1 = IntConstraintFactory.arithm(sumOrroot2_F11_1, "=", 0);
		or0root2_F11_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F11, or1root2_F11_1, or0root2_F11_1);
			
		Constraint optionalroot2_F90_root2_F93 = IntConstraintFactory.arithm(root2_F93, "<=", root2_F90);
		optionalroot2_F90_root2_F93.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F90_root2_F93);
		Constraint mandatoryroot2_F11_root2_F91 = IntConstraintFactory.arithm(root2_F11, "=", root2_F91);
		mandatoryroot2_F11_root2_F91.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F11_root2_F91);
		Constraint mandatoryroot2_F11_root2_F92 = IntConstraintFactory.arithm(root2_F11, "=", root2_F92);
		mandatoryroot2_F11_root2_F92.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F11_root2_F92);
		IntVar sumOrroot2_F8_3 = VariableFactory.enumerated("sumOrroot2_F8", 0, 2, solver); 
		BoolVar[] varsOrroot2_F8_3 = new BoolVar[2];
		varsOrroot2_F8_3[0] = root2_F14;
		varsOrroot2_F8_3[1] = root2_F15;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F8_3, sumOrroot2_F8_3));
		Constraint or1root2_F8_3 = IntConstraintFactory.arithm(sumOrroot2_F8_3, ">=", 1);
		or1root2_F8_3.setName(Utilities.OR_TC);
		
		Constraint or0root2_F8_3 = IntConstraintFactory.arithm(sumOrroot2_F8_3, "=", 0);
		or0root2_F8_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F8, or1root2_F8_3, or0root2_F8_3);
			
		Constraint mandatoryroot2_F14_root2_F30 = IntConstraintFactory.arithm(root2_F14, "=", root2_F30);
		mandatoryroot2_F14_root2_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F14_root2_F30);
		Constraint optionalroot2_F14_root2_F31 = IntConstraintFactory.arithm(root2_F31, "<=", root2_F14);
		optionalroot2_F14_root2_F31.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F14_root2_F31);
		Constraint optionalroot2_F31_root2_F58 = IntConstraintFactory.arithm(root2_F58, "<=", root2_F31);
		optionalroot2_F31_root2_F58.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F31_root2_F58);
		Constraint optionalroot2_F31_root2_F59 = IntConstraintFactory.arithm(root2_F59, "<=", root2_F31);
		optionalroot2_F31_root2_F59.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F31_root2_F59);
		IntVar sumOrroot2_F31_2 = VariableFactory.enumerated("sumOrroot2_F31", 0, 2, solver); 
		BoolVar[] varsOrroot2_F31_2 = new BoolVar[2];
		varsOrroot2_F31_2[0] = root2_F60;
		varsOrroot2_F31_2[1] = root2_F61;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F31_2, sumOrroot2_F31_2));
		Constraint or1root2_F31_2 = IntConstraintFactory.arithm(sumOrroot2_F31_2, ">=", 1);
		or1root2_F31_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F31_2 = IntConstraintFactory.arithm(sumOrroot2_F31_2, "=", 0);
		or0root2_F31_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F31, or1root2_F31_2, or0root2_F31_2);
			
		Constraint mandatoryroot2_F60_root2_F79 = IntConstraintFactory.arithm(root2_F60, "=", root2_F79);
		mandatoryroot2_F60_root2_F79.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F60_root2_F79);
		Constraint mandatoryroot2_F14_root2_F32 = IntConstraintFactory.arithm(root2_F14, "=", root2_F32);
		mandatoryroot2_F14_root2_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F14_root2_F32);
		Constraint optionalroot2_F14_root2_F33 = IntConstraintFactory.arithm(root2_F33, "<=", root2_F14);
		optionalroot2_F14_root2_F33.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F14_root2_F33);
		Constraint mandatoryroot2_F33_root2_F74 = IntConstraintFactory.arithm(root2_F33, "=", root2_F74);
		mandatoryroot2_F33_root2_F74.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F33_root2_F74);
		Constraint mandatoryroot2_F33_root2_F75 = IntConstraintFactory.arithm(root2_F33, "=", root2_F75);
		mandatoryroot2_F33_root2_F75.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F33_root2_F75);
		Constraint mandatoryroot2_F33_root2_F76 = IntConstraintFactory.arithm(root2_F33, "=", root2_F76);
		mandatoryroot2_F33_root2_F76.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F33_root2_F76);
		IntVar sumOrroot2_F14_4 = VariableFactory.enumerated("sumOrroot2_F14", 0, 3, solver); 
		BoolVar[] varsOrroot2_F14_4 = new BoolVar[3];
		varsOrroot2_F14_4[0] = root2_F34;
		varsOrroot2_F14_4[1] = root2_F35;
		varsOrroot2_F14_4[2] = root2_F36;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F14_4, sumOrroot2_F14_4));
		Constraint or1root2_F14_4 = IntConstraintFactory.arithm(sumOrroot2_F14_4, ">=", 1);
		or1root2_F14_4.setName(Utilities.OR_TC);
		
		Constraint or0root2_F14_4 = IntConstraintFactory.arithm(sumOrroot2_F14_4, "=", 0);
		or0root2_F14_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F14, or1root2_F14_4, or0root2_F14_4);
			
		Constraint mandatoryroot2_F14_root2_F37 = IntConstraintFactory.arithm(root2_F14, "=", root2_F37);
		mandatoryroot2_F14_root2_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F14_root2_F37);
		Constraint mandatoryroot2_F14_root2_F38 = IntConstraintFactory.arithm(root2_F14, "=", root2_F38);
		mandatoryroot2_F14_root2_F38.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F14_root2_F38);
		Constraint optionalroot2_F38_root2_F143 = IntConstraintFactory.arithm(root2_F143, "<=", root2_F38);
		optionalroot2_F38_root2_F143.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F38_root2_F143);
		Constraint optionalroot2_F38_root2_F144 = IntConstraintFactory.arithm(root2_F144, "<=", root2_F38);
		optionalroot2_F38_root2_F144.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F38_root2_F144);
		Constraint optionalroot2_F38_root2_F145 = IntConstraintFactory.arithm(root2_F145, "<=", root2_F38);
		optionalroot2_F38_root2_F145.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F38_root2_F145);
		Constraint mandatoryroot2_F38_root2_F146 = IntConstraintFactory.arithm(root2_F38, "=", root2_F146);
		mandatoryroot2_F38_root2_F146.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F146);
		Constraint mandatoryroot2_F38_root2_F147 = IntConstraintFactory.arithm(root2_F38, "=", root2_F147);
		mandatoryroot2_F38_root2_F147.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F38_root2_F147);
		Constraint mandatoryroot2_F14_root2_F39 = IntConstraintFactory.arithm(root2_F14, "=", root2_F39);
		mandatoryroot2_F14_root2_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F14_root2_F39);
		Constraint optionalroot2_F15_root2_F40 = IntConstraintFactory.arithm(root2_F40, "<=", root2_F15);
		optionalroot2_F15_root2_F40.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F15_root2_F40);
		Constraint optionalroot2_F15_root2_F41 = IntConstraintFactory.arithm(root2_F41, "<=", root2_F15);
		optionalroot2_F15_root2_F41.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F15_root2_F41);
		IntVar sumOrroot2_F15_2 = VariableFactory.enumerated("sumOrroot2_F15", 0, 4, solver); 
		BoolVar[] varsOrroot2_F15_2 = new BoolVar[4];
		varsOrroot2_F15_2[0] = root2_F42;
		varsOrroot2_F15_2[1] = root2_F43;
		varsOrroot2_F15_2[2] = root2_F44;
		varsOrroot2_F15_2[3] = root2_F45;
		solver.post(IntConstraintFactory.sum(varsOrroot2_F15_2, sumOrroot2_F15_2));
		Constraint or1root2_F15_2 = IntConstraintFactory.arithm(sumOrroot2_F15_2, ">=", 1);
		or1root2_F15_2.setName(Utilities.OR_TC);
		
		Constraint or0root2_F15_2 = IntConstraintFactory.arithm(sumOrroot2_F15_2, "=", 0);
		or0root2_F15_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root2_F15, or1root2_F15_2, or0root2_F15_2);
			
		Constraint mandatoryroot2_F42_root2_F49 = IntConstraintFactory.arithm(root2_F42, "=", root2_F49);
		mandatoryroot2_F42_root2_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F42_root2_F49);
		Constraint optionalroot2_F49_root2_F101 = IntConstraintFactory.arithm(root2_F101, "<=", root2_F49);
		optionalroot2_F49_root2_F101.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F49_root2_F101);
		Constraint mandatoryroot2_F49_root2_F102 = IntConstraintFactory.arithm(root2_F49, "=", root2_F102);
		mandatoryroot2_F49_root2_F102.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F49_root2_F102);
		Constraint optionalroot2_F49_root2_F103 = IntConstraintFactory.arithm(root2_F103, "<=", root2_F49);
		optionalroot2_F49_root2_F103.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F49_root2_F103);
		Constraint optionalroot2_F49_root2_F104 = IntConstraintFactory.arithm(root2_F104, "<=", root2_F49);
		optionalroot2_F49_root2_F104.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F49_root2_F104);
		Constraint optionalroot2_F49_root2_F105 = IntConstraintFactory.arithm(root2_F105, "<=", root2_F49);
		optionalroot2_F49_root2_F105.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F49_root2_F105);
		Constraint mandatoryroot2_F49_root2_F106 = IntConstraintFactory.arithm(root2_F49, "=", root2_F106);
		mandatoryroot2_F49_root2_F106.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F49_root2_F106);
		Constraint mandatoryroot2_F49_root2_F107 = IntConstraintFactory.arithm(root2_F49, "=", root2_F107);
		mandatoryroot2_F49_root2_F107.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F49_root2_F107);
		Constraint mandatoryroot2_F49_root2_F108 = IntConstraintFactory.arithm(root2_F49, "=", root2_F108);
		mandatoryroot2_F49_root2_F108.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F49_root2_F108);
		Constraint mandatoryroot2_F49_root2_F109 = IntConstraintFactory.arithm(root2_F49, "=", root2_F109);
		mandatoryroot2_F49_root2_F109.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F49_root2_F109);
		Constraint optionalroot2_F44_root2_F148 = IntConstraintFactory.arithm(root2_F148, "<=", root2_F44);
		optionalroot2_F44_root2_F148.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F44_root2_F148);
		Constraint optionalroot2_F44_root2_F149 = IntConstraintFactory.arithm(root2_F149, "<=", root2_F44);
		optionalroot2_F44_root2_F149.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot2_F44_root2_F149);
		Constraint mandatoryroot2_F44_root2_F150 = IntConstraintFactory.arithm(root2_F44, "=", root2_F150);
		mandatoryroot2_F44_root2_F150.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F44_root2_F150);
		Constraint mandatoryroot2_F44_root2_F151 = IntConstraintFactory.arithm(root2_F44, "=", root2_F151);
		mandatoryroot2_F44_root2_F151.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F44_root2_F151);
		Constraint mandatoryroot2_F44_root2_F152 = IntConstraintFactory.arithm(root2_F44, "=", root2_F152);
		mandatoryroot2_F44_root2_F152.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F44_root2_F152);
		Constraint mandatoryroot2_F44_root2_F153 = IntConstraintFactory.arithm(root2_F44, "=", root2_F153);
		mandatoryroot2_F44_root2_F153.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F44_root2_F153);
		Constraint mandatoryroot2_F44_root2_F154 = IntConstraintFactory.arithm(root2_F44, "=", root2_F154);
		mandatoryroot2_F44_root2_F154.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F44_root2_F154);
		Constraint mandatoryroot2_F8_root2_F16 = IntConstraintFactory.arithm(root2_F8, "=", root2_F16);
		mandatoryroot2_F8_root2_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F8_root2_F16);
		Constraint mandatoryroot2_F8_root2_F17 = IntConstraintFactory.arithm(root2_F8, "=", root2_F17);
		mandatoryroot2_F8_root2_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F8_root2_F17);
		Constraint mandatoryroot2_F8_root2_F18 = IntConstraintFactory.arithm(root2_F8, "=", root2_F18);
		mandatoryroot2_F8_root2_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot2_F8_root2_F18);
		Constraint optionalroot3_root_root3_F1 = IntConstraintFactory.arithm(root3_F1, "<=", root3_root);
		optionalroot3_root_root3_F1.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F1);
		Constraint optionalroot3_root_root3_F2 = IntConstraintFactory.arithm(root3_F2, "<=", root3_root);
		optionalroot3_root_root3_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_root_root3_F2);
		Constraint mandatoryroot3_root_root3_F3 = IntConstraintFactory.arithm(root3_root, "=", root3_F3);
		mandatoryroot3_root_root3_F3.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F3);
		Constraint optionalroot3_F3_root3_F10 = IntConstraintFactory.arithm(root3_F10, "<=", root3_F3);
		optionalroot3_F3_root3_F10.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F3_root3_F10);
		Constraint mandatoryroot3_F10_root3_F37 = IntConstraintFactory.arithm(root3_F10, "=", root3_F37);
		mandatoryroot3_F10_root3_F37.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F10_root3_F37);
		Constraint optionalroot3_F37_root3_F129 = IntConstraintFactory.arithm(root3_F129, "<=", root3_F37);
		optionalroot3_F37_root3_F129.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F37_root3_F129);
		Constraint mandatoryroot3_F37_root3_F130 = IntConstraintFactory.arithm(root3_F37, "=", root3_F130);
		mandatoryroot3_F37_root3_F130.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F37_root3_F130);
		Constraint optionalroot3_F37_root3_F131 = IntConstraintFactory.arithm(root3_F131, "<=", root3_F37);
		optionalroot3_F37_root3_F131.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F37_root3_F131);
		Constraint optionalroot3_F37_root3_F132 = IntConstraintFactory.arithm(root3_F132, "<=", root3_F37);
		optionalroot3_F37_root3_F132.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F37_root3_F132);
		Constraint mandatoryroot3_F37_root3_F133 = IntConstraintFactory.arithm(root3_F37, "=", root3_F133);
		mandatoryroot3_F37_root3_F133.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F37_root3_F133);
		Constraint optionalroot3_F37_root3_F134 = IntConstraintFactory.arithm(root3_F134, "<=", root3_F37);
		optionalroot3_F37_root3_F134.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F37_root3_F134);
		Constraint mandatoryroot3_F37_root3_F135 = IntConstraintFactory.arithm(root3_F37, "=", root3_F135);
		mandatoryroot3_F37_root3_F135.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F37_root3_F135);
		Constraint mandatoryroot3_F37_root3_F136 = IntConstraintFactory.arithm(root3_F37, "=", root3_F136);
		mandatoryroot3_F37_root3_F136.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F37_root3_F136);
		Constraint mandatoryroot3_F37_root3_F137 = IntConstraintFactory.arithm(root3_F37, "=", root3_F137);
		mandatoryroot3_F37_root3_F137.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F37_root3_F137);
		Constraint optionalroot3_F10_root3_F38 = IntConstraintFactory.arithm(root3_F38, "<=", root3_F10);
		optionalroot3_F10_root3_F38.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F10_root3_F38);
		IntVar sumOrroot3_F10_2 = VariableFactory.enumerated("sumOrroot3_F10", 0, 3, solver); 
		BoolVar[] varsOrroot3_F10_2 = new BoolVar[3];
		varsOrroot3_F10_2[0] = root3_F39;
		varsOrroot3_F10_2[1] = root3_F40;
		varsOrroot3_F10_2[2] = root3_F41;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F10_2, sumOrroot3_F10_2));
		Constraint or1root3_F10_2 = IntConstraintFactory.arithm(sumOrroot3_F10_2, ">=", 1);
		or1root3_F10_2.setName(Utilities.OR_TC);
		
		Constraint or0root3_F10_2 = IntConstraintFactory.arithm(sumOrroot3_F10_2, "=", 0);
		or0root3_F10_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F10, or1root3_F10_2, or0root3_F10_2);
			
		Constraint optionalroot3_F39_root3_F43 = IntConstraintFactory.arithm(root3_F43, "<=", root3_F39);
		optionalroot3_F39_root3_F43.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F39_root3_F43);
		Constraint mandatoryroot3_F39_root3_F44 = IntConstraintFactory.arithm(root3_F39, "=", root3_F44);
		mandatoryroot3_F39_root3_F44.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F39_root3_F44);
		Constraint optionalroot3_F39_root3_F45 = IntConstraintFactory.arithm(root3_F45, "<=", root3_F39);
		optionalroot3_F39_root3_F45.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F39_root3_F45);
		Constraint mandatoryroot3_F41_root3_F54 = IntConstraintFactory.arithm(root3_F41, "=", root3_F54);
		mandatoryroot3_F41_root3_F54.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F41_root3_F54);
		Constraint mandatoryroot3_F3_root3_F11 = IntConstraintFactory.arithm(root3_F3, "=", root3_F11);
		mandatoryroot3_F3_root3_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F11);
		Constraint mandatoryroot3_F3_root3_F12 = IntConstraintFactory.arithm(root3_F3, "=", root3_F12);
		mandatoryroot3_F3_root3_F12.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F12);
		Constraint optionalroot3_F12_root3_F26 = IntConstraintFactory.arithm(root3_F26, "<=", root3_F12);
		optionalroot3_F12_root3_F26.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F26);
		Constraint optionalroot3_F26_root3_F35 = IntConstraintFactory.arithm(root3_F35, "<=", root3_F26);
		optionalroot3_F26_root3_F35.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F26_root3_F35);
		Constraint mandatoryroot3_F26_root3_F36 = IntConstraintFactory.arithm(root3_F26, "=", root3_F36);
		mandatoryroot3_F26_root3_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F26_root3_F36);
		Constraint optionalroot3_F12_root3_F27 = IntConstraintFactory.arithm(root3_F27, "<=", root3_F12);
		optionalroot3_F12_root3_F27.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F27);
		Constraint mandatoryroot3_F27_root3_F46 = IntConstraintFactory.arithm(root3_F27, "=", root3_F46);
		mandatoryroot3_F27_root3_F46.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F46);
		Constraint optionalroot3_F46_root3_F75 = IntConstraintFactory.arithm(root3_F75, "<=", root3_F46);
		optionalroot3_F46_root3_F75.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F46_root3_F75);
		Constraint optionalroot3_F46_root3_F76 = IntConstraintFactory.arithm(root3_F76, "<=", root3_F46);
		optionalroot3_F46_root3_F76.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F46_root3_F76);
		Constraint optionalroot3_F46_root3_F77 = IntConstraintFactory.arithm(root3_F77, "<=", root3_F46);
		optionalroot3_F46_root3_F77.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F46_root3_F77);
		Constraint mandatoryroot3_F27_root3_F47 = IntConstraintFactory.arithm(root3_F27, "=", root3_F47);
		mandatoryroot3_F27_root3_F47.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F47);
		Constraint optionalroot3_F27_root3_F48 = IntConstraintFactory.arithm(root3_F48, "<=", root3_F27);
		optionalroot3_F27_root3_F48.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F27_root3_F48);
		Constraint mandatoryroot3_F48_root3_F158 = IntConstraintFactory.arithm(root3_F48, "=", root3_F158);
		mandatoryroot3_F48_root3_F158.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F48_root3_F158);
		Constraint mandatoryroot3_F27_root3_F49 = IntConstraintFactory.arithm(root3_F27, "=", root3_F49);
		mandatoryroot3_F27_root3_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F49);
		Constraint optionalroot3_F27_root3_F50 = IntConstraintFactory.arithm(root3_F50, "<=", root3_F27);
		optionalroot3_F27_root3_F50.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F27_root3_F50);
		Constraint mandatoryroot3_F27_root3_F51 = IntConstraintFactory.arithm(root3_F27, "=", root3_F51);
		mandatoryroot3_F27_root3_F51.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F27_root3_F51);
		IntVar sumOrroot3_F27_6 = VariableFactory.enumerated("sumOrroot3_F27", 0, 2, solver); 
		BoolVar[] varsOrroot3_F27_6 = new BoolVar[2];
		varsOrroot3_F27_6[0] = root3_F52;
		varsOrroot3_F27_6[1] = root3_F53;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F27_6, sumOrroot3_F27_6));
		Constraint or1root3_F27_6 = IntConstraintFactory.arithm(sumOrroot3_F27_6, ">=", 1);
		or1root3_F27_6.setName(Utilities.OR_TC);
		
		Constraint or0root3_F27_6 = IntConstraintFactory.arithm(sumOrroot3_F27_6, "=", 0);
		or0root3_F27_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F27, or1root3_F27_6, or0root3_F27_6);
			
		Constraint optionalroot3_F52_root3_F119 = IntConstraintFactory.arithm(root3_F119, "<=", root3_F52);
		optionalroot3_F52_root3_F119.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F52_root3_F119);
		Constraint optionalroot3_F12_root3_F28 = IntConstraintFactory.arithm(root3_F28, "<=", root3_F12);
		optionalroot3_F12_root3_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F28);
		Constraint optionalroot3_F28_root3_F97 = IntConstraintFactory.arithm(root3_F97, "<=", root3_F28);
		optionalroot3_F28_root3_F97.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F28_root3_F97);
		Constraint mandatoryroot3_F28_root3_F98 = IntConstraintFactory.arithm(root3_F28, "=", root3_F98);
		mandatoryroot3_F28_root3_F98.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F28_root3_F98);
		Constraint mandatoryroot3_F28_root3_F99 = IntConstraintFactory.arithm(root3_F28, "=", root3_F99);
		mandatoryroot3_F28_root3_F99.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F28_root3_F99);
		Constraint mandatoryroot3_F28_root3_F100 = IntConstraintFactory.arithm(root3_F28, "=", root3_F100);
		mandatoryroot3_F28_root3_F100.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F28_root3_F100);
		Constraint mandatoryroot3_F28_root3_F101 = IntConstraintFactory.arithm(root3_F28, "=", root3_F101);
		mandatoryroot3_F28_root3_F101.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F28_root3_F101);
		Constraint optionalroot3_F12_root3_F29 = IntConstraintFactory.arithm(root3_F29, "<=", root3_F12);
		optionalroot3_F12_root3_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F29);
		Constraint mandatoryroot3_F12_root3_F30 = IntConstraintFactory.arithm(root3_F12, "=", root3_F30);
		mandatoryroot3_F12_root3_F30.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F30);
		Constraint optionalroot3_F12_root3_F31 = IntConstraintFactory.arithm(root3_F31, "<=", root3_F12);
		optionalroot3_F12_root3_F31.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F12_root3_F31);
		Constraint mandatoryroot3_F12_root3_F32 = IntConstraintFactory.arithm(root3_F12, "=", root3_F32);
		mandatoryroot3_F12_root3_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F32);
		Constraint mandatoryroot3_F32_root3_F63 = IntConstraintFactory.arithm(root3_F32, "=", root3_F63);
		mandatoryroot3_F32_root3_F63.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F32_root3_F63);
		Constraint mandatoryroot3_F32_root3_F64 = IntConstraintFactory.arithm(root3_F32, "=", root3_F64);
		mandatoryroot3_F32_root3_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F32_root3_F64);
		Constraint mandatoryroot3_F32_root3_F65 = IntConstraintFactory.arithm(root3_F32, "=", root3_F65);
		mandatoryroot3_F32_root3_F65.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F32_root3_F65);
		Constraint mandatoryroot3_F32_root3_F66 = IntConstraintFactory.arithm(root3_F32, "=", root3_F66);
		mandatoryroot3_F32_root3_F66.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F32_root3_F66);
		Constraint optionalroot3_F66_root3_F78 = IntConstraintFactory.arithm(root3_F78, "<=", root3_F66);
		optionalroot3_F66_root3_F78.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F66_root3_F78);
		Constraint optionalroot3_F66_root3_F79 = IntConstraintFactory.arithm(root3_F79, "<=", root3_F66);
		optionalroot3_F66_root3_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F66_root3_F79);
		Constraint mandatoryroot3_F32_root3_F67 = IntConstraintFactory.arithm(root3_F32, "=", root3_F67);
		mandatoryroot3_F32_root3_F67.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F32_root3_F67);
		Constraint mandatoryroot3_F12_root3_F33 = IntConstraintFactory.arithm(root3_F12, "=", root3_F33);
		mandatoryroot3_F12_root3_F33.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F33);
		Constraint mandatoryroot3_F12_root3_F34 = IntConstraintFactory.arithm(root3_F12, "=", root3_F34);
		mandatoryroot3_F12_root3_F34.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F12_root3_F34);
		Constraint mandatoryroot3_F3_root3_F13 = IntConstraintFactory.arithm(root3_F3, "=", root3_F13);
		mandatoryroot3_F3_root3_F13.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F13);
		Constraint mandatoryroot3_F3_root3_F14 = IntConstraintFactory.arithm(root3_F3, "=", root3_F14);
		mandatoryroot3_F3_root3_F14.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F14);
		Constraint mandatoryroot3_F3_root3_F15 = IntConstraintFactory.arithm(root3_F3, "=", root3_F15);
		mandatoryroot3_F3_root3_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F3_root3_F15);
		Constraint mandatoryroot3_F15_root3_F159 = IntConstraintFactory.arithm(root3_F15, "=", root3_F159);
		mandatoryroot3_F15_root3_F159.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F15_root3_F159);
		Constraint mandatoryroot3_root_root3_F4 = IntConstraintFactory.arithm(root3_root, "=", root3_F4);
		mandatoryroot3_root_root3_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F4);
		IntVar sumOrroot3_root_4 = VariableFactory.enumerated("sumOrroot3_root", 0, 3, solver); 
		BoolVar[] varsOrroot3_root_4 = new BoolVar[3];
		varsOrroot3_root_4[0] = root3_F5;
		varsOrroot3_root_4[1] = root3_F6;
		varsOrroot3_root_4[2] = root3_F7;
		solver.post(IntConstraintFactory.sum(varsOrroot3_root_4, sumOrroot3_root_4));
		Constraint or1root3_root_4 = IntConstraintFactory.arithm(sumOrroot3_root_4, ">=", 1);
		or1root3_root_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_root_4 = IntConstraintFactory.arithm(sumOrroot3_root_4, "=", 0);
		or0root3_root_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_root, or1root3_root_4, or0root3_root_4);
			
		Constraint mandatoryroot3_F5_root3_F16 = IntConstraintFactory.arithm(root3_F5, "=", root3_F16);
		mandatoryroot3_F5_root3_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F5_root3_F16);
		Constraint mandatoryroot3_F16_root3_F138 = IntConstraintFactory.arithm(root3_F16, "=", root3_F138);
		mandatoryroot3_F16_root3_F138.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F16_root3_F138);
		Constraint mandatoryroot3_F16_root3_F139 = IntConstraintFactory.arithm(root3_F16, "=", root3_F139);
		mandatoryroot3_F16_root3_F139.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F16_root3_F139);
		Constraint optionalroot3_F16_root3_F140 = IntConstraintFactory.arithm(root3_F140, "<=", root3_F16);
		optionalroot3_F16_root3_F140.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F16_root3_F140);
		Constraint mandatoryroot3_F16_root3_F141 = IntConstraintFactory.arithm(root3_F16, "=", root3_F141);
		mandatoryroot3_F16_root3_F141.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F16_root3_F141);
		Constraint mandatoryroot3_F16_root3_F142 = IntConstraintFactory.arithm(root3_F16, "=", root3_F142);
		mandatoryroot3_F16_root3_F142.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F16_root3_F142);
		Constraint optionalroot3_F16_root3_F143 = IntConstraintFactory.arithm(root3_F143, "<=", root3_F16);
		optionalroot3_F16_root3_F143.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F16_root3_F143);
		IntVar sumOrroot3_F16_6 = VariableFactory.enumerated("sumOrroot3_F16", 0, 3, solver); 
		BoolVar[] varsOrroot3_F16_6 = new BoolVar[3];
		varsOrroot3_F16_6[0] = root3_F144;
		varsOrroot3_F16_6[1] = root3_F145;
		varsOrroot3_F16_6[2] = root3_F146;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F16_6, sumOrroot3_F16_6));
		Constraint or1root3_F16_6 = IntConstraintFactory.arithm(sumOrroot3_F16_6, ">=", 1);
		or1root3_F16_6.setName(Utilities.OR_TC);
		
		Constraint or0root3_F16_6 = IntConstraintFactory.arithm(sumOrroot3_F16_6, "=", 0);
		or0root3_F16_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F16, or1root3_F16_6, or0root3_F16_6);
			
		Constraint mandatoryroot3_F5_root3_F17 = IntConstraintFactory.arithm(root3_F5, "=", root3_F17);
		mandatoryroot3_F5_root3_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F5_root3_F17);
		IntVar sumOrroot3_F5_2 = VariableFactory.enumerated("sumOrroot3_F5", 0, 2, solver); 
		BoolVar[] varsOrroot3_F5_2 = new BoolVar[2];
		varsOrroot3_F5_2[0] = root3_F18;
		varsOrroot3_F5_2[1] = root3_F19;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F5_2, sumOrroot3_F5_2));
		Constraint or1root3_F5_2 = IntConstraintFactory.arithm(sumOrroot3_F5_2, ">=", 1);
		or1root3_F5_2.setName(Utilities.OR_TC);
		
		Constraint or0root3_F5_2 = IntConstraintFactory.arithm(sumOrroot3_F5_2, "=", 0);
		or0root3_F5_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F5, or1root3_F5_2, or0root3_F5_2);
			
		Constraint mandatoryroot3_F18_root3_F68 = IntConstraintFactory.arithm(root3_F18, "=", root3_F68);
		mandatoryroot3_F18_root3_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F18_root3_F68);
		Constraint mandatoryroot3_F18_root3_F69 = IntConstraintFactory.arithm(root3_F18, "=", root3_F69);
		mandatoryroot3_F18_root3_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F18_root3_F69);
		Constraint optionalroot3_F18_root3_F70 = IntConstraintFactory.arithm(root3_F70, "<=", root3_F18);
		optionalroot3_F18_root3_F70.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F18_root3_F70);
		Constraint mandatoryroot3_F70_root3_F102 = IntConstraintFactory.arithm(root3_F70, "=", root3_F102);
		mandatoryroot3_F70_root3_F102.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F70_root3_F102);
		IntVar sumOrroot3_F70_1 = VariableFactory.enumerated("sumOrroot3_F70", 0, 2, solver); 
		BoolVar[] varsOrroot3_F70_1 = new BoolVar[2];
		varsOrroot3_F70_1[0] = root3_F103;
		varsOrroot3_F70_1[1] = root3_F104;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F70_1, sumOrroot3_F70_1));
		Constraint or1root3_F70_1 = IntConstraintFactory.arithm(sumOrroot3_F70_1, ">=", 1);
		or1root3_F70_1.setName(Utilities.OR_TC);
		
		Constraint or0root3_F70_1 = IntConstraintFactory.arithm(sumOrroot3_F70_1, "=", 0);
		or0root3_F70_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F70, or1root3_F70_1, or0root3_F70_1);
			
		Constraint mandatoryroot3_F70_root3_F105 = IntConstraintFactory.arithm(root3_F70, "=", root3_F105);
		mandatoryroot3_F70_root3_F105.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F70_root3_F105);
		Constraint mandatoryroot3_F70_root3_F106 = IntConstraintFactory.arithm(root3_F70, "=", root3_F106);
		mandatoryroot3_F70_root3_F106.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F70_root3_F106);
		Constraint mandatoryroot3_F70_root3_F107 = IntConstraintFactory.arithm(root3_F70, "=", root3_F107);
		mandatoryroot3_F70_root3_F107.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F70_root3_F107);
		Constraint mandatoryroot3_F70_root3_F108 = IntConstraintFactory.arithm(root3_F70, "=", root3_F108);
		mandatoryroot3_F70_root3_F108.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F70_root3_F108);
		IntVar sumOrroot3_F18_3 = VariableFactory.enumerated("sumOrroot3_F18", 0, 2, solver); 
		BoolVar[] varsOrroot3_F18_3 = new BoolVar[2];
		varsOrroot3_F18_3[0] = root3_F71;
		varsOrroot3_F18_3[1] = root3_F72;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F18_3, sumOrroot3_F18_3));
		Constraint or1root3_F18_3 = IntConstraintFactory.arithm(sumOrroot3_F18_3, ">=", 1);
		or1root3_F18_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F18_3 = IntConstraintFactory.arithm(sumOrroot3_F18_3, "=", 0);
		or0root3_F18_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F18, or1root3_F18_3, or0root3_F18_3);
			
		Constraint optionalroot3_F72_root3_F87 = IntConstraintFactory.arithm(root3_F87, "<=", root3_F72);
		optionalroot3_F72_root3_F87.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F72_root3_F87);
		Constraint mandatoryroot3_F72_root3_F88 = IntConstraintFactory.arithm(root3_F72, "=", root3_F88);
		mandatoryroot3_F72_root3_F88.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F72_root3_F88);
		Constraint optionalroot3_F88_root3_F120 = IntConstraintFactory.arithm(root3_F120, "<=", root3_F88);
		optionalroot3_F88_root3_F120.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F88_root3_F120);
		Constraint mandatoryroot3_F88_root3_F121 = IntConstraintFactory.arithm(root3_F88, "=", root3_F121);
		mandatoryroot3_F88_root3_F121.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F121);
		Constraint mandatoryroot3_F88_root3_F122 = IntConstraintFactory.arithm(root3_F88, "=", root3_F122);
		mandatoryroot3_F88_root3_F122.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F122);
		Constraint mandatoryroot3_F88_root3_F123 = IntConstraintFactory.arithm(root3_F88, "=", root3_F123);
		mandatoryroot3_F88_root3_F123.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F123);
		Constraint mandatoryroot3_F88_root3_F124 = IntConstraintFactory.arithm(root3_F88, "=", root3_F124);
		mandatoryroot3_F88_root3_F124.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F124);
		Constraint mandatoryroot3_F88_root3_F125 = IntConstraintFactory.arithm(root3_F88, "=", root3_F125);
		mandatoryroot3_F88_root3_F125.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F125);
		Constraint mandatoryroot3_F88_root3_F126 = IntConstraintFactory.arithm(root3_F88, "=", root3_F126);
		mandatoryroot3_F88_root3_F126.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F126);
		Constraint mandatoryroot3_F88_root3_F127 = IntConstraintFactory.arithm(root3_F88, "=", root3_F127);
		mandatoryroot3_F88_root3_F127.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F127);
		Constraint mandatoryroot3_F88_root3_F128 = IntConstraintFactory.arithm(root3_F88, "=", root3_F128);
		mandatoryroot3_F88_root3_F128.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F88_root3_F128);
		Constraint mandatoryroot3_F72_root3_F89 = IntConstraintFactory.arithm(root3_F72, "=", root3_F89);
		mandatoryroot3_F72_root3_F89.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F72_root3_F89);
		IntVar sumOrroot3_F72_3 = VariableFactory.enumerated("sumOrroot3_F72", 0, 2, solver); 
		BoolVar[] varsOrroot3_F72_3 = new BoolVar[2];
		varsOrroot3_F72_3[0] = root3_F90;
		varsOrroot3_F72_3[1] = root3_F91;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F72_3, sumOrroot3_F72_3));
		Constraint or1root3_F72_3 = IntConstraintFactory.arithm(sumOrroot3_F72_3, ">=", 1);
		or1root3_F72_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F72_3 = IntConstraintFactory.arithm(sumOrroot3_F72_3, "=", 0);
		or0root3_F72_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F72, or1root3_F72_3, or0root3_F72_3);
			
		IntVar sumOrroot3_F72_4 = VariableFactory.enumerated("sumOrroot3_F72", 0, 3, solver); 
		BoolVar[] varsOrroot3_F72_4 = new BoolVar[3];
		varsOrroot3_F72_4[0] = root3_F92;
		varsOrroot3_F72_4[1] = root3_F93;
		varsOrroot3_F72_4[2] = root3_F94;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F72_4, sumOrroot3_F72_4));
		Constraint or1root3_F72_4 = IntConstraintFactory.arithm(sumOrroot3_F72_4, ">=", 1);
		or1root3_F72_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_F72_4 = IntConstraintFactory.arithm(sumOrroot3_F72_4, "=", 0);
		or0root3_F72_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F72, or1root3_F72_4, or0root3_F72_4);
			
		Constraint mandatoryroot3_F72_root3_F95 = IntConstraintFactory.arithm(root3_F72, "=", root3_F95);
		mandatoryroot3_F72_root3_F95.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F72_root3_F95);
		Constraint mandatoryroot3_F72_root3_F96 = IntConstraintFactory.arithm(root3_F72, "=", root3_F96);
		mandatoryroot3_F72_root3_F96.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F72_root3_F96);
		IntVar sumOrroot3_F18_4 = VariableFactory.enumerated("sumOrroot3_F18", 0, 2, solver); 
		BoolVar[] varsOrroot3_F18_4 = new BoolVar[2];
		varsOrroot3_F18_4[0] = root3_F73;
		varsOrroot3_F18_4[1] = root3_F74;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F18_4, sumOrroot3_F18_4));
		Constraint or1root3_F18_4 = IntConstraintFactory.arithm(sumOrroot3_F18_4, ">=", 1);
		or1root3_F18_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_F18_4 = IntConstraintFactory.arithm(sumOrroot3_F18_4, "=", 0);
		or0root3_F18_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F18, or1root3_F18_4, or0root3_F18_4);
			
		Constraint optionalroot3_F19_root3_F156 = IntConstraintFactory.arithm(root3_F156, "<=", root3_F19);
		optionalroot3_F19_root3_F156.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F19_root3_F156);
		Constraint mandatoryroot3_F19_root3_F157 = IntConstraintFactory.arithm(root3_F19, "=", root3_F157);
		mandatoryroot3_F19_root3_F157.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F19_root3_F157);
		IntVar sumOrroot3_F5_3 = VariableFactory.enumerated("sumOrroot3_F5", 0, 2, solver); 
		BoolVar[] varsOrroot3_F5_3 = new BoolVar[2];
		varsOrroot3_F5_3[0] = root3_F20;
		varsOrroot3_F5_3[1] = root3_F21;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F5_3, sumOrroot3_F5_3));
		Constraint or1root3_F5_3 = IntConstraintFactory.arithm(sumOrroot3_F5_3, ">=", 1);
		or1root3_F5_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F5_3 = IntConstraintFactory.arithm(sumOrroot3_F5_3, "=", 0);
		or0root3_F5_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F5, or1root3_F5_3, or0root3_F5_3);
			
		IntVar sumOrroot3_F5_4 = VariableFactory.enumerated("sumOrroot3_F5", 0, 2, solver); 
		BoolVar[] varsOrroot3_F5_4 = new BoolVar[2];
		varsOrroot3_F5_4[0] = root3_F22;
		varsOrroot3_F5_4[1] = root3_F23;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F5_4, sumOrroot3_F5_4));
		Constraint or1root3_F5_4 = IntConstraintFactory.arithm(sumOrroot3_F5_4, ">=", 1);
		or1root3_F5_4.setName(Utilities.OR_TC);
		
		Constraint or0root3_F5_4 = IntConstraintFactory.arithm(sumOrroot3_F5_4, "=", 0);
		or0root3_F5_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F5, or1root3_F5_4, or0root3_F5_4);
			
		Constraint mandatoryroot3_F5_root3_F24 = IntConstraintFactory.arithm(root3_F5, "=", root3_F24);
		mandatoryroot3_F5_root3_F24.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F5_root3_F24);
		Constraint mandatoryroot3_F24_root3_F55 = IntConstraintFactory.arithm(root3_F24, "=", root3_F55);
		mandatoryroot3_F24_root3_F55.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F24_root3_F55);
		Constraint mandatoryroot3_F55_root3_F80 = IntConstraintFactory.arithm(root3_F55, "=", root3_F80);
		mandatoryroot3_F55_root3_F80.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F55_root3_F80);
		Constraint optionalroot3_F55_root3_F81 = IntConstraintFactory.arithm(root3_F81, "<=", root3_F55);
		optionalroot3_F55_root3_F81.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F55_root3_F81);
		Constraint optionalroot3_F55_root3_F82 = IntConstraintFactory.arithm(root3_F82, "<=", root3_F55);
		optionalroot3_F55_root3_F82.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F55_root3_F82);
		Constraint optionalroot3_F55_root3_F83 = IntConstraintFactory.arithm(root3_F83, "<=", root3_F55);
		optionalroot3_F55_root3_F83.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F55_root3_F83);
		Constraint mandatoryroot3_F55_root3_F84 = IntConstraintFactory.arithm(root3_F55, "=", root3_F84);
		mandatoryroot3_F55_root3_F84.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F55_root3_F84);
		Constraint mandatoryroot3_F55_root3_F85 = IntConstraintFactory.arithm(root3_F55, "=", root3_F85);
		mandatoryroot3_F55_root3_F85.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F55_root3_F85);
		Constraint mandatoryroot3_F55_root3_F86 = IntConstraintFactory.arithm(root3_F55, "=", root3_F86);
		mandatoryroot3_F55_root3_F86.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F55_root3_F86);
		Constraint mandatoryroot3_F24_root3_F56 = IntConstraintFactory.arithm(root3_F24, "=", root3_F56);
		mandatoryroot3_F24_root3_F56.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F24_root3_F56);
		Constraint optionalroot3_F56_root3_F151 = IntConstraintFactory.arithm(root3_F151, "<=", root3_F56);
		optionalroot3_F56_root3_F151.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F56_root3_F151);
		Constraint mandatoryroot3_F56_root3_F152 = IntConstraintFactory.arithm(root3_F56, "=", root3_F152);
		mandatoryroot3_F56_root3_F152.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F56_root3_F152);
		Constraint optionalroot3_F24_root3_F57 = IntConstraintFactory.arithm(root3_F57, "<=", root3_F24);
		optionalroot3_F24_root3_F57.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F24_root3_F57);
		IntVar sumOrroot3_F24_3 = VariableFactory.enumerated("sumOrroot3_F24", 0, 3, solver); 
		BoolVar[] varsOrroot3_F24_3 = new BoolVar[3];
		varsOrroot3_F24_3[0] = root3_F58;
		varsOrroot3_F24_3[1] = root3_F59;
		varsOrroot3_F24_3[2] = root3_F60;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F24_3, sumOrroot3_F24_3));
		Constraint or1root3_F24_3 = IntConstraintFactory.arithm(sumOrroot3_F24_3, ">=", 1);
		or1root3_F24_3.setName(Utilities.OR_TC);
		
		Constraint or0root3_F24_3 = IntConstraintFactory.arithm(sumOrroot3_F24_3, "=", 0);
		or0root3_F24_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F24, or1root3_F24_3, or0root3_F24_3);
			
		Constraint mandatoryroot3_F59_root3_F109 = IntConstraintFactory.arithm(root3_F59, "=", root3_F109);
		mandatoryroot3_F59_root3_F109.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F109);
		Constraint optionalroot3_F59_root3_F110 = IntConstraintFactory.arithm(root3_F110, "<=", root3_F59);
		optionalroot3_F59_root3_F110.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F59_root3_F110);
		IntVar sumOrroot3_F59_2 = VariableFactory.enumerated("sumOrroot3_F59", 0, 3, solver); 
		BoolVar[] varsOrroot3_F59_2 = new BoolVar[3];
		varsOrroot3_F59_2[0] = root3_F111;
		varsOrroot3_F59_2[1] = root3_F112;
		varsOrroot3_F59_2[2] = root3_F113;
		solver.post(IntConstraintFactory.sum(varsOrroot3_F59_2, sumOrroot3_F59_2));
		Constraint or1root3_F59_2 = IntConstraintFactory.arithm(sumOrroot3_F59_2, ">=", 1);
		or1root3_F59_2.setName(Utilities.OR_TC);
		
		Constraint or0root3_F59_2 = IntConstraintFactory.arithm(sumOrroot3_F59_2, "=", 0);
		or0root3_F59_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root3_F59, or1root3_F59_2, or0root3_F59_2);
			
		Constraint optionalroot3_F111_root3_F153 = IntConstraintFactory.arithm(root3_F153, "<=", root3_F111);
		optionalroot3_F111_root3_F153.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F111_root3_F153);
		Constraint mandatoryroot3_F111_root3_F154 = IntConstraintFactory.arithm(root3_F111, "=", root3_F154);
		mandatoryroot3_F111_root3_F154.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F111_root3_F154);
		Constraint mandatoryroot3_F111_root3_F155 = IntConstraintFactory.arithm(root3_F111, "=", root3_F155);
		mandatoryroot3_F111_root3_F155.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F111_root3_F155);
		Constraint mandatoryroot3_F113_root3_F147 = IntConstraintFactory.arithm(root3_F113, "=", root3_F147);
		mandatoryroot3_F113_root3_F147.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F113_root3_F147);
		Constraint mandatoryroot3_F113_root3_F148 = IntConstraintFactory.arithm(root3_F113, "=", root3_F148);
		mandatoryroot3_F113_root3_F148.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F113_root3_F148);
		Constraint mandatoryroot3_F113_root3_F149 = IntConstraintFactory.arithm(root3_F113, "=", root3_F149);
		mandatoryroot3_F113_root3_F149.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F113_root3_F149);
		Constraint mandatoryroot3_F113_root3_F150 = IntConstraintFactory.arithm(root3_F113, "=", root3_F150);
		mandatoryroot3_F113_root3_F150.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F113_root3_F150);
		Constraint mandatoryroot3_F59_root3_F114 = IntConstraintFactory.arithm(root3_F59, "=", root3_F114);
		mandatoryroot3_F59_root3_F114.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F114);
		Constraint mandatoryroot3_F59_root3_F115 = IntConstraintFactory.arithm(root3_F59, "=", root3_F115);
		mandatoryroot3_F59_root3_F115.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F115);
		Constraint mandatoryroot3_F59_root3_F116 = IntConstraintFactory.arithm(root3_F59, "=", root3_F116);
		mandatoryroot3_F59_root3_F116.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F116);
		Constraint mandatoryroot3_F59_root3_F117 = IntConstraintFactory.arithm(root3_F59, "=", root3_F117);
		mandatoryroot3_F59_root3_F117.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F117);
		Constraint mandatoryroot3_F59_root3_F118 = IntConstraintFactory.arithm(root3_F59, "=", root3_F118);
		mandatoryroot3_F59_root3_F118.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F59_root3_F118);
		Constraint mandatoryroot3_F24_root3_F61 = IntConstraintFactory.arithm(root3_F24, "=", root3_F61);
		mandatoryroot3_F24_root3_F61.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F24_root3_F61);
		Constraint mandatoryroot3_F24_root3_F62 = IntConstraintFactory.arithm(root3_F24, "=", root3_F62);
		mandatoryroot3_F24_root3_F62.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F24_root3_F62);
		Constraint mandatoryroot3_F5_root3_F25 = IntConstraintFactory.arithm(root3_F5, "=", root3_F25);
		mandatoryroot3_F5_root3_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_F5_root3_F25);
		Constraint mandatoryroot3_root_root3_F8 = IntConstraintFactory.arithm(root3_root, "=", root3_F8);
		mandatoryroot3_root_root3_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F8);
		Constraint optionalroot3_F8_root3_F42 = IntConstraintFactory.arithm(root3_F42, "<=", root3_F8);
		optionalroot3_F8_root3_F42.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot3_F8_root3_F42);
		Constraint mandatoryroot3_root_root3_F9 = IntConstraintFactory.arithm(root3_root, "=", root3_F9);
		mandatoryroot3_root_root3_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot3_root_root3_F9);
		Constraint mandatoryroot4_root_root4_F1 = IntConstraintFactory.arithm(root4_root, "=", root4_F1);
		mandatoryroot4_root_root4_F1.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_root_root4_F1);
		Constraint optionalroot4_F1_root4_F2 = IntConstraintFactory.arithm(root4_F2, "<=", root4_F1);
		optionalroot4_F1_root4_F2.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F1_root4_F2);
		Constraint optionalroot4_F2_root4_F3 = IntConstraintFactory.arithm(root4_F3, "<=", root4_F2);
		optionalroot4_F2_root4_F3.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F2_root4_F3);
		Constraint mandatoryroot4_F2_root4_F4 = IntConstraintFactory.arithm(root4_F2, "=", root4_F4);
		mandatoryroot4_F2_root4_F4.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F4);
		Constraint mandatoryroot4_F2_root4_F5 = IntConstraintFactory.arithm(root4_F2, "=", root4_F5);
		mandatoryroot4_F2_root4_F5.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F5);
		Constraint optionalroot4_F2_root4_F6 = IntConstraintFactory.arithm(root4_F6, "<=", root4_F2);
		optionalroot4_F2_root4_F6.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F2_root4_F6);
		Constraint mandatoryroot4_F2_root4_F7 = IntConstraintFactory.arithm(root4_F2, "=", root4_F7);
		mandatoryroot4_F2_root4_F7.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F7);
		Constraint mandatoryroot4_F7_root4_F11 = IntConstraintFactory.arithm(root4_F7, "=", root4_F11);
		mandatoryroot4_F7_root4_F11.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F7_root4_F11);
		Constraint mandatoryroot4_F11_root4_F41 = IntConstraintFactory.arithm(root4_F11, "=", root4_F41);
		mandatoryroot4_F11_root4_F41.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F11_root4_F41);
		Constraint mandatoryroot4_F11_root4_F42 = IntConstraintFactory.arithm(root4_F11, "=", root4_F42);
		mandatoryroot4_F11_root4_F42.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F11_root4_F42);
		Constraint mandatoryroot4_F11_root4_F43 = IntConstraintFactory.arithm(root4_F11, "=", root4_F43);
		mandatoryroot4_F11_root4_F43.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F11_root4_F43);
		Constraint mandatoryroot4_F43_root4_F156 = IntConstraintFactory.arithm(root4_F43, "=", root4_F156);
		mandatoryroot4_F43_root4_F156.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F43_root4_F156);
		Constraint mandatoryroot4_F43_root4_F157 = IntConstraintFactory.arithm(root4_F43, "=", root4_F157);
		mandatoryroot4_F43_root4_F157.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F43_root4_F157);
		Constraint mandatoryroot4_F43_root4_F158 = IntConstraintFactory.arithm(root4_F43, "=", root4_F158);
		mandatoryroot4_F43_root4_F158.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F43_root4_F158);
		Constraint optionalroot4_F11_root4_F44 = IntConstraintFactory.arithm(root4_F44, "<=", root4_F11);
		optionalroot4_F11_root4_F44.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F11_root4_F44);
		IntVar sumOrroot4_F11_4 = VariableFactory.enumerated("sumOrroot4_F11", 0, 4, solver); 
		BoolVar[] varsOrroot4_F11_4 = new BoolVar[4];
		varsOrroot4_F11_4[0] = root4_F45;
		varsOrroot4_F11_4[1] = root4_F46;
		varsOrroot4_F11_4[2] = root4_F47;
		varsOrroot4_F11_4[3] = root4_F48;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F11_4, sumOrroot4_F11_4));
		Constraint or1root4_F11_4 = IntConstraintFactory.arithm(sumOrroot4_F11_4, ">=", 1);
		or1root4_F11_4.setName(Utilities.OR_TC);
		
		Constraint or0root4_F11_4 = IntConstraintFactory.arithm(sumOrroot4_F11_4, "=", 0);
		or0root4_F11_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F11, or1root4_F11_4, or0root4_F11_4);
			
		Constraint mandatoryroot4_F47_root4_F116 = IntConstraintFactory.arithm(root4_F47, "=", root4_F116);
		mandatoryroot4_F47_root4_F116.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F47_root4_F116);
		Constraint optionalroot4_F47_root4_F117 = IntConstraintFactory.arithm(root4_F117, "<=", root4_F47);
		optionalroot4_F47_root4_F117.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F47_root4_F117);
		Constraint optionalroot4_F47_root4_F118 = IntConstraintFactory.arithm(root4_F118, "<=", root4_F47);
		optionalroot4_F47_root4_F118.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F47_root4_F118);
		IntVar sumOrroot4_F47_3 = VariableFactory.enumerated("sumOrroot4_F47", 0, 3, solver); 
		BoolVar[] varsOrroot4_F47_3 = new BoolVar[3];
		varsOrroot4_F47_3[0] = root4_F119;
		varsOrroot4_F47_3[1] = root4_F120;
		varsOrroot4_F47_3[2] = root4_F121;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F47_3, sumOrroot4_F47_3));
		Constraint or1root4_F47_3 = IntConstraintFactory.arithm(sumOrroot4_F47_3, ">=", 1);
		or1root4_F47_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F47_3 = IntConstraintFactory.arithm(sumOrroot4_F47_3, "=", 0);
		or0root4_F47_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F47, or1root4_F47_3, or0root4_F47_3);
			
		Constraint mandatoryroot4_F11_root4_F49 = IntConstraintFactory.arithm(root4_F11, "=", root4_F49);
		mandatoryroot4_F11_root4_F49.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F11_root4_F49);
		Constraint mandatoryroot4_F11_root4_F50 = IntConstraintFactory.arithm(root4_F11, "=", root4_F50);
		mandatoryroot4_F11_root4_F50.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F11_root4_F50);
		Constraint optionalroot4_F50_root4_F79 = IntConstraintFactory.arithm(root4_F79, "<=", root4_F50);
		optionalroot4_F50_root4_F79.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F50_root4_F79);
		Constraint optionalroot4_F50_root4_F80 = IntConstraintFactory.arithm(root4_F80, "<=", root4_F50);
		optionalroot4_F50_root4_F80.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F50_root4_F80);
		Constraint mandatoryroot4_F50_root4_F81 = IntConstraintFactory.arithm(root4_F50, "=", root4_F81);
		mandatoryroot4_F50_root4_F81.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F50_root4_F81);
		Constraint mandatoryroot4_F50_root4_F82 = IntConstraintFactory.arithm(root4_F50, "=", root4_F82);
		mandatoryroot4_F50_root4_F82.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F50_root4_F82);
		Constraint optionalroot4_F7_root4_F12 = IntConstraintFactory.arithm(root4_F12, "<=", root4_F7);
		optionalroot4_F7_root4_F12.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F7_root4_F12);
		Constraint optionalroot4_F12_root4_F130 = IntConstraintFactory.arithm(root4_F130, "<=", root4_F12);
		optionalroot4_F12_root4_F130.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F12_root4_F130);
		Constraint mandatoryroot4_F12_root4_F131 = IntConstraintFactory.arithm(root4_F12, "=", root4_F131);
		mandatoryroot4_F12_root4_F131.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F131);
		Constraint mandatoryroot4_F12_root4_F132 = IntConstraintFactory.arithm(root4_F12, "=", root4_F132);
		mandatoryroot4_F12_root4_F132.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F132);
		Constraint mandatoryroot4_F12_root4_F133 = IntConstraintFactory.arithm(root4_F12, "=", root4_F133);
		mandatoryroot4_F12_root4_F133.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F133);
		Constraint mandatoryroot4_F12_root4_F134 = IntConstraintFactory.arithm(root4_F12, "=", root4_F134);
		mandatoryroot4_F12_root4_F134.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F134);
		Constraint mandatoryroot4_F12_root4_F135 = IntConstraintFactory.arithm(root4_F12, "=", root4_F135);
		mandatoryroot4_F12_root4_F135.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F135);
		Constraint mandatoryroot4_F12_root4_F136 = IntConstraintFactory.arithm(root4_F12, "=", root4_F136);
		mandatoryroot4_F12_root4_F136.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F12_root4_F136);
		IntVar sumOrroot4_F7_2 = VariableFactory.enumerated("sumOrroot4_F7", 0, 2, solver); 
		BoolVar[] varsOrroot4_F7_2 = new BoolVar[2];
		varsOrroot4_F7_2[0] = root4_F13;
		varsOrroot4_F7_2[1] = root4_F14;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F7_2, sumOrroot4_F7_2));
		Constraint or1root4_F7_2 = IntConstraintFactory.arithm(sumOrroot4_F7_2, ">=", 1);
		or1root4_F7_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F7_2 = IntConstraintFactory.arithm(sumOrroot4_F7_2, "=", 0);
		or0root4_F7_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F7, or1root4_F7_2, or0root4_F7_2);
			
		Constraint mandatoryroot4_F7_root4_F15 = IntConstraintFactory.arithm(root4_F7, "=", root4_F15);
		mandatoryroot4_F7_root4_F15.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F7_root4_F15);
		Constraint mandatoryroot4_F7_root4_F16 = IntConstraintFactory.arithm(root4_F7, "=", root4_F16);
		mandatoryroot4_F7_root4_F16.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F7_root4_F16);
		Constraint mandatoryroot4_F7_root4_F17 = IntConstraintFactory.arithm(root4_F7, "=", root4_F17);
		mandatoryroot4_F7_root4_F17.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F7_root4_F17);
		Constraint optionalroot4_F17_root4_F61 = IntConstraintFactory.arithm(root4_F61, "<=", root4_F17);
		optionalroot4_F17_root4_F61.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F61);
		Constraint optionalroot4_F61_root4_F83 = IntConstraintFactory.arithm(root4_F83, "<=", root4_F61);
		optionalroot4_F61_root4_F83.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F61_root4_F83);
		Constraint mandatoryroot4_F61_root4_F84 = IntConstraintFactory.arithm(root4_F61, "=", root4_F84);
		mandatoryroot4_F61_root4_F84.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F84);
		Constraint optionalroot4_F61_root4_F85 = IntConstraintFactory.arithm(root4_F85, "<=", root4_F61);
		optionalroot4_F61_root4_F85.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F61_root4_F85);
		Constraint optionalroot4_F85_root4_F109 = IntConstraintFactory.arithm(root4_F109, "<=", root4_F85);
		optionalroot4_F85_root4_F109.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F85_root4_F109);
		Constraint optionalroot4_F85_root4_F110 = IntConstraintFactory.arithm(root4_F110, "<=", root4_F85);
		optionalroot4_F85_root4_F110.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F85_root4_F110);
		Constraint mandatoryroot4_F85_root4_F111 = IntConstraintFactory.arithm(root4_F85, "=", root4_F111);
		mandatoryroot4_F85_root4_F111.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F85_root4_F111);
		Constraint mandatoryroot4_F85_root4_F112 = IntConstraintFactory.arithm(root4_F85, "=", root4_F112);
		mandatoryroot4_F85_root4_F112.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F85_root4_F112);
		Constraint mandatoryroot4_F85_root4_F113 = IntConstraintFactory.arithm(root4_F85, "=", root4_F113);
		mandatoryroot4_F85_root4_F113.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F85_root4_F113);
		Constraint mandatoryroot4_F85_root4_F114 = IntConstraintFactory.arithm(root4_F85, "=", root4_F114);
		mandatoryroot4_F85_root4_F114.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F85_root4_F114);
		IntVar sumOrroot4_F61_3 = VariableFactory.enumerated("sumOrroot4_F61", 0, 3, solver); 
		BoolVar[] varsOrroot4_F61_3 = new BoolVar[3];
		varsOrroot4_F61_3[0] = root4_F86;
		varsOrroot4_F61_3[1] = root4_F87;
		varsOrroot4_F61_3[2] = root4_F88;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F61_3, sumOrroot4_F61_3));
		Constraint or1root4_F61_3 = IntConstraintFactory.arithm(sumOrroot4_F61_3, ">=", 1);
		or1root4_F61_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F61_3 = IntConstraintFactory.arithm(sumOrroot4_F61_3, "=", 0);
		or0root4_F61_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F61, or1root4_F61_3, or0root4_F61_3);
			
		Constraint mandatoryroot4_F61_root4_F89 = IntConstraintFactory.arithm(root4_F61, "=", root4_F89);
		mandatoryroot4_F61_root4_F89.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F89);
		Constraint mandatoryroot4_F61_root4_F90 = IntConstraintFactory.arithm(root4_F61, "=", root4_F90);
		mandatoryroot4_F61_root4_F90.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F90);
		Constraint mandatoryroot4_F61_root4_F91 = IntConstraintFactory.arithm(root4_F61, "=", root4_F91);
		mandatoryroot4_F61_root4_F91.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F61_root4_F91);
		Constraint mandatoryroot4_F91_root4_F92 = IntConstraintFactory.arithm(root4_F91, "=", root4_F92);
		mandatoryroot4_F91_root4_F92.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F91_root4_F92);
		Constraint mandatoryroot4_F91_root4_F93 = IntConstraintFactory.arithm(root4_F91, "=", root4_F93);
		mandatoryroot4_F91_root4_F93.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F91_root4_F93);
		IntVar sumOrroot4_F91_2 = VariableFactory.enumerated("sumOrroot4_F91", 0, 2, solver); 
		BoolVar[] varsOrroot4_F91_2 = new BoolVar[2];
		varsOrroot4_F91_2[0] = root4_F94;
		varsOrroot4_F91_2[1] = root4_F95;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F91_2, sumOrroot4_F91_2));
		Constraint or1root4_F91_2 = IntConstraintFactory.arithm(sumOrroot4_F91_2, ">=", 1);
		or1root4_F91_2.setName(Utilities.OR_TC);
		
		Constraint or0root4_F91_2 = IntConstraintFactory.arithm(sumOrroot4_F91_2, "=", 0);
		or0root4_F91_2.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F91, or1root4_F91_2, or0root4_F91_2);
			
		Constraint optionalroot4_F17_root4_F62 = IntConstraintFactory.arithm(root4_F62, "<=", root4_F17);
		optionalroot4_F17_root4_F62.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F62);
		Constraint optionalroot4_F17_root4_F63 = IntConstraintFactory.arithm(root4_F63, "<=", root4_F17);
		optionalroot4_F17_root4_F63.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F63);
		Constraint mandatoryroot4_F17_root4_F64 = IntConstraintFactory.arithm(root4_F17, "=", root4_F64);
		mandatoryroot4_F17_root4_F64.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F17_root4_F64);
		Constraint optionalroot4_F17_root4_F65 = IntConstraintFactory.arithm(root4_F65, "<=", root4_F17);
		optionalroot4_F17_root4_F65.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F65);
		Constraint optionalroot4_F17_root4_F66 = IntConstraintFactory.arithm(root4_F66, "<=", root4_F17);
		optionalroot4_F17_root4_F66.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F17_root4_F66);
		Constraint mandatoryroot4_F7_root4_F18 = IntConstraintFactory.arithm(root4_F7, "=", root4_F18);
		mandatoryroot4_F7_root4_F18.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F7_root4_F18);
		Constraint mandatoryroot4_F18_root4_F19 = IntConstraintFactory.arithm(root4_F18, "=", root4_F19);
		mandatoryroot4_F18_root4_F19.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F19);
		Constraint optionalroot4_F18_root4_F20 = IntConstraintFactory.arithm(root4_F20, "<=", root4_F18);
		optionalroot4_F18_root4_F20.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F18_root4_F20);
		Constraint mandatoryroot4_F18_root4_F21 = IntConstraintFactory.arithm(root4_F18, "=", root4_F21);
		mandatoryroot4_F18_root4_F21.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F21);
		Constraint optionalroot4_F21_root4_F115 = IntConstraintFactory.arithm(root4_F115, "<=", root4_F21);
		optionalroot4_F21_root4_F115.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F21_root4_F115);
		Constraint mandatoryroot4_F18_root4_F22 = IntConstraintFactory.arithm(root4_F18, "=", root4_F22);
		mandatoryroot4_F18_root4_F22.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F22);
		IntVar sumOrroot4_F18_4 = VariableFactory.enumerated("sumOrroot4_F18", 0, 2, solver); 
		BoolVar[] varsOrroot4_F18_4 = new BoolVar[2];
		varsOrroot4_F18_4[0] = root4_F23;
		varsOrroot4_F18_4[1] = root4_F24;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F18_4, sumOrroot4_F18_4));
		Constraint or1root4_F18_4 = IntConstraintFactory.arithm(sumOrroot4_F18_4, ">=", 1);
		or1root4_F18_4.setName(Utilities.OR_TC);
		
		Constraint or0root4_F18_4 = IntConstraintFactory.arithm(sumOrroot4_F18_4, "=", 0);
		or0root4_F18_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F18, or1root4_F18_4, or0root4_F18_4);
			
		Constraint mandatoryroot4_F18_root4_F25 = IntConstraintFactory.arithm(root4_F18, "=", root4_F25);
		mandatoryroot4_F18_root4_F25.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F25);
		Constraint mandatoryroot4_F18_root4_F26 = IntConstraintFactory.arithm(root4_F18, "=", root4_F26);
		mandatoryroot4_F18_root4_F26.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F18_root4_F26);
		Constraint mandatoryroot4_F2_root4_F8 = IntConstraintFactory.arithm(root4_F2, "=", root4_F8);
		mandatoryroot4_F2_root4_F8.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F8);
		Constraint mandatoryroot4_F2_root4_F9 = IntConstraintFactory.arithm(root4_F2, "=", root4_F9);
		mandatoryroot4_F2_root4_F9.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F9);
		Constraint mandatoryroot4_F2_root4_F10 = IntConstraintFactory.arithm(root4_F2, "=", root4_F10);
		mandatoryroot4_F2_root4_F10.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F2_root4_F10);
		Constraint mandatoryroot4_F10_root4_F27 = IntConstraintFactory.arithm(root4_F10, "=", root4_F27);
		mandatoryroot4_F10_root4_F27.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F10_root4_F27);
		Constraint mandatoryroot4_F27_root4_F32 = IntConstraintFactory.arithm(root4_F27, "=", root4_F32);
		mandatoryroot4_F27_root4_F32.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F27_root4_F32);
		Constraint optionalroot4_F27_root4_F33 = IntConstraintFactory.arithm(root4_F33, "<=", root4_F27);
		optionalroot4_F27_root4_F33.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F27_root4_F33);
		Constraint mandatoryroot4_F33_root4_F51 = IntConstraintFactory.arithm(root4_F33, "=", root4_F51);
		mandatoryroot4_F33_root4_F51.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F33_root4_F51);
		Constraint optionalroot4_F33_root4_F52 = IntConstraintFactory.arithm(root4_F52, "<=", root4_F33);
		optionalroot4_F33_root4_F52.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F33_root4_F52);
		Constraint optionalroot4_F33_root4_F53 = IntConstraintFactory.arithm(root4_F53, "<=", root4_F33);
		optionalroot4_F33_root4_F53.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F33_root4_F53);
		IntVar sumOrroot4_F33_3 = VariableFactory.enumerated("sumOrroot4_F33", 0, 3, solver); 
		BoolVar[] varsOrroot4_F33_3 = new BoolVar[3];
		varsOrroot4_F33_3[0] = root4_F54;
		varsOrroot4_F33_3[1] = root4_F55;
		varsOrroot4_F33_3[2] = root4_F56;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F33_3, sumOrroot4_F33_3));
		Constraint or1root4_F33_3 = IntConstraintFactory.arithm(sumOrroot4_F33_3, ">=", 1);
		or1root4_F33_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F33_3 = IntConstraintFactory.arithm(sumOrroot4_F33_3, "=", 0);
		or0root4_F33_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F33, or1root4_F33_3, or0root4_F33_3);
			
		Constraint mandatoryroot4_F33_root4_F57 = IntConstraintFactory.arithm(root4_F33, "=", root4_F57);
		mandatoryroot4_F33_root4_F57.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F33_root4_F57);
		Constraint mandatoryroot4_F33_root4_F58 = IntConstraintFactory.arithm(root4_F33, "=", root4_F58);
		mandatoryroot4_F33_root4_F58.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F33_root4_F58);
		Constraint optionalroot4_F58_root4_F67 = IntConstraintFactory.arithm(root4_F67, "<=", root4_F58);
		optionalroot4_F58_root4_F67.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F58_root4_F67);
		Constraint mandatoryroot4_F58_root4_F68 = IntConstraintFactory.arithm(root4_F58, "=", root4_F68);
		mandatoryroot4_F58_root4_F68.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F58_root4_F68);
		Constraint mandatoryroot4_F58_root4_F69 = IntConstraintFactory.arithm(root4_F58, "=", root4_F69);
		mandatoryroot4_F58_root4_F69.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F58_root4_F69);
		Constraint mandatoryroot4_F33_root4_F59 = IntConstraintFactory.arithm(root4_F33, "=", root4_F59);
		mandatoryroot4_F33_root4_F59.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F33_root4_F59);
		Constraint mandatoryroot4_F33_root4_F60 = IntConstraintFactory.arithm(root4_F33, "=", root4_F60);
		mandatoryroot4_F33_root4_F60.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F33_root4_F60);
		Constraint mandatoryroot4_F60_root4_F140 = IntConstraintFactory.arithm(root4_F60, "=", root4_F140);
		mandatoryroot4_F60_root4_F140.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F60_root4_F140);
		Constraint optionalroot4_F60_root4_F141 = IntConstraintFactory.arithm(root4_F141, "<=", root4_F60);
		optionalroot4_F60_root4_F141.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F60_root4_F141);
		Constraint mandatoryroot4_F60_root4_F142 = IntConstraintFactory.arithm(root4_F60, "=", root4_F142);
		mandatoryroot4_F60_root4_F142.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F60_root4_F142);
		Constraint mandatoryroot4_F60_root4_F143 = IntConstraintFactory.arithm(root4_F60, "=", root4_F143);
		mandatoryroot4_F60_root4_F143.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F60_root4_F143);
		Constraint optionalroot4_F27_root4_F34 = IntConstraintFactory.arithm(root4_F34, "<=", root4_F27);
		optionalroot4_F27_root4_F34.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F27_root4_F34);
		Constraint mandatoryroot4_F27_root4_F35 = IntConstraintFactory.arithm(root4_F27, "=", root4_F35);
		mandatoryroot4_F27_root4_F35.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F27_root4_F35);
		Constraint mandatoryroot4_F35_root4_F105 = IntConstraintFactory.arithm(root4_F35, "=", root4_F105);
		mandatoryroot4_F35_root4_F105.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F35_root4_F105);
		Constraint optionalroot4_F105_root4_F159 = IntConstraintFactory.arithm(root4_F159, "<=", root4_F105);
		optionalroot4_F105_root4_F159.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F105_root4_F159);
		Constraint optionalroot4_F35_root4_F106 = IntConstraintFactory.arithm(root4_F106, "<=", root4_F35);
		optionalroot4_F35_root4_F106.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F35_root4_F106);
		Constraint mandatoryroot4_F27_root4_F36 = IntConstraintFactory.arithm(root4_F27, "=", root4_F36);
		mandatoryroot4_F27_root4_F36.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F27_root4_F36);
		IntVar sumOrroot4_F27_5 = VariableFactory.enumerated("sumOrroot4_F27", 0, 2, solver); 
		BoolVar[] varsOrroot4_F27_5 = new BoolVar[2];
		varsOrroot4_F27_5[0] = root4_F37;
		varsOrroot4_F27_5[1] = root4_F38;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F27_5, sumOrroot4_F27_5));
		Constraint or1root4_F27_5 = IntConstraintFactory.arithm(sumOrroot4_F27_5, ">=", 1);
		or1root4_F27_5.setName(Utilities.OR_TC);
		
		Constraint or0root4_F27_5 = IntConstraintFactory.arithm(sumOrroot4_F27_5, "=", 0);
		or0root4_F27_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F27, or1root4_F27_5, or0root4_F27_5);
			
		Constraint optionalroot4_F38_root4_F70 = IntConstraintFactory.arithm(root4_F70, "<=", root4_F38);
		optionalroot4_F38_root4_F70.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F38_root4_F70);
		Constraint mandatoryroot4_F38_root4_F71 = IntConstraintFactory.arithm(root4_F38, "=", root4_F71);
		mandatoryroot4_F38_root4_F71.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F38_root4_F71);
		Constraint optionalroot4_F38_root4_F72 = IntConstraintFactory.arithm(root4_F72, "<=", root4_F38);
		optionalroot4_F38_root4_F72.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F38_root4_F72);
		Constraint optionalroot4_F38_root4_F73 = IntConstraintFactory.arithm(root4_F73, "<=", root4_F38);
		optionalroot4_F38_root4_F73.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F38_root4_F73);
		Constraint mandatoryroot4_F38_root4_F74 = IntConstraintFactory.arithm(root4_F38, "=", root4_F74);
		mandatoryroot4_F38_root4_F74.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F38_root4_F74);
		IntVar sumOrroot4_F38_5 = VariableFactory.enumerated("sumOrroot4_F38", 0, 2, solver); 
		BoolVar[] varsOrroot4_F38_5 = new BoolVar[2];
		varsOrroot4_F38_5[0] = root4_F75;
		varsOrroot4_F38_5[1] = root4_F76;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F38_5, sumOrroot4_F38_5));
		Constraint or1root4_F38_5 = IntConstraintFactory.arithm(sumOrroot4_F38_5, ">=", 1);
		or1root4_F38_5.setName(Utilities.OR_TC);
		
		Constraint or0root4_F38_5 = IntConstraintFactory.arithm(sumOrroot4_F38_5, "=", 0);
		or0root4_F38_5.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F38, or1root4_F38_5, or0root4_F38_5);
			
		Constraint mandatoryroot4_F76_root4_F144 = IntConstraintFactory.arithm(root4_F76, "=", root4_F144);
		mandatoryroot4_F76_root4_F144.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F76_root4_F144);
		Constraint optionalroot4_F76_root4_F145 = IntConstraintFactory.arithm(root4_F145, "<=", root4_F76);
		optionalroot4_F76_root4_F145.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F76_root4_F145);
		Constraint optionalroot4_F76_root4_F146 = IntConstraintFactory.arithm(root4_F146, "<=", root4_F76);
		optionalroot4_F76_root4_F146.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F76_root4_F146);
		Constraint mandatoryroot4_F76_root4_F147 = IntConstraintFactory.arithm(root4_F76, "=", root4_F147);
		mandatoryroot4_F76_root4_F147.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F76_root4_F147);
		Constraint optionalroot4_F76_root4_F148 = IntConstraintFactory.arithm(root4_F148, "<=", root4_F76);
		optionalroot4_F76_root4_F148.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F76_root4_F148);
		Constraint mandatoryroot4_F76_root4_F149 = IntConstraintFactory.arithm(root4_F76, "=", root4_F149);
		mandatoryroot4_F76_root4_F149.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F76_root4_F149);
		Constraint optionalroot4_F76_root4_F150 = IntConstraintFactory.arithm(root4_F150, "<=", root4_F76);
		optionalroot4_F76_root4_F150.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F76_root4_F150);
		IntVar sumOrroot4_F76_7 = VariableFactory.enumerated("sumOrroot4_F76", 0, 2, solver); 
		BoolVar[] varsOrroot4_F76_7 = new BoolVar[2];
		varsOrroot4_F76_7[0] = root4_F151;
		varsOrroot4_F76_7[1] = root4_F152;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F76_7, sumOrroot4_F76_7));
		Constraint or1root4_F76_7 = IntConstraintFactory.arithm(sumOrroot4_F76_7, ">=", 1);
		or1root4_F76_7.setName(Utilities.OR_TC);
		
		Constraint or0root4_F76_7 = IntConstraintFactory.arithm(sumOrroot4_F76_7, "=", 0);
		or0root4_F76_7.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F76, or1root4_F76_7, or0root4_F76_7);
			
		IntVar sumOrroot4_F38_6 = VariableFactory.enumerated("sumOrroot4_F38", 0, 2, solver); 
		BoolVar[] varsOrroot4_F38_6 = new BoolVar[2];
		varsOrroot4_F38_6[0] = root4_F77;
		varsOrroot4_F38_6[1] = root4_F78;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F38_6, sumOrroot4_F38_6));
		Constraint or1root4_F38_6 = IntConstraintFactory.arithm(sumOrroot4_F38_6, ">=", 1);
		or1root4_F38_6.setName(Utilities.OR_TC);
		
		Constraint or0root4_F38_6 = IntConstraintFactory.arithm(sumOrroot4_F38_6, "=", 0);
		or0root4_F38_6.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F38, or1root4_F38_6, or0root4_F38_6);
			
		Constraint mandatoryroot4_F78_root4_F107 = IntConstraintFactory.arithm(root4_F78, "=", root4_F107);
		mandatoryroot4_F78_root4_F107.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F78_root4_F107);
		Constraint optionalroot4_F78_root4_F108 = IntConstraintFactory.arithm(root4_F108, "<=", root4_F78);
		optionalroot4_F78_root4_F108.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F78_root4_F108);
		Constraint mandatoryroot4_F27_root4_F39 = IntConstraintFactory.arithm(root4_F27, "=", root4_F39);
		mandatoryroot4_F27_root4_F39.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F27_root4_F39);
		Constraint mandatoryroot4_F27_root4_F40 = IntConstraintFactory.arithm(root4_F27, "=", root4_F40);
		mandatoryroot4_F27_root4_F40.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F27_root4_F40);
		Constraint optionalroot4_F10_root4_F28 = IntConstraintFactory.arithm(root4_F28, "<=", root4_F10);
		optionalroot4_F10_root4_F28.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F10_root4_F28);
		Constraint mandatoryroot4_F28_root4_F122 = IntConstraintFactory.arithm(root4_F28, "=", root4_F122);
		mandatoryroot4_F28_root4_F122.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F28_root4_F122);
		Constraint optionalroot4_F28_root4_F123 = IntConstraintFactory.arithm(root4_F123, "<=", root4_F28);
		optionalroot4_F28_root4_F123.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F28_root4_F123);
		Constraint mandatoryroot4_F123_root4_F153 = IntConstraintFactory.arithm(root4_F123, "=", root4_F153);
		mandatoryroot4_F123_root4_F153.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F123_root4_F153);
		Constraint mandatoryroot4_F123_root4_F154 = IntConstraintFactory.arithm(root4_F123, "=", root4_F154);
		mandatoryroot4_F123_root4_F154.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F123_root4_F154);
		Constraint mandatoryroot4_F123_root4_F155 = IntConstraintFactory.arithm(root4_F123, "=", root4_F155);
		mandatoryroot4_F123_root4_F155.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F123_root4_F155);
		Constraint optionalroot4_F28_root4_F124 = IntConstraintFactory.arithm(root4_F124, "<=", root4_F28);
		optionalroot4_F28_root4_F124.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F28_root4_F124);
		Constraint mandatoryroot4_F28_root4_F125 = IntConstraintFactory.arithm(root4_F28, "=", root4_F125);
		mandatoryroot4_F28_root4_F125.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F28_root4_F125);
		IntVar sumOrroot4_F28_4 = VariableFactory.enumerated("sumOrroot4_F28", 0, 2, solver); 
		BoolVar[] varsOrroot4_F28_4 = new BoolVar[2];
		varsOrroot4_F28_4[0] = root4_F126;
		varsOrroot4_F28_4[1] = root4_F127;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F28_4, sumOrroot4_F28_4));
		Constraint or1root4_F28_4 = IntConstraintFactory.arithm(sumOrroot4_F28_4, ">=", 1);
		or1root4_F28_4.setName(Utilities.OR_TC);
		
		Constraint or0root4_F28_4 = IntConstraintFactory.arithm(sumOrroot4_F28_4, "=", 0);
		or0root4_F28_4.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F28, or1root4_F28_4, or0root4_F28_4);
			
		Constraint mandatoryroot4_F28_root4_F128 = IntConstraintFactory.arithm(root4_F28, "=", root4_F128);
		mandatoryroot4_F28_root4_F128.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F28_root4_F128);
		Constraint mandatoryroot4_F128_root4_F137 = IntConstraintFactory.arithm(root4_F128, "=", root4_F137);
		mandatoryroot4_F128_root4_F137.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F128_root4_F137);
		IntVar sumOrroot4_F128_1 = VariableFactory.enumerated("sumOrroot4_F128", 0, 2, solver); 
		BoolVar[] varsOrroot4_F128_1 = new BoolVar[2];
		varsOrroot4_F128_1[0] = root4_F138;
		varsOrroot4_F128_1[1] = root4_F139;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F128_1, sumOrroot4_F128_1));
		Constraint or1root4_F128_1 = IntConstraintFactory.arithm(sumOrroot4_F128_1, ">=", 1);
		or1root4_F128_1.setName(Utilities.OR_TC);
		
		Constraint or0root4_F128_1 = IntConstraintFactory.arithm(sumOrroot4_F128_1, "=", 0);
		or0root4_F128_1.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F128, or1root4_F128_1, or0root4_F128_1);
			
		Constraint mandatoryroot4_F28_root4_F129 = IntConstraintFactory.arithm(root4_F28, "=", root4_F129);
		mandatoryroot4_F28_root4_F129.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F28_root4_F129);
		Constraint optionalroot4_F10_root4_F29 = IntConstraintFactory.arithm(root4_F29, "<=", root4_F10);
		optionalroot4_F10_root4_F29.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F10_root4_F29);
		Constraint optionalroot4_F29_root4_F97 = IntConstraintFactory.arithm(root4_F97, "<=", root4_F29);
		optionalroot4_F29_root4_F97.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F29_root4_F97);
		Constraint mandatoryroot4_F29_root4_F98 = IntConstraintFactory.arithm(root4_F29, "=", root4_F98);
		mandatoryroot4_F29_root4_F98.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F29_root4_F98);
		Constraint mandatoryroot4_F29_root4_F99 = IntConstraintFactory.arithm(root4_F29, "=", root4_F99);
		mandatoryroot4_F29_root4_F99.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F29_root4_F99);
		Constraint mandatoryroot4_F99_root4_F100 = IntConstraintFactory.arithm(root4_F99, "=", root4_F100);
		mandatoryroot4_F99_root4_F100.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F99_root4_F100);
		Constraint optionalroot4_F99_root4_F101 = IntConstraintFactory.arithm(root4_F101, "<=", root4_F99);
		optionalroot4_F99_root4_F101.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F99_root4_F101);
		Constraint mandatoryroot4_F99_root4_F102 = IntConstraintFactory.arithm(root4_F99, "=", root4_F102);
		mandatoryroot4_F99_root4_F102.setName(Utilities.MANDATORY_TC);
		solver.post(mandatoryroot4_F99_root4_F102);
		IntVar sumOrroot4_F99_3 = VariableFactory.enumerated("sumOrroot4_F99", 0, 2, solver); 
		BoolVar[] varsOrroot4_F99_3 = new BoolVar[2];
		varsOrroot4_F99_3[0] = root4_F103;
		varsOrroot4_F99_3[1] = root4_F104;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F99_3, sumOrroot4_F99_3));
		Constraint or1root4_F99_3 = IntConstraintFactory.arithm(sumOrroot4_F99_3, ">=", 1);
		or1root4_F99_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F99_3 = IntConstraintFactory.arithm(sumOrroot4_F99_3, "=", 0);
		or0root4_F99_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F99, or1root4_F99_3, or0root4_F99_3);
			
		IntVar sumOrroot4_F10_3 = VariableFactory.enumerated("sumOrroot4_F10", 0, 2, solver); 
		BoolVar[] varsOrroot4_F10_3 = new BoolVar[2];
		varsOrroot4_F10_3[0] = root4_F30;
		varsOrroot4_F10_3[1] = root4_F31;
		solver.post(IntConstraintFactory.sum(varsOrroot4_F10_3, sumOrroot4_F10_3));
		Constraint or1root4_F10_3 = IntConstraintFactory.arithm(sumOrroot4_F10_3, ">=", 1);
		or1root4_F10_3.setName(Utilities.OR_TC);
		
		Constraint or0root4_F10_3 = IntConstraintFactory.arithm(sumOrroot4_F10_3, "=", 0);
		or0root4_F10_3.setName(Utilities.OR_TC);
		LogicalConstraintFactory.ifThenElse(root4_F10, or1root4_F10_3, or0root4_F10_3);
			
		Constraint optionalroot4_F31_root4_F96 = IntConstraintFactory.arithm(root4_F96, "<=", root4_F31);
		optionalroot4_F31_root4_F96.setName(Utilities.OPTIONAL_TC);
		solver.post(optionalroot4_F31_root4_F96);
		
		//--------------------------------------------
		//Cross-Tree Constraints
		//--------------------------------------------
		Constraint requiresroot1_F139_root1_F89 = IntConstraintFactory.arithm(root1_F139, "<=", root1_F89);
		requiresroot1_F139_root1_F89.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F139_root1_F89);
		Constraint requiresroot1_F12_root1_F75 = IntConstraintFactory.arithm(root1_F12, "<=", root1_F75);
		requiresroot1_F12_root1_F75.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F12_root1_F75);
		Constraint excludesroot1_F25_root1_F25 = IntConstraintFactory.arithm(root1_F25, "+", root1_F11, "<=", 1);
		excludesroot1_F25_root1_F25.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F25_root1_F25);
		Constraint requiresroot1_F116_root1_F95 = IntConstraintFactory.arithm(root1_F116, "<=", root1_F95);
		requiresroot1_F116_root1_F95.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F116_root1_F95);
		Constraint excludesroot1_F129_root1_F129 = IntConstraintFactory.arithm(root1_F129, "+", root1_F57, "<=", 1);
		excludesroot1_F129_root1_F129.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F129_root1_F129);
		Constraint excludesroot1_F156_root1_F156 = IntConstraintFactory.arithm(root1_F156, "+", root1_F114, "<=", 1);
		excludesroot1_F156_root1_F156.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F156_root1_F156);
		Constraint requiresroot1_F67_root1_F51 = IntConstraintFactory.arithm(root1_F67, "<=", root1_F51);
		requiresroot1_F67_root1_F51.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F67_root1_F51);
		Constraint excludesroot1_F8_root1_F8 = IntConstraintFactory.arithm(root1_F8, "+", root1_F116, "<=", 1);
		excludesroot1_F8_root1_F8.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F8_root1_F8);
		Constraint requiresroot1_F26_root1_F101 = IntConstraintFactory.arithm(root1_F26, "<=", root1_F101);
		requiresroot1_F26_root1_F101.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F26_root1_F101);
		Constraint excludesroot1_F143_root1_F143 = IntConstraintFactory.arithm(root1_F143, "+", root1_F51, "<=", 1);
		excludesroot1_F143_root1_F143.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F143_root1_F143);
		Constraint requiresroot1_F106_root1_F91 = IntConstraintFactory.arithm(root1_F106, "<=", root1_F91);
		requiresroot1_F106_root1_F91.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F106_root1_F91);
		Constraint requiresroot1_F139_root1_F147 = IntConstraintFactory.arithm(root1_F139, "<=", root1_F147);
		requiresroot1_F139_root1_F147.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot1_F139_root1_F147);
		Constraint excludesroot1_F19_root1_F19 = IntConstraintFactory.arithm(root1_F19, "+", root1_F110, "<=", 1);
		excludesroot1_F19_root1_F19.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F19_root1_F19);
		Constraint excludesroot1_F75_root1_F75 = IntConstraintFactory.arithm(root1_F75, "+", root1_F108, "<=", 1);
		excludesroot1_F75_root1_F75.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F75_root1_F75);
		Constraint excludesroot1_F134_root1_F134 = IntConstraintFactory.arithm(root1_F134, "+", root1_F113, "<=", 1);
		excludesroot1_F134_root1_F134.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F134_root1_F134);
		Constraint excludesroot1_F29_root1_F29 = IntConstraintFactory.arithm(root1_F29, "+", root1_F135, "<=", 1);
		excludesroot1_F29_root1_F29.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot1_F29_root1_F29);
		Constraint requiresroot2_F113_root2_F86 = IntConstraintFactory.arithm(root2_F113, "<=", root2_F86);
		requiresroot2_F113_root2_F86.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F113_root2_F86);
		Constraint excludesroot2_F72_root2_F72 = IntConstraintFactory.arithm(root2_F72, "+", root2_F120, "<=", 1);
		excludesroot2_F72_root2_F72.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F72_root2_F72);
		Constraint excludesroot2_F79_root2_F79 = IntConstraintFactory.arithm(root2_F79, "+", root2_F157, "<=", 1);
		excludesroot2_F79_root2_F79.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F79_root2_F79);
		Constraint requiresroot2_F79_root2_F18 = IntConstraintFactory.arithm(root2_F79, "<=", root2_F18);
		requiresroot2_F79_root2_F18.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F79_root2_F18);
		Constraint requiresroot2_F13_root2_F55 = IntConstraintFactory.arithm(root2_F13, "<=", root2_F55);
		requiresroot2_F13_root2_F55.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F13_root2_F55);
		Constraint requiresroot2_F120_root2_F140 = IntConstraintFactory.arithm(root2_F120, "<=", root2_F140);
		requiresroot2_F120_root2_F140.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F120_root2_F140);
		Constraint requiresroot2_F125_root2_F158 = IntConstraintFactory.arithm(root2_F125, "<=", root2_F158);
		requiresroot2_F125_root2_F158.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F125_root2_F158);
		Constraint requiresroot2_F2_root2_F106 = IntConstraintFactory.arithm(root2_F2, "<=", root2_F106);
		requiresroot2_F2_root2_F106.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F2_root2_F106);
		Constraint excludesroot2_F84_root2_F84 = IntConstraintFactory.arithm(root2_F84, "+", root2_F41, "<=", 1);
		excludesroot2_F84_root2_F84.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F84_root2_F84);
		Constraint excludesroot2_F82_root2_F82 = IntConstraintFactory.arithm(root2_F82, "+", root2_F44, "<=", 1);
		excludesroot2_F82_root2_F82.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F82_root2_F82);
		Constraint requiresroot2_F92_root2_F82 = IntConstraintFactory.arithm(root2_F92, "<=", root2_F82);
		requiresroot2_F92_root2_F82.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F92_root2_F82);
		Constraint requiresroot2_F108_root2_F104 = IntConstraintFactory.arithm(root2_F108, "<=", root2_F104);
		requiresroot2_F108_root2_F104.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F108_root2_F104);
		Constraint requiresroot2_F21_root2_F133 = IntConstraintFactory.arithm(root2_F21, "<=", root2_F133);
		requiresroot2_F21_root2_F133.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F21_root2_F133);
		Constraint requiresroot2_F52_root2_F1 = IntConstraintFactory.arithm(root2_F52, "<=", root2_F1);
		requiresroot2_F52_root2_F1.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F52_root2_F1);
		Constraint excludesroot2_F87_root2_F87 = IntConstraintFactory.arithm(root2_F87, "+", root2_F19, "<=", 1);
		excludesroot2_F87_root2_F87.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot2_F87_root2_F87);
		Constraint requiresroot2_F105_root2_F152 = IntConstraintFactory.arithm(root2_F105, "<=", root2_F152);
		requiresroot2_F105_root2_F152.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot2_F105_root2_F152);
		Constraint excludesroot3_F91_root3_F91 = IntConstraintFactory.arithm(root3_F91, "+", root3_F71, "<=", 1);
		excludesroot3_F91_root3_F91.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F91_root3_F91);
		Constraint requiresroot3_F127_root3_F53 = IntConstraintFactory.arithm(root3_F127, "<=", root3_F53);
		requiresroot3_F127_root3_F53.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F127_root3_F53);
		Constraint excludesroot3_F61_root3_F61 = IntConstraintFactory.arithm(root3_F61, "+", root3_F117, "<=", 1);
		excludesroot3_F61_root3_F61.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F61_root3_F61);
		Constraint excludesroot3_F96_root3_F96 = IntConstraintFactory.arithm(root3_F96, "+", root3_F95, "<=", 1);
		excludesroot3_F96_root3_F96.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F96_root3_F96);
		Constraint excludesroot3_F76_root3_F76 = IntConstraintFactory.arithm(root3_F76, "+", root3_F66, "<=", 1);
		excludesroot3_F76_root3_F76.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F76_root3_F76);
		Constraint excludesroot3_F154_root3_F154 = IntConstraintFactory.arithm(root3_F154, "+", root3_F131, "<=", 1);
		excludesroot3_F154_root3_F154.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F154_root3_F154);
		Constraint excludesroot3_F62_root3_F62 = IntConstraintFactory.arithm(root3_F62, "+", root3_F74, "<=", 1);
		excludesroot3_F62_root3_F62.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F62_root3_F62);
		Constraint requiresroot3_F155_root3_F84 = IntConstraintFactory.arithm(root3_F155, "<=", root3_F84);
		requiresroot3_F155_root3_F84.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F155_root3_F84);
		Constraint requiresroot3_F138_root3_F44 = IntConstraintFactory.arithm(root3_F138, "<=", root3_F44);
		requiresroot3_F138_root3_F44.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F138_root3_F44);
		Constraint excludesroot3_F148_root3_F148 = IntConstraintFactory.arithm(root3_F148, "+", root3_F34, "<=", 1);
		excludesroot3_F148_root3_F148.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F148_root3_F148);
		Constraint requiresroot3_F72_root3_F102 = IntConstraintFactory.arithm(root3_F72, "<=", root3_F102);
		requiresroot3_F72_root3_F102.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F72_root3_F102);
		Constraint requiresroot3_F138_root3_F108 = IntConstraintFactory.arithm(root3_F138, "<=", root3_F108);
		requiresroot3_F138_root3_F108.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F138_root3_F108);
		Constraint excludesroot3_F3_root3_F3 = IntConstraintFactory.arithm(root3_F3, "+", root3_F150, "<=", 1);
		excludesroot3_F3_root3_F3.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F3_root3_F3);
		Constraint excludesroot3_F52_root3_F52 = IntConstraintFactory.arithm(root3_F52, "+", root3_F144, "<=", 1);
		excludesroot3_F52_root3_F52.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F52_root3_F52);
		Constraint excludesroot3_F151_root3_F151 = IntConstraintFactory.arithm(root3_F151, "+", root3_F48, "<=", 1);
		excludesroot3_F151_root3_F151.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot3_F151_root3_F151);
		Constraint requiresroot3_F124_root3_F58 = IntConstraintFactory.arithm(root3_F124, "<=", root3_F58);
		requiresroot3_F124_root3_F58.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot3_F124_root3_F58);
		Constraint excludesroot4_F4_root4_F4 = IntConstraintFactory.arithm(root4_F4, "+", root4_F143, "<=", 1);
		excludesroot4_F4_root4_F4.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F4_root4_F4);
		Constraint excludesroot4_F158_root4_F158 = IntConstraintFactory.arithm(root4_F158, "+", root4_F61, "<=", 1);
		excludesroot4_F158_root4_F158.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F158_root4_F158);
		Constraint requiresroot4_F81_root4_F125 = IntConstraintFactory.arithm(root4_F81, "<=", root4_F125);
		requiresroot4_F81_root4_F125.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F81_root4_F125);
		Constraint excludesroot4_F157_root4_F157 = IntConstraintFactory.arithm(root4_F157, "+", root4_F96, "<=", 1);
		excludesroot4_F157_root4_F157.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F157_root4_F157);
		Constraint excludesroot4_F79_root4_F79 = IntConstraintFactory.arithm(root4_F79, "+", root4_F10, "<=", 1);
		excludesroot4_F79_root4_F79.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F79_root4_F79);
		Constraint requiresroot4_F126_root4_F77 = IntConstraintFactory.arithm(root4_F126, "<=", root4_F77);
		requiresroot4_F126_root4_F77.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F126_root4_F77);
		Constraint requiresroot4_F71_root4_F48 = IntConstraintFactory.arithm(root4_F71, "<=", root4_F48);
		requiresroot4_F71_root4_F48.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F71_root4_F48);
		Constraint requiresroot4_F127_root4_F88 = IntConstraintFactory.arithm(root4_F127, "<=", root4_F88);
		requiresroot4_F127_root4_F88.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F127_root4_F88);
		Constraint requiresroot4_F132_root4_F156 = IntConstraintFactory.arithm(root4_F132, "<=", root4_F156);
		requiresroot4_F132_root4_F156.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F132_root4_F156);
		Constraint requiresroot4_F30_root4_F27 = IntConstraintFactory.arithm(root4_F30, "<=", root4_F27);
		requiresroot4_F30_root4_F27.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F30_root4_F27);
		Constraint excludesroot4_F74_root4_F74 = IntConstraintFactory.arithm(root4_F74, "+", root4_F44, "<=", 1);
		excludesroot4_F74_root4_F74.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F74_root4_F74);
		Constraint requiresroot4_F70_root4_F139 = IntConstraintFactory.arithm(root4_F70, "<=", root4_F139);
		requiresroot4_F70_root4_F139.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F70_root4_F139);
		Constraint requiresroot4_F12_root4_F6 = IntConstraintFactory.arithm(root4_F12, "<=", root4_F6);
		requiresroot4_F12_root4_F6.setName(Utilities.REQUIRES_CTC);
		solver.post(requiresroot4_F12_root4_F6);
		Constraint excludesroot4_F127_root4_F127 = IntConstraintFactory.arithm(root4_F127, "+", root4_F16, "<=", 1);
		excludesroot4_F127_root4_F127.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F127_root4_F127);
		Constraint excludesroot4_F40_root4_F40 = IntConstraintFactory.arithm(root4_F40, "+", root4_F131, "<=", 1);
		excludesroot4_F40_root4_F40.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F40_root4_F40);
		Constraint excludesroot4_F22_root4_F22 = IntConstraintFactory.arithm(root4_F22, "+", root4_F65, "<=", 1);
		excludesroot4_F22_root4_F22.setName(Utilities.EXCLUDES_CTC);
		solver.post(excludesroot4_F22_root4_F22);
		
		//--------------------------------------------
		//Cross-Model Constraints
		//--------------------------------------------
		Constraint excludesroot2_F154_root2_F154 = IntConstraintFactory.arithm(root2_F154, "+", root4_F152, "<=", 1);
		excludesroot2_F154_root2_F154.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F154_root2_F154);
		Constraint excludesroot4_F80_root4_F80 = IntConstraintFactory.arithm(root4_F80, "+", root1_F140, "<=", 1);
		excludesroot4_F80_root4_F80.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F80_root4_F80);
		Constraint requiresroot2_F55_root3_F152 = IntConstraintFactory.arithm(root2_F55, "<=", root3_F152);
		requiresroot2_F55_root3_F152.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F55_root3_F152);
		Constraint excludesroot4_F143_root4_F143 = IntConstraintFactory.arithm(root4_F143, "+", root3_F10, "<=", 1);
		excludesroot4_F143_root4_F143.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F143_root4_F143);
		Constraint excludesroot2_F131_root2_F131 = IntConstraintFactory.arithm(root2_F131, "+", root3_F17, "<=", 1);
		excludesroot2_F131_root2_F131.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F131_root2_F131);
		Constraint requiresroot2_F14_root1_F137 = IntConstraintFactory.arithm(root2_F14, "<=", root1_F137);
		requiresroot2_F14_root1_F137.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F14_root1_F137);
		Constraint excludesroot1_F101_root1_F101 = IntConstraintFactory.arithm(root1_F101, "+", root3_F139, "<=", 1);
		excludesroot1_F101_root1_F101.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot1_F101_root1_F101);
		Constraint requiresroot4_F70_root1_F93 = IntConstraintFactory.arithm(root4_F70, "<=", root1_F93);
		requiresroot4_F70_root1_F93.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F70_root1_F93);
		Constraint requiresroot2_F99_root3_F151 = IntConstraintFactory.arithm(root2_F99, "<=", root3_F151);
		requiresroot2_F99_root3_F151.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F99_root3_F151);
		Constraint requiresroot2_F87_root4_F150 = IntConstraintFactory.arithm(root2_F87, "<=", root4_F150);
		requiresroot2_F87_root4_F150.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F87_root4_F150);
		Constraint requiresroot2_F7_root1_F15 = IntConstraintFactory.arithm(root2_F7, "<=", root1_F15);
		requiresroot2_F7_root1_F15.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F7_root1_F15);
		Constraint requiresroot4_F152_root3_F67 = IntConstraintFactory.arithm(root4_F152, "<=", root3_F67);
		requiresroot4_F152_root3_F67.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F152_root3_F67);
		Constraint requiresroot3_F100_root1_F53 = IntConstraintFactory.arithm(root3_F100, "<=", root1_F53);
		requiresroot3_F100_root1_F53.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot3_F100_root1_F53);
		Constraint excludesroot3_F35_root3_F35 = IntConstraintFactory.arithm(root3_F35, "+", root1_F20, "<=", 1);
		excludesroot3_F35_root3_F35.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F35_root3_F35);
		Constraint requiresroot1_F70_root3_F155 = IntConstraintFactory.arithm(root1_F70, "<=", root3_F155);
		requiresroot1_F70_root3_F155.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot1_F70_root3_F155);
		Constraint excludesroot4_F109_root4_F109 = IntConstraintFactory.arithm(root4_F109, "+", root1_F93, "<=", 1);
		excludesroot4_F109_root4_F109.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F109_root4_F109);
		Constraint requiresroot4_F5_root3_F6 = IntConstraintFactory.arithm(root4_F5, "<=", root3_F6);
		requiresroot4_F5_root3_F6.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot4_F5_root3_F6);
		Constraint excludesroot4_F133_root4_F133 = IntConstraintFactory.arithm(root4_F133, "+", root3_F139, "<=", 1);
		excludesroot4_F133_root4_F133.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F133_root4_F133);
		Constraint requiresroot2_F25_root3_F22 = IntConstraintFactory.arithm(root2_F25, "<=", root3_F22);
		requiresroot2_F25_root3_F22.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F25_root3_F22);
		Constraint excludesroot3_F110_root3_F110 = IntConstraintFactory.arithm(root3_F110, "+", root1_F52, "<=", 1);
		excludesroot3_F110_root3_F110.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F110_root3_F110);
		Constraint excludesroot3_F121_root3_F121 = IntConstraintFactory.arithm(root3_F121, "+", root1_F60, "<=", 1);
		excludesroot3_F121_root3_F121.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F121_root3_F121);
		Constraint excludesroot2_F137_root2_F137 = IntConstraintFactory.arithm(root2_F137, "+", root1_F6, "<=", 1);
		excludesroot2_F137_root2_F137.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F137_root2_F137);
		Constraint excludesroot2_F155_root2_F155 = IntConstraintFactory.arithm(root2_F155, "+", root4_F23, "<=", 1);
		excludesroot2_F155_root2_F155.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F155_root2_F155);
		Constraint excludesroot2_F9_root2_F9 = IntConstraintFactory.arithm(root2_F9, "+", root1_F69, "<=", 1);
		excludesroot2_F9_root2_F9.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot2_F9_root2_F9);
		Constraint excludesroot4_F117_root4_F117 = IntConstraintFactory.arithm(root4_F117, "+", root3_F94, "<=", 1);
		excludesroot4_F117_root4_F117.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F117_root4_F117);
		Constraint excludesroot1_F35_root1_F35 = IntConstraintFactory.arithm(root1_F35, "+", root3_F66, "<=", 1);
		excludesroot1_F35_root1_F35.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot1_F35_root1_F35);
		Constraint requiresroot3_F32_root4_F156 = IntConstraintFactory.arithm(root3_F32, "<=", root4_F156);
		requiresroot3_F32_root4_F156.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot3_F32_root4_F156);
		Constraint excludesroot3_F106_root3_F106 = IntConstraintFactory.arithm(root3_F106, "+", root2_F97, "<=", 1);
		excludesroot3_F106_root3_F106.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot3_F106_root3_F106);
		Constraint requiresroot2_F40_root1_F10 = IntConstraintFactory.arithm(root2_F40, "<=", root1_F10);
		requiresroot2_F40_root1_F10.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F40_root1_F10);
		Constraint excludesroot4_F118_root4_F118 = IntConstraintFactory.arithm(root4_F118, "+", root1_F50, "<=", 1);
		excludesroot4_F118_root4_F118.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F118_root4_F118);
		Constraint excludesroot4_F3_root4_F3 = IntConstraintFactory.arithm(root4_F3, "+", root2_F133, "<=", 1);
		excludesroot4_F3_root4_F3.setName(Utilities.EXCLUDES_CMC);
		solver.post(excludesroot4_F3_root4_F3);
		Constraint requiresroot2_F79_root3_F135 = IntConstraintFactory.arithm(root2_F79, "<=", root3_F135);
		requiresroot2_F79_root3_F135.setName(Utilities.REQUIRES_CMC);
		solver.post(requiresroot2_F79_root3_F135);
		
		//--------------------------------------------
		//Solve
		//--------------------------------------------
		long start = System.currentTimeMillis();
		System.out.println("Started at: " + start);
		
		List<IntVar> varsAtribute0List = new ArrayList<IntVar>(featureAttrAtribute0.values());
		IntVar[] varsAtribute0 = new IntVar[featureAttrAtribute0.values().size()];
			
		for(int i = 0; i < varsAtribute0List.size(); i++) {
		varsAtribute0[i] = (IntVar) varsAtribute0List.get(i);
		}
		
		List<IntVar> varsAtribute1List = new ArrayList<IntVar>(featureAttrAtribute1.values());
		IntVar[] varsAtribute1 = new IntVar[featureAttrAtribute1.values().size()];
			
		for(int i = 0; i < varsAtribute1List.size(); i++) {
		varsAtribute1[i] = VariableFactory.minus(varsAtribute1List.get(i));
		}
		
		IntVar totalAtribute0 = VariableFactory.bounded("totalAtribute0", 0, 1000000, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute0, totalAtribute0));
		IntVar totalAtribute1 = VariableFactory.bounded("totalAtribute1", -1000000, 0, solver);
		solver.post(IntConstraintFactory.sum(varsAtribute1, totalAtribute1));
		
		//SMF.limitSolution(solver, 10);
		//Chatterbox.showSolutions(solver);
		solver.findParetoFront(ResolutionPolicy.MINIMIZE, totalAtribute0, totalAtribute1);
		Chatterbox.printStatistics(solver);
		
		
		long end = System.currentTimeMillis();
		System.out.println("Ended at: " + end);
		System.out.println("Total time: " + (end - start));
	}
	
	private static void initializeVars(){
		int contFeatures = 640;
			
		root1_root = (BoolVar) VariableFactory.fixed("feature_root1_root", 1, solver);
		root1_F1 = VariableFactory.bool("feature_root1_F1", solver);
		root1_F18 = VariableFactory.bool("feature_root1_F18", solver);
		root1_F19 = VariableFactory.bool("feature_root1_F19", solver);
		root1_F20 = VariableFactory.bool("feature_root1_F20", solver);
		root1_F21 = VariableFactory.bool("feature_root1_F21", solver);
		root1_F140 = VariableFactory.bool("feature_root1_F140", solver);
		root1_F141 = VariableFactory.bool("feature_root1_F141", solver);
		root1_F142 = VariableFactory.bool("feature_root1_F142", solver);
		root1_F143 = VariableFactory.bool("feature_root1_F143", solver);
		root1_F144 = VariableFactory.bool("feature_root1_F144", solver);
		root1_F22 = VariableFactory.bool("feature_root1_F22", solver);
		root1_F23 = VariableFactory.bool("feature_root1_F23", solver);
		root1_F54 = VariableFactory.bool("feature_root1_F54", solver);
		root1_F55 = VariableFactory.bool("feature_root1_F55", solver);
		root1_F56 = VariableFactory.bool("feature_root1_F56", solver);
		root1_F57 = VariableFactory.bool("feature_root1_F57", solver);
		root1_F132 = VariableFactory.bool("feature_root1_F132", solver);
		root1_F58 = VariableFactory.bool("feature_root1_F58", solver);
		root1_F59 = VariableFactory.bool("feature_root1_F59", solver);
		root1_F60 = VariableFactory.bool("feature_root1_F60", solver);
		root1_F24 = VariableFactory.bool("feature_root1_F24", solver);
		root1_F61 = VariableFactory.bool("feature_root1_F61", solver);
		root1_F62 = VariableFactory.bool("feature_root1_F62", solver);
		root1_F63 = VariableFactory.bool("feature_root1_F63", solver);
		root1_F64 = VariableFactory.bool("feature_root1_F64", solver);
		root1_F75 = VariableFactory.bool("feature_root1_F75", solver);
		root1_F76 = VariableFactory.bool("feature_root1_F76", solver);
		root1_F77 = VariableFactory.bool("feature_root1_F77", solver);
		root1_F118 = VariableFactory.bool("feature_root1_F118", solver);
		root1_F78 = VariableFactory.bool("feature_root1_F78", solver);
		root1_F79 = VariableFactory.bool("feature_root1_F79", solver);
		root1_F80 = VariableFactory.bool("feature_root1_F80", solver);
		root1_F81 = VariableFactory.bool("feature_root1_F81", solver);
		root1_F85 = VariableFactory.bool("feature_root1_F85", solver);
		root1_F124 = VariableFactory.bool("feature_root1_F124", solver);
		root1_F125 = VariableFactory.bool("feature_root1_F125", solver);
		root1_F126 = VariableFactory.bool("feature_root1_F126", solver);
		root1_F127 = VariableFactory.bool("feature_root1_F127", solver);
		root1_F128 = VariableFactory.bool("feature_root1_F128", solver);
		root1_F129 = VariableFactory.bool("feature_root1_F129", solver);
		root1_F130 = VariableFactory.bool("feature_root1_F130", solver);
		root1_F131 = VariableFactory.bool("feature_root1_F131", solver);
		root1_F86 = VariableFactory.bool("feature_root1_F86", solver);
		root1_F82 = VariableFactory.bool("feature_root1_F82", solver);
		root1_F83 = VariableFactory.bool("feature_root1_F83", solver);
		root1_F84 = VariableFactory.bool("feature_root1_F84", solver);
		root1_F65 = VariableFactory.bool("feature_root1_F65", solver);
		root1_F66 = VariableFactory.bool("feature_root1_F66", solver);
		root1_F67 = VariableFactory.bool("feature_root1_F67", solver);
		root1_F68 = VariableFactory.bool("feature_root1_F68", solver);
		root1_F69 = VariableFactory.bool("feature_root1_F69", solver);
		root1_F25 = VariableFactory.bool("feature_root1_F25", solver);
		root1_F26 = VariableFactory.bool("feature_root1_F26", solver);
		root1_F74 = VariableFactory.bool("feature_root1_F74", solver);
		root1_F2 = VariableFactory.bool("feature_root1_F2", solver);
		root1_F3 = VariableFactory.bool("feature_root1_F3", solver);
		root1_F70 = VariableFactory.bool("feature_root1_F70", solver);
		root1_F71 = VariableFactory.bool("feature_root1_F71", solver);
		root1_F72 = VariableFactory.bool("feature_root1_F72", solver);
		root1_F73 = VariableFactory.bool("feature_root1_F73", solver);
		root1_F100 = VariableFactory.bool("feature_root1_F100", solver);
		root1_F101 = VariableFactory.bool("feature_root1_F101", solver);
		root1_F102 = VariableFactory.bool("feature_root1_F102", solver);
		root1_F103 = VariableFactory.bool("feature_root1_F103", solver);
		root1_F104 = VariableFactory.bool("feature_root1_F104", solver);
		root1_F105 = VariableFactory.bool("feature_root1_F105", solver);
		root1_F106 = VariableFactory.bool("feature_root1_F106", solver);
		root1_F107 = VariableFactory.bool("feature_root1_F107", solver);
		root1_F108 = VariableFactory.bool("feature_root1_F108", solver);
		root1_F4 = VariableFactory.bool("feature_root1_F4", solver);
		root1_F5 = VariableFactory.bool("feature_root1_F5", solver);
		root1_F8 = VariableFactory.bool("feature_root1_F8", solver);
		root1_F9 = VariableFactory.bool("feature_root1_F9", solver);
		root1_F10 = VariableFactory.bool("feature_root1_F10", solver);
		root1_F11 = VariableFactory.bool("feature_root1_F11", solver);
		root1_F12 = VariableFactory.bool("feature_root1_F12", solver);
		root1_F27 = VariableFactory.bool("feature_root1_F27", solver);
		root1_F28 = VariableFactory.bool("feature_root1_F28", solver);
		root1_F29 = VariableFactory.bool("feature_root1_F29", solver);
		root1_F30 = VariableFactory.bool("feature_root1_F30", solver);
		root1_F31 = VariableFactory.bool("feature_root1_F31", solver);
		root1_F32 = VariableFactory.bool("feature_root1_F32", solver);
		root1_F87 = VariableFactory.bool("feature_root1_F87", solver);
		root1_F33 = VariableFactory.bool("feature_root1_F33", solver);
		root1_F34 = VariableFactory.bool("feature_root1_F34", solver);
		root1_F36 = VariableFactory.bool("feature_root1_F36", solver);
		root1_F95 = VariableFactory.bool("feature_root1_F95", solver);
		root1_F147 = VariableFactory.bool("feature_root1_F147", solver);
		root1_F148 = VariableFactory.bool("feature_root1_F148", solver);
		root1_F149 = VariableFactory.bool("feature_root1_F149", solver);
		root1_F150 = VariableFactory.bool("feature_root1_F150", solver);
		root1_F151 = VariableFactory.bool("feature_root1_F151", solver);
		root1_F152 = VariableFactory.bool("feature_root1_F152", solver);
		root1_F96 = VariableFactory.bool("feature_root1_F96", solver);
		root1_F97 = VariableFactory.bool("feature_root1_F97", solver);
		root1_F98 = VariableFactory.bool("feature_root1_F98", solver);
		root1_F119 = VariableFactory.bool("feature_root1_F119", solver);
		root1_F120 = VariableFactory.bool("feature_root1_F120", solver);
		root1_F121 = VariableFactory.bool("feature_root1_F121", solver);
		root1_F122 = VariableFactory.bool("feature_root1_F122", solver);
		root1_F123 = VariableFactory.bool("feature_root1_F123", solver);
		root1_F99 = VariableFactory.bool("feature_root1_F99", solver);
		root1_F37 = VariableFactory.bool("feature_root1_F37", solver);
		root1_F38 = VariableFactory.bool("feature_root1_F38", solver);
		root1_F39 = VariableFactory.bool("feature_root1_F39", solver);
		root1_F40 = VariableFactory.bool("feature_root1_F40", solver);
		root1_F53 = VariableFactory.bool("feature_root1_F53", solver);
		root1_F159 = VariableFactory.bool("feature_root1_F159", solver);
		root1_F41 = VariableFactory.bool("feature_root1_F41", solver);
		root1_F42 = VariableFactory.bool("feature_root1_F42", solver);
		root1_F46 = VariableFactory.bool("feature_root1_F46", solver);
		root1_F47 = VariableFactory.bool("feature_root1_F47", solver);
		root1_F48 = VariableFactory.bool("feature_root1_F48", solver);
		root1_F109 = VariableFactory.bool("feature_root1_F109", solver);
		root1_F110 = VariableFactory.bool("feature_root1_F110", solver);
		root1_F111 = VariableFactory.bool("feature_root1_F111", solver);
		root1_F136 = VariableFactory.bool("feature_root1_F136", solver);
		root1_F137 = VariableFactory.bool("feature_root1_F137", solver);
		root1_F138 = VariableFactory.bool("feature_root1_F138", solver);
		root1_F139 = VariableFactory.bool("feature_root1_F139", solver);
		root1_F112 = VariableFactory.bool("feature_root1_F112", solver);
		root1_F145 = VariableFactory.bool("feature_root1_F145", solver);
		root1_F146 = VariableFactory.bool("feature_root1_F146", solver);
		root1_F113 = VariableFactory.bool("feature_root1_F113", solver);
		root1_F114 = VariableFactory.bool("feature_root1_F114", solver);
		root1_F115 = VariableFactory.bool("feature_root1_F115", solver);
		root1_F158 = VariableFactory.bool("feature_root1_F158", solver);
		root1_F116 = VariableFactory.bool("feature_root1_F116", solver);
		root1_F117 = VariableFactory.bool("feature_root1_F117", solver);
		root1_F49 = VariableFactory.bool("feature_root1_F49", solver);
		root1_F43 = VariableFactory.bool("feature_root1_F43", solver);
		root1_F44 = VariableFactory.bool("feature_root1_F44", solver);
		root1_F45 = VariableFactory.bool("feature_root1_F45", solver);
		root1_F35 = VariableFactory.bool("feature_root1_F35", solver);
		root1_F13 = VariableFactory.bool("feature_root1_F13", solver);
		root1_F14 = VariableFactory.bool("feature_root1_F14", solver);
		root1_F50 = VariableFactory.bool("feature_root1_F50", solver);
		root1_F51 = VariableFactory.bool("feature_root1_F51", solver);
		root1_F153 = VariableFactory.bool("feature_root1_F153", solver);
		root1_F154 = VariableFactory.bool("feature_root1_F154", solver);
		root1_F155 = VariableFactory.bool("feature_root1_F155", solver);
		root1_F156 = VariableFactory.bool("feature_root1_F156", solver);
		root1_F157 = VariableFactory.bool("feature_root1_F157", solver);
		root1_F52 = VariableFactory.bool("feature_root1_F52", solver);
		root1_F133 = VariableFactory.bool("feature_root1_F133", solver);
		root1_F134 = VariableFactory.bool("feature_root1_F134", solver);
		root1_F135 = VariableFactory.bool("feature_root1_F135", solver);
		root1_F15 = VariableFactory.bool("feature_root1_F15", solver);
		root1_F16 = VariableFactory.bool("feature_root1_F16", solver);
		root1_F17 = VariableFactory.bool("feature_root1_F17", solver);
		root1_F6 = VariableFactory.bool("feature_root1_F6", solver);
		root1_F7 = VariableFactory.bool("feature_root1_F7", solver);
		root1_F88 = VariableFactory.bool("feature_root1_F88", solver);
		root1_F89 = VariableFactory.bool("feature_root1_F89", solver);
		root1_F90 = VariableFactory.bool("feature_root1_F90", solver);
		root1_F91 = VariableFactory.bool("feature_root1_F91", solver);
		root1_F92 = VariableFactory.bool("feature_root1_F92", solver);
		root1_F93 = VariableFactory.bool("feature_root1_F93", solver);
		root1_F94 = VariableFactory.bool("feature_root1_F94", solver);
		root2_root = (BoolVar) VariableFactory.fixed("feature_root2_root", 1, solver);
		root2_F1 = VariableFactory.bool("feature_root2_F1", solver);
		root2_F94 = VariableFactory.bool("feature_root2_F94", solver);
		root2_F95 = VariableFactory.bool("feature_root2_F95", solver);
		root2_F96 = VariableFactory.bool("feature_root2_F96", solver);
		root2_F97 = VariableFactory.bool("feature_root2_F97", solver);
		root2_F2 = VariableFactory.bool("feature_root2_F2", solver);
		root2_F21 = VariableFactory.bool("feature_root2_F21", solver);
		root2_F120 = VariableFactory.bool("feature_root2_F120", solver);
		root2_F155 = VariableFactory.bool("feature_root2_F155", solver);
		root2_F156 = VariableFactory.bool("feature_root2_F156", solver);
		root2_F157 = VariableFactory.bool("feature_root2_F157", solver);
		root2_F158 = VariableFactory.bool("feature_root2_F158", solver);
		root2_F159 = VariableFactory.bool("feature_root2_F159", solver);
		root2_F121 = VariableFactory.bool("feature_root2_F121", solver);
		root2_F122 = VariableFactory.bool("feature_root2_F122", solver);
		root2_F123 = VariableFactory.bool("feature_root2_F123", solver);
		root2_F124 = VariableFactory.bool("feature_root2_F124", solver);
		root2_F125 = VariableFactory.bool("feature_root2_F125", solver);
		root2_F22 = VariableFactory.bool("feature_root2_F22", solver);
		root2_F23 = VariableFactory.bool("feature_root2_F23", solver);
		root2_F65 = VariableFactory.bool("feature_root2_F65", solver);
		root2_F24 = VariableFactory.bool("feature_root2_F24", solver);
		root2_F25 = VariableFactory.bool("feature_root2_F25", solver);
		root2_F46 = VariableFactory.bool("feature_root2_F46", solver);
		root2_F47 = VariableFactory.bool("feature_root2_F47", solver);
		root2_F110 = VariableFactory.bool("feature_root2_F110", solver);
		root2_F111 = VariableFactory.bool("feature_root2_F111", solver);
		root2_F112 = VariableFactory.bool("feature_root2_F112", solver);
		root2_F131 = VariableFactory.bool("feature_root2_F131", solver);
		root2_F132 = VariableFactory.bool("feature_root2_F132", solver);
		root2_F113 = VariableFactory.bool("feature_root2_F113", solver);
		root2_F114 = VariableFactory.bool("feature_root2_F114", solver);
		root2_F115 = VariableFactory.bool("feature_root2_F115", solver);
		root2_F116 = VariableFactory.bool("feature_root2_F116", solver);
		root2_F117 = VariableFactory.bool("feature_root2_F117", solver);
		root2_F118 = VariableFactory.bool("feature_root2_F118", solver);
		root2_F119 = VariableFactory.bool("feature_root2_F119", solver);
		root2_F26 = VariableFactory.bool("feature_root2_F26", solver);
		root2_F27 = VariableFactory.bool("feature_root2_F27", solver);
		root2_F28 = VariableFactory.bool("feature_root2_F28", solver);
		root2_F48 = VariableFactory.bool("feature_root2_F48", solver);
		root2_F29 = VariableFactory.bool("feature_root2_F29", solver);
		root2_F50 = VariableFactory.bool("feature_root2_F50", solver);
		root2_F51 = VariableFactory.bool("feature_root2_F51", solver);
		root2_F62 = VariableFactory.bool("feature_root2_F62", solver);
		root2_F63 = VariableFactory.bool("feature_root2_F63", solver);
		root2_F133 = VariableFactory.bool("feature_root2_F133", solver);
		root2_F134 = VariableFactory.bool("feature_root2_F134", solver);
		root2_F135 = VariableFactory.bool("feature_root2_F135", solver);
		root2_F136 = VariableFactory.bool("feature_root2_F136", solver);
		root2_F137 = VariableFactory.bool("feature_root2_F137", solver);
		root2_F138 = VariableFactory.bool("feature_root2_F138", solver);
		root2_F139 = VariableFactory.bool("feature_root2_F139", solver);
		root2_F140 = VariableFactory.bool("feature_root2_F140", solver);
		root2_F141 = VariableFactory.bool("feature_root2_F141", solver);
		root2_F142 = VariableFactory.bool("feature_root2_F142", solver);
		root2_F64 = VariableFactory.bool("feature_root2_F64", solver);
		root2_F81 = VariableFactory.bool("feature_root2_F81", solver);
		root2_F82 = VariableFactory.bool("feature_root2_F82", solver);
		root2_F126 = VariableFactory.bool("feature_root2_F126", solver);
		root2_F127 = VariableFactory.bool("feature_root2_F127", solver);
		root2_F128 = VariableFactory.bool("feature_root2_F128", solver);
		root2_F129 = VariableFactory.bool("feature_root2_F129", solver);
		root2_F130 = VariableFactory.bool("feature_root2_F130", solver);
		root2_F83 = VariableFactory.bool("feature_root2_F83", solver);
		root2_F84 = VariableFactory.bool("feature_root2_F84", solver);
		root2_F85 = VariableFactory.bool("feature_root2_F85", solver);
		root2_F86 = VariableFactory.bool("feature_root2_F86", solver);
		root2_F87 = VariableFactory.bool("feature_root2_F87", solver);
		root2_F52 = VariableFactory.bool("feature_root2_F52", solver);
		root2_F66 = VariableFactory.bool("feature_root2_F66", solver);
		root2_F77 = VariableFactory.bool("feature_root2_F77", solver);
		root2_F78 = VariableFactory.bool("feature_root2_F78", solver);
		root2_F67 = VariableFactory.bool("feature_root2_F67", solver);
		root2_F68 = VariableFactory.bool("feature_root2_F68", solver);
		root2_F69 = VariableFactory.bool("feature_root2_F69", solver);
		root2_F98 = VariableFactory.bool("feature_root2_F98", solver);
		root2_F99 = VariableFactory.bool("feature_root2_F99", solver);
		root2_F100 = VariableFactory.bool("feature_root2_F100", solver);
		root2_F70 = VariableFactory.bool("feature_root2_F70", solver);
		root2_F71 = VariableFactory.bool("feature_root2_F71", solver);
		root2_F72 = VariableFactory.bool("feature_root2_F72", solver);
		root2_F73 = VariableFactory.bool("feature_root2_F73", solver);
		root2_F53 = VariableFactory.bool("feature_root2_F53", solver);
		root2_F54 = VariableFactory.bool("feature_root2_F54", solver);
		root2_F80 = VariableFactory.bool("feature_root2_F80", solver);
		root2_F55 = VariableFactory.bool("feature_root2_F55", solver);
		root2_F3 = VariableFactory.bool("feature_root2_F3", solver);
		root2_F4 = VariableFactory.bool("feature_root2_F4", solver);
		root2_F5 = VariableFactory.bool("feature_root2_F5", solver);
		root2_F19 = VariableFactory.bool("feature_root2_F19", solver);
		root2_F20 = VariableFactory.bool("feature_root2_F20", solver);
		root2_F6 = VariableFactory.bool("feature_root2_F6", solver);
		root2_F7 = VariableFactory.bool("feature_root2_F7", solver);
		root2_F56 = VariableFactory.bool("feature_root2_F56", solver);
		root2_F57 = VariableFactory.bool("feature_root2_F57", solver);
		root2_F8 = VariableFactory.bool("feature_root2_F8", solver);
		root2_F9 = VariableFactory.bool("feature_root2_F9", solver);
		root2_F10 = VariableFactory.bool("feature_root2_F10", solver);
		root2_F11 = VariableFactory.bool("feature_root2_F11", solver);
		root2_F88 = VariableFactory.bool("feature_root2_F88", solver);
		root2_F89 = VariableFactory.bool("feature_root2_F89", solver);
		root2_F90 = VariableFactory.bool("feature_root2_F90", solver);
		root2_F93 = VariableFactory.bool("feature_root2_F93", solver);
		root2_F91 = VariableFactory.bool("feature_root2_F91", solver);
		root2_F92 = VariableFactory.bool("feature_root2_F92", solver);
		root2_F12 = VariableFactory.bool("feature_root2_F12", solver);
		root2_F13 = VariableFactory.bool("feature_root2_F13", solver);
		root2_F14 = VariableFactory.bool("feature_root2_F14", solver);
		root2_F30 = VariableFactory.bool("feature_root2_F30", solver);
		root2_F31 = VariableFactory.bool("feature_root2_F31", solver);
		root2_F58 = VariableFactory.bool("feature_root2_F58", solver);
		root2_F59 = VariableFactory.bool("feature_root2_F59", solver);
		root2_F60 = VariableFactory.bool("feature_root2_F60", solver);
		root2_F79 = VariableFactory.bool("feature_root2_F79", solver);
		root2_F61 = VariableFactory.bool("feature_root2_F61", solver);
		root2_F32 = VariableFactory.bool("feature_root2_F32", solver);
		root2_F33 = VariableFactory.bool("feature_root2_F33", solver);
		root2_F74 = VariableFactory.bool("feature_root2_F74", solver);
		root2_F75 = VariableFactory.bool("feature_root2_F75", solver);
		root2_F76 = VariableFactory.bool("feature_root2_F76", solver);
		root2_F34 = VariableFactory.bool("feature_root2_F34", solver);
		root2_F35 = VariableFactory.bool("feature_root2_F35", solver);
		root2_F36 = VariableFactory.bool("feature_root2_F36", solver);
		root2_F37 = VariableFactory.bool("feature_root2_F37", solver);
		root2_F38 = VariableFactory.bool("feature_root2_F38", solver);
		root2_F143 = VariableFactory.bool("feature_root2_F143", solver);
		root2_F144 = VariableFactory.bool("feature_root2_F144", solver);
		root2_F145 = VariableFactory.bool("feature_root2_F145", solver);
		root2_F146 = VariableFactory.bool("feature_root2_F146", solver);
		root2_F147 = VariableFactory.bool("feature_root2_F147", solver);
		root2_F39 = VariableFactory.bool("feature_root2_F39", solver);
		root2_F15 = VariableFactory.bool("feature_root2_F15", solver);
		root2_F40 = VariableFactory.bool("feature_root2_F40", solver);
		root2_F41 = VariableFactory.bool("feature_root2_F41", solver);
		root2_F42 = VariableFactory.bool("feature_root2_F42", solver);
		root2_F49 = VariableFactory.bool("feature_root2_F49", solver);
		root2_F101 = VariableFactory.bool("feature_root2_F101", solver);
		root2_F102 = VariableFactory.bool("feature_root2_F102", solver);
		root2_F103 = VariableFactory.bool("feature_root2_F103", solver);
		root2_F104 = VariableFactory.bool("feature_root2_F104", solver);
		root2_F105 = VariableFactory.bool("feature_root2_F105", solver);
		root2_F106 = VariableFactory.bool("feature_root2_F106", solver);
		root2_F107 = VariableFactory.bool("feature_root2_F107", solver);
		root2_F108 = VariableFactory.bool("feature_root2_F108", solver);
		root2_F109 = VariableFactory.bool("feature_root2_F109", solver);
		root2_F43 = VariableFactory.bool("feature_root2_F43", solver);
		root2_F44 = VariableFactory.bool("feature_root2_F44", solver);
		root2_F148 = VariableFactory.bool("feature_root2_F148", solver);
		root2_F149 = VariableFactory.bool("feature_root2_F149", solver);
		root2_F150 = VariableFactory.bool("feature_root2_F150", solver);
		root2_F151 = VariableFactory.bool("feature_root2_F151", solver);
		root2_F152 = VariableFactory.bool("feature_root2_F152", solver);
		root2_F153 = VariableFactory.bool("feature_root2_F153", solver);
		root2_F154 = VariableFactory.bool("feature_root2_F154", solver);
		root2_F45 = VariableFactory.bool("feature_root2_F45", solver);
		root2_F16 = VariableFactory.bool("feature_root2_F16", solver);
		root2_F17 = VariableFactory.bool("feature_root2_F17", solver);
		root2_F18 = VariableFactory.bool("feature_root2_F18", solver);
		root3_root = (BoolVar) VariableFactory.fixed("feature_root3_root", 1, solver);
		root3_F1 = VariableFactory.bool("feature_root3_F1", solver);
		root3_F2 = VariableFactory.bool("feature_root3_F2", solver);
		root3_F3 = VariableFactory.bool("feature_root3_F3", solver);
		root3_F10 = VariableFactory.bool("feature_root3_F10", solver);
		root3_F37 = VariableFactory.bool("feature_root3_F37", solver);
		root3_F129 = VariableFactory.bool("feature_root3_F129", solver);
		root3_F130 = VariableFactory.bool("feature_root3_F130", solver);
		root3_F131 = VariableFactory.bool("feature_root3_F131", solver);
		root3_F132 = VariableFactory.bool("feature_root3_F132", solver);
		root3_F133 = VariableFactory.bool("feature_root3_F133", solver);
		root3_F134 = VariableFactory.bool("feature_root3_F134", solver);
		root3_F135 = VariableFactory.bool("feature_root3_F135", solver);
		root3_F136 = VariableFactory.bool("feature_root3_F136", solver);
		root3_F137 = VariableFactory.bool("feature_root3_F137", solver);
		root3_F38 = VariableFactory.bool("feature_root3_F38", solver);
		root3_F39 = VariableFactory.bool("feature_root3_F39", solver);
		root3_F43 = VariableFactory.bool("feature_root3_F43", solver);
		root3_F44 = VariableFactory.bool("feature_root3_F44", solver);
		root3_F45 = VariableFactory.bool("feature_root3_F45", solver);
		root3_F40 = VariableFactory.bool("feature_root3_F40", solver);
		root3_F41 = VariableFactory.bool("feature_root3_F41", solver);
		root3_F54 = VariableFactory.bool("feature_root3_F54", solver);
		root3_F11 = VariableFactory.bool("feature_root3_F11", solver);
		root3_F12 = VariableFactory.bool("feature_root3_F12", solver);
		root3_F26 = VariableFactory.bool("feature_root3_F26", solver);
		root3_F35 = VariableFactory.bool("feature_root3_F35", solver);
		root3_F36 = VariableFactory.bool("feature_root3_F36", solver);
		root3_F27 = VariableFactory.bool("feature_root3_F27", solver);
		root3_F46 = VariableFactory.bool("feature_root3_F46", solver);
		root3_F75 = VariableFactory.bool("feature_root3_F75", solver);
		root3_F76 = VariableFactory.bool("feature_root3_F76", solver);
		root3_F77 = VariableFactory.bool("feature_root3_F77", solver);
		root3_F47 = VariableFactory.bool("feature_root3_F47", solver);
		root3_F48 = VariableFactory.bool("feature_root3_F48", solver);
		root3_F158 = VariableFactory.bool("feature_root3_F158", solver);
		root3_F49 = VariableFactory.bool("feature_root3_F49", solver);
		root3_F50 = VariableFactory.bool("feature_root3_F50", solver);
		root3_F51 = VariableFactory.bool("feature_root3_F51", solver);
		root3_F52 = VariableFactory.bool("feature_root3_F52", solver);
		root3_F119 = VariableFactory.bool("feature_root3_F119", solver);
		root3_F53 = VariableFactory.bool("feature_root3_F53", solver);
		root3_F28 = VariableFactory.bool("feature_root3_F28", solver);
		root3_F97 = VariableFactory.bool("feature_root3_F97", solver);
		root3_F98 = VariableFactory.bool("feature_root3_F98", solver);
		root3_F99 = VariableFactory.bool("feature_root3_F99", solver);
		root3_F100 = VariableFactory.bool("feature_root3_F100", solver);
		root3_F101 = VariableFactory.bool("feature_root3_F101", solver);
		root3_F29 = VariableFactory.bool("feature_root3_F29", solver);
		root3_F30 = VariableFactory.bool("feature_root3_F30", solver);
		root3_F31 = VariableFactory.bool("feature_root3_F31", solver);
		root3_F32 = VariableFactory.bool("feature_root3_F32", solver);
		root3_F63 = VariableFactory.bool("feature_root3_F63", solver);
		root3_F64 = VariableFactory.bool("feature_root3_F64", solver);
		root3_F65 = VariableFactory.bool("feature_root3_F65", solver);
		root3_F66 = VariableFactory.bool("feature_root3_F66", solver);
		root3_F78 = VariableFactory.bool("feature_root3_F78", solver);
		root3_F79 = VariableFactory.bool("feature_root3_F79", solver);
		root3_F67 = VariableFactory.bool("feature_root3_F67", solver);
		root3_F33 = VariableFactory.bool("feature_root3_F33", solver);
		root3_F34 = VariableFactory.bool("feature_root3_F34", solver);
		root3_F13 = VariableFactory.bool("feature_root3_F13", solver);
		root3_F14 = VariableFactory.bool("feature_root3_F14", solver);
		root3_F15 = VariableFactory.bool("feature_root3_F15", solver);
		root3_F159 = VariableFactory.bool("feature_root3_F159", solver);
		root3_F4 = VariableFactory.bool("feature_root3_F4", solver);
		root3_F5 = VariableFactory.bool("feature_root3_F5", solver);
		root3_F16 = VariableFactory.bool("feature_root3_F16", solver);
		root3_F138 = VariableFactory.bool("feature_root3_F138", solver);
		root3_F139 = VariableFactory.bool("feature_root3_F139", solver);
		root3_F140 = VariableFactory.bool("feature_root3_F140", solver);
		root3_F141 = VariableFactory.bool("feature_root3_F141", solver);
		root3_F142 = VariableFactory.bool("feature_root3_F142", solver);
		root3_F143 = VariableFactory.bool("feature_root3_F143", solver);
		root3_F144 = VariableFactory.bool("feature_root3_F144", solver);
		root3_F145 = VariableFactory.bool("feature_root3_F145", solver);
		root3_F146 = VariableFactory.bool("feature_root3_F146", solver);
		root3_F17 = VariableFactory.bool("feature_root3_F17", solver);
		root3_F18 = VariableFactory.bool("feature_root3_F18", solver);
		root3_F68 = VariableFactory.bool("feature_root3_F68", solver);
		root3_F69 = VariableFactory.bool("feature_root3_F69", solver);
		root3_F70 = VariableFactory.bool("feature_root3_F70", solver);
		root3_F102 = VariableFactory.bool("feature_root3_F102", solver);
		root3_F103 = VariableFactory.bool("feature_root3_F103", solver);
		root3_F104 = VariableFactory.bool("feature_root3_F104", solver);
		root3_F105 = VariableFactory.bool("feature_root3_F105", solver);
		root3_F106 = VariableFactory.bool("feature_root3_F106", solver);
		root3_F107 = VariableFactory.bool("feature_root3_F107", solver);
		root3_F108 = VariableFactory.bool("feature_root3_F108", solver);
		root3_F71 = VariableFactory.bool("feature_root3_F71", solver);
		root3_F72 = VariableFactory.bool("feature_root3_F72", solver);
		root3_F87 = VariableFactory.bool("feature_root3_F87", solver);
		root3_F88 = VariableFactory.bool("feature_root3_F88", solver);
		root3_F120 = VariableFactory.bool("feature_root3_F120", solver);
		root3_F121 = VariableFactory.bool("feature_root3_F121", solver);
		root3_F122 = VariableFactory.bool("feature_root3_F122", solver);
		root3_F123 = VariableFactory.bool("feature_root3_F123", solver);
		root3_F124 = VariableFactory.bool("feature_root3_F124", solver);
		root3_F125 = VariableFactory.bool("feature_root3_F125", solver);
		root3_F126 = VariableFactory.bool("feature_root3_F126", solver);
		root3_F127 = VariableFactory.bool("feature_root3_F127", solver);
		root3_F128 = VariableFactory.bool("feature_root3_F128", solver);
		root3_F89 = VariableFactory.bool("feature_root3_F89", solver);
		root3_F90 = VariableFactory.bool("feature_root3_F90", solver);
		root3_F91 = VariableFactory.bool("feature_root3_F91", solver);
		root3_F92 = VariableFactory.bool("feature_root3_F92", solver);
		root3_F93 = VariableFactory.bool("feature_root3_F93", solver);
		root3_F94 = VariableFactory.bool("feature_root3_F94", solver);
		root3_F95 = VariableFactory.bool("feature_root3_F95", solver);
		root3_F96 = VariableFactory.bool("feature_root3_F96", solver);
		root3_F73 = VariableFactory.bool("feature_root3_F73", solver);
		root3_F74 = VariableFactory.bool("feature_root3_F74", solver);
		root3_F19 = VariableFactory.bool("feature_root3_F19", solver);
		root3_F156 = VariableFactory.bool("feature_root3_F156", solver);
		root3_F157 = VariableFactory.bool("feature_root3_F157", solver);
		root3_F20 = VariableFactory.bool("feature_root3_F20", solver);
		root3_F21 = VariableFactory.bool("feature_root3_F21", solver);
		root3_F22 = VariableFactory.bool("feature_root3_F22", solver);
		root3_F23 = VariableFactory.bool("feature_root3_F23", solver);
		root3_F24 = VariableFactory.bool("feature_root3_F24", solver);
		root3_F55 = VariableFactory.bool("feature_root3_F55", solver);
		root3_F80 = VariableFactory.bool("feature_root3_F80", solver);
		root3_F81 = VariableFactory.bool("feature_root3_F81", solver);
		root3_F82 = VariableFactory.bool("feature_root3_F82", solver);
		root3_F83 = VariableFactory.bool("feature_root3_F83", solver);
		root3_F84 = VariableFactory.bool("feature_root3_F84", solver);
		root3_F85 = VariableFactory.bool("feature_root3_F85", solver);
		root3_F86 = VariableFactory.bool("feature_root3_F86", solver);
		root3_F56 = VariableFactory.bool("feature_root3_F56", solver);
		root3_F151 = VariableFactory.bool("feature_root3_F151", solver);
		root3_F152 = VariableFactory.bool("feature_root3_F152", solver);
		root3_F57 = VariableFactory.bool("feature_root3_F57", solver);
		root3_F58 = VariableFactory.bool("feature_root3_F58", solver);
		root3_F59 = VariableFactory.bool("feature_root3_F59", solver);
		root3_F109 = VariableFactory.bool("feature_root3_F109", solver);
		root3_F110 = VariableFactory.bool("feature_root3_F110", solver);
		root3_F111 = VariableFactory.bool("feature_root3_F111", solver);
		root3_F153 = VariableFactory.bool("feature_root3_F153", solver);
		root3_F154 = VariableFactory.bool("feature_root3_F154", solver);
		root3_F155 = VariableFactory.bool("feature_root3_F155", solver);
		root3_F112 = VariableFactory.bool("feature_root3_F112", solver);
		root3_F113 = VariableFactory.bool("feature_root3_F113", solver);
		root3_F147 = VariableFactory.bool("feature_root3_F147", solver);
		root3_F148 = VariableFactory.bool("feature_root3_F148", solver);
		root3_F149 = VariableFactory.bool("feature_root3_F149", solver);
		root3_F150 = VariableFactory.bool("feature_root3_F150", solver);
		root3_F114 = VariableFactory.bool("feature_root3_F114", solver);
		root3_F115 = VariableFactory.bool("feature_root3_F115", solver);
		root3_F116 = VariableFactory.bool("feature_root3_F116", solver);
		root3_F117 = VariableFactory.bool("feature_root3_F117", solver);
		root3_F118 = VariableFactory.bool("feature_root3_F118", solver);
		root3_F60 = VariableFactory.bool("feature_root3_F60", solver);
		root3_F61 = VariableFactory.bool("feature_root3_F61", solver);
		root3_F62 = VariableFactory.bool("feature_root3_F62", solver);
		root3_F25 = VariableFactory.bool("feature_root3_F25", solver);
		root3_F6 = VariableFactory.bool("feature_root3_F6", solver);
		root3_F7 = VariableFactory.bool("feature_root3_F7", solver);
		root3_F8 = VariableFactory.bool("feature_root3_F8", solver);
		root3_F42 = VariableFactory.bool("feature_root3_F42", solver);
		root3_F9 = VariableFactory.bool("feature_root3_F9", solver);
		root4_root = (BoolVar) VariableFactory.fixed("feature_root4_root", 1, solver);
		root4_F1 = VariableFactory.bool("feature_root4_F1", solver);
		root4_F2 = VariableFactory.bool("feature_root4_F2", solver);
		root4_F3 = VariableFactory.bool("feature_root4_F3", solver);
		root4_F4 = VariableFactory.bool("feature_root4_F4", solver);
		root4_F5 = VariableFactory.bool("feature_root4_F5", solver);
		root4_F6 = VariableFactory.bool("feature_root4_F6", solver);
		root4_F7 = VariableFactory.bool("feature_root4_F7", solver);
		root4_F11 = VariableFactory.bool("feature_root4_F11", solver);
		root4_F41 = VariableFactory.bool("feature_root4_F41", solver);
		root4_F42 = VariableFactory.bool("feature_root4_F42", solver);
		root4_F43 = VariableFactory.bool("feature_root4_F43", solver);
		root4_F156 = VariableFactory.bool("feature_root4_F156", solver);
		root4_F157 = VariableFactory.bool("feature_root4_F157", solver);
		root4_F158 = VariableFactory.bool("feature_root4_F158", solver);
		root4_F44 = VariableFactory.bool("feature_root4_F44", solver);
		root4_F45 = VariableFactory.bool("feature_root4_F45", solver);
		root4_F46 = VariableFactory.bool("feature_root4_F46", solver);
		root4_F47 = VariableFactory.bool("feature_root4_F47", solver);
		root4_F116 = VariableFactory.bool("feature_root4_F116", solver);
		root4_F117 = VariableFactory.bool("feature_root4_F117", solver);
		root4_F118 = VariableFactory.bool("feature_root4_F118", solver);
		root4_F119 = VariableFactory.bool("feature_root4_F119", solver);
		root4_F120 = VariableFactory.bool("feature_root4_F120", solver);
		root4_F121 = VariableFactory.bool("feature_root4_F121", solver);
		root4_F48 = VariableFactory.bool("feature_root4_F48", solver);
		root4_F49 = VariableFactory.bool("feature_root4_F49", solver);
		root4_F50 = VariableFactory.bool("feature_root4_F50", solver);
		root4_F79 = VariableFactory.bool("feature_root4_F79", solver);
		root4_F80 = VariableFactory.bool("feature_root4_F80", solver);
		root4_F81 = VariableFactory.bool("feature_root4_F81", solver);
		root4_F82 = VariableFactory.bool("feature_root4_F82", solver);
		root4_F12 = VariableFactory.bool("feature_root4_F12", solver);
		root4_F130 = VariableFactory.bool("feature_root4_F130", solver);
		root4_F131 = VariableFactory.bool("feature_root4_F131", solver);
		root4_F132 = VariableFactory.bool("feature_root4_F132", solver);
		root4_F133 = VariableFactory.bool("feature_root4_F133", solver);
		root4_F134 = VariableFactory.bool("feature_root4_F134", solver);
		root4_F135 = VariableFactory.bool("feature_root4_F135", solver);
		root4_F136 = VariableFactory.bool("feature_root4_F136", solver);
		root4_F13 = VariableFactory.bool("feature_root4_F13", solver);
		root4_F14 = VariableFactory.bool("feature_root4_F14", solver);
		root4_F15 = VariableFactory.bool("feature_root4_F15", solver);
		root4_F16 = VariableFactory.bool("feature_root4_F16", solver);
		root4_F17 = VariableFactory.bool("feature_root4_F17", solver);
		root4_F61 = VariableFactory.bool("feature_root4_F61", solver);
		root4_F83 = VariableFactory.bool("feature_root4_F83", solver);
		root4_F84 = VariableFactory.bool("feature_root4_F84", solver);
		root4_F85 = VariableFactory.bool("feature_root4_F85", solver);
		root4_F109 = VariableFactory.bool("feature_root4_F109", solver);
		root4_F110 = VariableFactory.bool("feature_root4_F110", solver);
		root4_F111 = VariableFactory.bool("feature_root4_F111", solver);
		root4_F112 = VariableFactory.bool("feature_root4_F112", solver);
		root4_F113 = VariableFactory.bool("feature_root4_F113", solver);
		root4_F114 = VariableFactory.bool("feature_root4_F114", solver);
		root4_F86 = VariableFactory.bool("feature_root4_F86", solver);
		root4_F87 = VariableFactory.bool("feature_root4_F87", solver);
		root4_F88 = VariableFactory.bool("feature_root4_F88", solver);
		root4_F89 = VariableFactory.bool("feature_root4_F89", solver);
		root4_F90 = VariableFactory.bool("feature_root4_F90", solver);
		root4_F91 = VariableFactory.bool("feature_root4_F91", solver);
		root4_F92 = VariableFactory.bool("feature_root4_F92", solver);
		root4_F93 = VariableFactory.bool("feature_root4_F93", solver);
		root4_F94 = VariableFactory.bool("feature_root4_F94", solver);
		root4_F95 = VariableFactory.bool("feature_root4_F95", solver);
		root4_F62 = VariableFactory.bool("feature_root4_F62", solver);
		root4_F63 = VariableFactory.bool("feature_root4_F63", solver);
		root4_F64 = VariableFactory.bool("feature_root4_F64", solver);
		root4_F65 = VariableFactory.bool("feature_root4_F65", solver);
		root4_F66 = VariableFactory.bool("feature_root4_F66", solver);
		root4_F18 = VariableFactory.bool("feature_root4_F18", solver);
		root4_F19 = VariableFactory.bool("feature_root4_F19", solver);
		root4_F20 = VariableFactory.bool("feature_root4_F20", solver);
		root4_F21 = VariableFactory.bool("feature_root4_F21", solver);
		root4_F115 = VariableFactory.bool("feature_root4_F115", solver);
		root4_F22 = VariableFactory.bool("feature_root4_F22", solver);
		root4_F23 = VariableFactory.bool("feature_root4_F23", solver);
		root4_F24 = VariableFactory.bool("feature_root4_F24", solver);
		root4_F25 = VariableFactory.bool("feature_root4_F25", solver);
		root4_F26 = VariableFactory.bool("feature_root4_F26", solver);
		root4_F8 = VariableFactory.bool("feature_root4_F8", solver);
		root4_F9 = VariableFactory.bool("feature_root4_F9", solver);
		root4_F10 = VariableFactory.bool("feature_root4_F10", solver);
		root4_F27 = VariableFactory.bool("feature_root4_F27", solver);
		root4_F32 = VariableFactory.bool("feature_root4_F32", solver);
		root4_F33 = VariableFactory.bool("feature_root4_F33", solver);
		root4_F51 = VariableFactory.bool("feature_root4_F51", solver);
		root4_F52 = VariableFactory.bool("feature_root4_F52", solver);
		root4_F53 = VariableFactory.bool("feature_root4_F53", solver);
		root4_F54 = VariableFactory.bool("feature_root4_F54", solver);
		root4_F55 = VariableFactory.bool("feature_root4_F55", solver);
		root4_F56 = VariableFactory.bool("feature_root4_F56", solver);
		root4_F57 = VariableFactory.bool("feature_root4_F57", solver);
		root4_F58 = VariableFactory.bool("feature_root4_F58", solver);
		root4_F67 = VariableFactory.bool("feature_root4_F67", solver);
		root4_F68 = VariableFactory.bool("feature_root4_F68", solver);
		root4_F69 = VariableFactory.bool("feature_root4_F69", solver);
		root4_F59 = VariableFactory.bool("feature_root4_F59", solver);
		root4_F60 = VariableFactory.bool("feature_root4_F60", solver);
		root4_F140 = VariableFactory.bool("feature_root4_F140", solver);
		root4_F141 = VariableFactory.bool("feature_root4_F141", solver);
		root4_F142 = VariableFactory.bool("feature_root4_F142", solver);
		root4_F143 = VariableFactory.bool("feature_root4_F143", solver);
		root4_F34 = VariableFactory.bool("feature_root4_F34", solver);
		root4_F35 = VariableFactory.bool("feature_root4_F35", solver);
		root4_F105 = VariableFactory.bool("feature_root4_F105", solver);
		root4_F159 = VariableFactory.bool("feature_root4_F159", solver);
		root4_F106 = VariableFactory.bool("feature_root4_F106", solver);
		root4_F36 = VariableFactory.bool("feature_root4_F36", solver);
		root4_F37 = VariableFactory.bool("feature_root4_F37", solver);
		root4_F38 = VariableFactory.bool("feature_root4_F38", solver);
		root4_F70 = VariableFactory.bool("feature_root4_F70", solver);
		root4_F71 = VariableFactory.bool("feature_root4_F71", solver);
		root4_F72 = VariableFactory.bool("feature_root4_F72", solver);
		root4_F73 = VariableFactory.bool("feature_root4_F73", solver);
		root4_F74 = VariableFactory.bool("feature_root4_F74", solver);
		root4_F75 = VariableFactory.bool("feature_root4_F75", solver);
		root4_F76 = VariableFactory.bool("feature_root4_F76", solver);
		root4_F144 = VariableFactory.bool("feature_root4_F144", solver);
		root4_F145 = VariableFactory.bool("feature_root4_F145", solver);
		root4_F146 = VariableFactory.bool("feature_root4_F146", solver);
		root4_F147 = VariableFactory.bool("feature_root4_F147", solver);
		root4_F148 = VariableFactory.bool("feature_root4_F148", solver);
		root4_F149 = VariableFactory.bool("feature_root4_F149", solver);
		root4_F150 = VariableFactory.bool("feature_root4_F150", solver);
		root4_F151 = VariableFactory.bool("feature_root4_F151", solver);
		root4_F152 = VariableFactory.bool("feature_root4_F152", solver);
		root4_F77 = VariableFactory.bool("feature_root4_F77", solver);
		root4_F78 = VariableFactory.bool("feature_root4_F78", solver);
		root4_F107 = VariableFactory.bool("feature_root4_F107", solver);
		root4_F108 = VariableFactory.bool("feature_root4_F108", solver);
		root4_F39 = VariableFactory.bool("feature_root4_F39", solver);
		root4_F40 = VariableFactory.bool("feature_root4_F40", solver);
		root4_F28 = VariableFactory.bool("feature_root4_F28", solver);
		root4_F122 = VariableFactory.bool("feature_root4_F122", solver);
		root4_F123 = VariableFactory.bool("feature_root4_F123", solver);
		root4_F153 = VariableFactory.bool("feature_root4_F153", solver);
		root4_F154 = VariableFactory.bool("feature_root4_F154", solver);
		root4_F155 = VariableFactory.bool("feature_root4_F155", solver);
		root4_F124 = VariableFactory.bool("feature_root4_F124", solver);
		root4_F125 = VariableFactory.bool("feature_root4_F125", solver);
		root4_F126 = VariableFactory.bool("feature_root4_F126", solver);
		root4_F127 = VariableFactory.bool("feature_root4_F127", solver);
		root4_F128 = VariableFactory.bool("feature_root4_F128", solver);
		root4_F137 = VariableFactory.bool("feature_root4_F137", solver);
		root4_F138 = VariableFactory.bool("feature_root4_F138", solver);
		root4_F139 = VariableFactory.bool("feature_root4_F139", solver);
		root4_F129 = VariableFactory.bool("feature_root4_F129", solver);
		root4_F29 = VariableFactory.bool("feature_root4_F29", solver);
		root4_F97 = VariableFactory.bool("feature_root4_F97", solver);
		root4_F98 = VariableFactory.bool("feature_root4_F98", solver);
		root4_F99 = VariableFactory.bool("feature_root4_F99", solver);
		root4_F100 = VariableFactory.bool("feature_root4_F100", solver);
		root4_F101 = VariableFactory.bool("feature_root4_F101", solver);
		root4_F102 = VariableFactory.bool("feature_root4_F102", solver);
		root4_F103 = VariableFactory.bool("feature_root4_F103", solver);
		root4_F104 = VariableFactory.bool("feature_root4_F104", solver);
		root4_F30 = VariableFactory.bool("feature_root4_F30", solver);
		root4_F31 = VariableFactory.bool("feature_root4_F31", solver);
		root4_F96 = VariableFactory.bool("feature_root4_F96", solver);
	}
	
	private static void initializeFeatureAttributes(){
		featureAttrAtribute1 = new HashMap<String, IntVar>();
		featureAttrAtribute0 = new HashMap<String, IntVar>();
		
		featureAttrAtribute1.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F18"), "!=", 0));
		featureAttrAtribute0.put("root1_F18", VariableFactory.enumerated("root1_F18Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F18"), "!=", 0));
		featureAttrAtribute1.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F19"), "!=", 0));
		featureAttrAtribute0.put("root1_F19", VariableFactory.enumerated("root1_F19Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F19"), "!=", 0));
		featureAttrAtribute1.put("root1_F20", VariableFactory.enumerated("root1_F20Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F20"), "!=", 0));
		featureAttrAtribute0.put("root1_F20", VariableFactory.enumerated("root1_F20Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F20"), "!=", 0));
		featureAttrAtribute1.put("root1_F140", VariableFactory.enumerated("root1_F140Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F140"), "!=", 0));
		featureAttrAtribute0.put("root1_F140", VariableFactory.enumerated("root1_F140Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F140"), "!=", 0));
		featureAttrAtribute1.put("root1_F141", VariableFactory.enumerated("root1_F141Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F141"), "!=", 0));
		featureAttrAtribute0.put("root1_F141", VariableFactory.enumerated("root1_F141Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F141"), "!=", 0));
		featureAttrAtribute1.put("root1_F142", VariableFactory.enumerated("root1_F142Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F142"), "!=", 0));
		featureAttrAtribute0.put("root1_F142", VariableFactory.enumerated("root1_F142Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F142"), "!=", 0));
		featureAttrAtribute1.put("root1_F143", VariableFactory.enumerated("root1_F143Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F143"), "!=", 0));
		featureAttrAtribute0.put("root1_F143", VariableFactory.enumerated("root1_F143Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F143"), "!=", 0));
		featureAttrAtribute1.put("root1_F144", VariableFactory.enumerated("root1_F144Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F144"), "!=", 0));
		featureAttrAtribute0.put("root1_F144", VariableFactory.enumerated("root1_F144Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F144"), "!=", 0));
		featureAttrAtribute1.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F22"), "!=", 0));
		featureAttrAtribute0.put("root1_F22", VariableFactory.enumerated("root1_F22Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F22"), "!=", 0));
		featureAttrAtribute1.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F54"), "!=", 0));
		featureAttrAtribute0.put("root1_F54", VariableFactory.enumerated("root1_F54Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F54"), "!=", 0));
		featureAttrAtribute1.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F55"), "!=", 0));
		featureAttrAtribute0.put("root1_F55", VariableFactory.enumerated("root1_F55Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F55"), "!=", 0));
		featureAttrAtribute1.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F56"), "!=", 0));
		featureAttrAtribute0.put("root1_F56", VariableFactory.enumerated("root1_F56Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F56"), "!=", 0));
		featureAttrAtribute1.put("root1_F132", VariableFactory.enumerated("root1_F132Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F132"), "!=", 0));
		featureAttrAtribute0.put("root1_F132", VariableFactory.enumerated("root1_F132Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F132"), "!=", 0));
		featureAttrAtribute1.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F58"), "!=", 0));
		featureAttrAtribute0.put("root1_F58", VariableFactory.enumerated("root1_F58Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F58"), "!=", 0));
		featureAttrAtribute1.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F59"), "!=", 0));
		featureAttrAtribute0.put("root1_F59", VariableFactory.enumerated("root1_F59Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F59"), "!=", 0));
		featureAttrAtribute1.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F60"), "!=", 0));
		featureAttrAtribute0.put("root1_F60", VariableFactory.enumerated("root1_F60Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F60"), "!=", 0));
		featureAttrAtribute1.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F61"), "!=", 0));
		featureAttrAtribute0.put("root1_F61", VariableFactory.enumerated("root1_F61Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F61"), "!=", 0));
		featureAttrAtribute1.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F62"), "!=", 0));
		featureAttrAtribute0.put("root1_F62", VariableFactory.enumerated("root1_F62Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F62"), "!=", 0));
		featureAttrAtribute1.put("root1_F63", VariableFactory.enumerated("root1_F63Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F63"), "!=", 0));
		featureAttrAtribute0.put("root1_F63", VariableFactory.enumerated("root1_F63Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F63"), "!=", 0));
		featureAttrAtribute1.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F75"), "!=", 0));
		featureAttrAtribute0.put("root1_F75", VariableFactory.enumerated("root1_F75Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F75"), "!=", 0));
		featureAttrAtribute1.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F76"), "!=", 0));
		featureAttrAtribute0.put("root1_F76", VariableFactory.enumerated("root1_F76Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F76"), "!=", 0));
		featureAttrAtribute1.put("root1_F118", VariableFactory.enumerated("root1_F118Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F118"), "!=", 0));
		featureAttrAtribute0.put("root1_F118", VariableFactory.enumerated("root1_F118Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F118"), "!=", 0));
		featureAttrAtribute1.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F78"), "!=", 0));
		featureAttrAtribute0.put("root1_F78", VariableFactory.enumerated("root1_F78Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F78"), "!=", 0));
		featureAttrAtribute1.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F79"), "!=", 0));
		featureAttrAtribute0.put("root1_F79", VariableFactory.enumerated("root1_F79Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F79"), "!=", 0));
		featureAttrAtribute1.put("root1_F80", VariableFactory.enumerated("root1_F80Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F80"), "!=", 0));
		featureAttrAtribute0.put("root1_F80", VariableFactory.enumerated("root1_F80Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F80"), "!=", 0));
		featureAttrAtribute1.put("root1_F124", VariableFactory.enumerated("root1_F124Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F124"), "!=", 0));
		featureAttrAtribute0.put("root1_F124", VariableFactory.enumerated("root1_F124Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F124"), "!=", 0));
		featureAttrAtribute1.put("root1_F125", VariableFactory.enumerated("root1_F125Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F125"), "!=", 0));
		featureAttrAtribute0.put("root1_F125", VariableFactory.enumerated("root1_F125Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F125"), "!=", 0));
		featureAttrAtribute1.put("root1_F126", VariableFactory.enumerated("root1_F126Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F126"), "!=", 0));
		featureAttrAtribute0.put("root1_F126", VariableFactory.enumerated("root1_F126Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F126"), "!=", 0));
		featureAttrAtribute1.put("root1_F127", VariableFactory.enumerated("root1_F127Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F127"), "!=", 0));
		featureAttrAtribute0.put("root1_F127", VariableFactory.enumerated("root1_F127Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F127"), "!=", 0));
		featureAttrAtribute1.put("root1_F128", VariableFactory.enumerated("root1_F128Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F128"), "!=", 0));
		featureAttrAtribute0.put("root1_F128", VariableFactory.enumerated("root1_F128Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F128"), "!=", 0));
		featureAttrAtribute1.put("root1_F129", VariableFactory.enumerated("root1_F129Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F129"), "!=", 0));
		featureAttrAtribute0.put("root1_F129", VariableFactory.enumerated("root1_F129Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F129"), "!=", 0));
		featureAttrAtribute1.put("root1_F130", VariableFactory.enumerated("root1_F130Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F130"), "!=", 0));
		featureAttrAtribute0.put("root1_F130", VariableFactory.enumerated("root1_F130Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F130"), "!=", 0));
		featureAttrAtribute1.put("root1_F131", VariableFactory.enumerated("root1_F131Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F131"), "!=", 0));
		featureAttrAtribute0.put("root1_F131", VariableFactory.enumerated("root1_F131Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F131"), "!=", 0));
		featureAttrAtribute1.put("root1_F86", VariableFactory.enumerated("root1_F86Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F86"), "!=", 0));
		featureAttrAtribute0.put("root1_F86", VariableFactory.enumerated("root1_F86Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F86"), "!=", 0));
		featureAttrAtribute1.put("root1_F82", VariableFactory.enumerated("root1_F82Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F82"), "!=", 0));
		featureAttrAtribute0.put("root1_F82", VariableFactory.enumerated("root1_F82Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F82"), "!=", 0));
		featureAttrAtribute1.put("root1_F83", VariableFactory.enumerated("root1_F83Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F83"), "!=", 0));
		featureAttrAtribute0.put("root1_F83", VariableFactory.enumerated("root1_F83Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F83"), "!=", 0));
		featureAttrAtribute1.put("root1_F84", VariableFactory.enumerated("root1_F84Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F84"), "!=", 0));
		featureAttrAtribute0.put("root1_F84", VariableFactory.enumerated("root1_F84Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F84"), "!=", 0));
		featureAttrAtribute1.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F65"), "!=", 0));
		featureAttrAtribute0.put("root1_F65", VariableFactory.enumerated("root1_F65Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F65"), "!=", 0));
		featureAttrAtribute1.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F66"), "!=", 0));
		featureAttrAtribute0.put("root1_F66", VariableFactory.enumerated("root1_F66Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F66"), "!=", 0));
		featureAttrAtribute1.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F67"), "!=", 0));
		featureAttrAtribute0.put("root1_F67", VariableFactory.enumerated("root1_F67Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F67"), "=", 0));
		featureAttrAtribute1.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F68"), "!=", 0));
		featureAttrAtribute0.put("root1_F68", VariableFactory.enumerated("root1_F68Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F68"), "!=", 0));
		featureAttrAtribute1.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F69"), "!=", 0));
		featureAttrAtribute0.put("root1_F69", VariableFactory.enumerated("root1_F69Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F69"), "!=", 0));
		featureAttrAtribute1.put("root1_F25", VariableFactory.enumerated("root1_F25Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F25"), "!=", 0));
		featureAttrAtribute0.put("root1_F25", VariableFactory.enumerated("root1_F25Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F25"), "!=", 0));
		featureAttrAtribute1.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F74"), "!=", 0));
		featureAttrAtribute0.put("root1_F74", VariableFactory.enumerated("root1_F74Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F74"), "!=", 0));
		featureAttrAtribute1.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F2"), "!=", 0));
		featureAttrAtribute0.put("root1_F2", VariableFactory.enumerated("root1_F2Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F2"), "!=", 0));
		featureAttrAtribute1.put("root1_F70", VariableFactory.enumerated("root1_F70Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F70"), "!=", 0));
		featureAttrAtribute0.put("root1_F70", VariableFactory.enumerated("root1_F70Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F70"), "!=", 0));
		featureAttrAtribute1.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F71"), "!=", 0));
		featureAttrAtribute0.put("root1_F71", VariableFactory.enumerated("root1_F71Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F71"), "!=", 0));
		featureAttrAtribute1.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F72"), "!=", 0));
		featureAttrAtribute0.put("root1_F72", VariableFactory.enumerated("root1_F72Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F72"), "!=", 0));
		featureAttrAtribute1.put("root1_F100", VariableFactory.enumerated("root1_F100Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F100"), "!=", 0));
		featureAttrAtribute0.put("root1_F100", VariableFactory.enumerated("root1_F100Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F100"), "!=", 0));
		featureAttrAtribute1.put("root1_F101", VariableFactory.enumerated("root1_F101Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F101"), "!=", 0));
		featureAttrAtribute0.put("root1_F101", VariableFactory.enumerated("root1_F101Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F101"), "!=", 0));
		featureAttrAtribute1.put("root1_F102", VariableFactory.enumerated("root1_F102Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F102"), "!=", 0));
		featureAttrAtribute0.put("root1_F102", VariableFactory.enumerated("root1_F102Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F102"), "!=", 0));
		featureAttrAtribute1.put("root1_F103", VariableFactory.enumerated("root1_F103Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F103"), "!=", 0));
		featureAttrAtribute0.put("root1_F103", VariableFactory.enumerated("root1_F103Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F103"), "!=", 0));
		featureAttrAtribute1.put("root1_F104", VariableFactory.enumerated("root1_F104Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F104"), "!=", 0));
		featureAttrAtribute0.put("root1_F104", VariableFactory.enumerated("root1_F104Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F104"), "!=", 0));
		featureAttrAtribute1.put("root1_F105", VariableFactory.enumerated("root1_F105Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F105"), "!=", 0));
		featureAttrAtribute0.put("root1_F105", VariableFactory.enumerated("root1_F105Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F105"), "!=", 0));
		featureAttrAtribute1.put("root1_F106", VariableFactory.enumerated("root1_F106Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F106"), "!=", 0));
		featureAttrAtribute0.put("root1_F106", VariableFactory.enumerated("root1_F106Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F106"), "!=", 0));
		featureAttrAtribute1.put("root1_F107", VariableFactory.enumerated("root1_F107Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F107"), "!=", 0));
		featureAttrAtribute0.put("root1_F107", VariableFactory.enumerated("root1_F107Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F107"), "!=", 0));
		featureAttrAtribute1.put("root1_F108", VariableFactory.enumerated("root1_F108Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F108"), "!=", 0));
		featureAttrAtribute0.put("root1_F108", VariableFactory.enumerated("root1_F108Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F108"), "!=", 0));
		featureAttrAtribute1.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F4"), "!=", 0));
		featureAttrAtribute0.put("root1_F4", VariableFactory.enumerated("root1_F4Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F4"), "!=", 0));
		featureAttrAtribute1.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute1", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F8"), "!=", 0));
		featureAttrAtribute0.put("root1_F8", VariableFactory.enumerated("root1_F8Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F8"), "!=", 0));
		featureAttrAtribute1.put("root1_F9", VariableFactory.enumerated("root1_F9Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F9"), "!=", 0));
		featureAttrAtribute0.put("root1_F9", VariableFactory.enumerated("root1_F9Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F9"), "!=", 0));
		featureAttrAtribute1.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F10"), "!=", 0));
		featureAttrAtribute0.put("root1_F10", VariableFactory.enumerated("root1_F10Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F10"), "!=", 0));
		featureAttrAtribute1.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F11"), "!=", 0));
		featureAttrAtribute0.put("root1_F11", VariableFactory.enumerated("root1_F11Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F11"), "!=", 0));
		featureAttrAtribute1.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F27"), "!=", 0));
		featureAttrAtribute0.put("root1_F27", VariableFactory.enumerated("root1_F27Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F27"), "!=", 0));
		featureAttrAtribute1.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F28"), "!=", 0));
		featureAttrAtribute0.put("root1_F28", VariableFactory.enumerated("root1_F28Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F28, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F28"), "!=", 0));
		featureAttrAtribute1.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F29"), "!=", 0));
		featureAttrAtribute0.put("root1_F29", VariableFactory.enumerated("root1_F29Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F29"), "!=", 0));
		featureAttrAtribute1.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F30"), "!=", 0));
		featureAttrAtribute0.put("root1_F30", VariableFactory.enumerated("root1_F30Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F30"), "!=", 0));
		featureAttrAtribute1.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F31"), "!=", 0));
		featureAttrAtribute0.put("root1_F31", VariableFactory.enumerated("root1_F31Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F31"), "!=", 0));
		featureAttrAtribute1.put("root1_F87", VariableFactory.enumerated("root1_F87Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F87"), "!=", 0));
		featureAttrAtribute0.put("root1_F87", VariableFactory.enumerated("root1_F87Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F87"), "!=", 0));
		featureAttrAtribute1.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F33"), "!=", 0));
		featureAttrAtribute0.put("root1_F33", VariableFactory.enumerated("root1_F33Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F33"), "!=", 0));
		featureAttrAtribute1.put("root1_F147", VariableFactory.enumerated("root1_F147Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F147"), "!=", 0));
		featureAttrAtribute0.put("root1_F147", VariableFactory.enumerated("root1_F147Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F147"), "!=", 0));
		featureAttrAtribute1.put("root1_F148", VariableFactory.enumerated("root1_F148Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F148"), "!=", 0));
		featureAttrAtribute0.put("root1_F148", VariableFactory.enumerated("root1_F148Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F148"), "!=", 0));
		featureAttrAtribute1.put("root1_F149", VariableFactory.enumerated("root1_F149Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F149"), "!=", 0));
		featureAttrAtribute0.put("root1_F149", VariableFactory.enumerated("root1_F149Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F149"), "!=", 0));
		featureAttrAtribute1.put("root1_F150", VariableFactory.enumerated("root1_F150Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F150"), "!=", 0));
		featureAttrAtribute0.put("root1_F150", VariableFactory.enumerated("root1_F150Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F150"), "!=", 0));
		featureAttrAtribute1.put("root1_F151", VariableFactory.enumerated("root1_F151Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F151"), "!=", 0));
		featureAttrAtribute0.put("root1_F151", VariableFactory.enumerated("root1_F151Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F151"), "!=", 0));
		featureAttrAtribute1.put("root1_F152", VariableFactory.enumerated("root1_F152Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F152"), "!=", 0));
		featureAttrAtribute0.put("root1_F152", VariableFactory.enumerated("root1_F152Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F152"), "!=", 0));
		featureAttrAtribute1.put("root1_F96", VariableFactory.enumerated("root1_F96Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F96"), "!=", 0));
		featureAttrAtribute0.put("root1_F96", VariableFactory.enumerated("root1_F96Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F96"), "!=", 0));
		featureAttrAtribute1.put("root1_F97", VariableFactory.enumerated("root1_F97Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F97"), "!=", 0));
		featureAttrAtribute0.put("root1_F97", VariableFactory.enumerated("root1_F97Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F97"), "!=", 0));
		featureAttrAtribute1.put("root1_F119", VariableFactory.enumerated("root1_F119Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F119"), "!=", 0));
		featureAttrAtribute0.put("root1_F119", VariableFactory.enumerated("root1_F119Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F119"), "!=", 0));
		featureAttrAtribute1.put("root1_F120", VariableFactory.enumerated("root1_F120Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F120"), "!=", 0));
		featureAttrAtribute0.put("root1_F120", VariableFactory.enumerated("root1_F120Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F120"), "!=", 0));
		featureAttrAtribute1.put("root1_F121", VariableFactory.enumerated("root1_F121Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F121"), "!=", 0));
		featureAttrAtribute0.put("root1_F121", VariableFactory.enumerated("root1_F121Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F121"), "!=", 0));
		featureAttrAtribute1.put("root1_F122", VariableFactory.enumerated("root1_F122Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F122"), "!=", 0));
		featureAttrAtribute0.put("root1_F122", VariableFactory.enumerated("root1_F122Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F122"), "!=", 0));
		featureAttrAtribute1.put("root1_F123", VariableFactory.enumerated("root1_F123Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F123"), "!=", 0));
		featureAttrAtribute0.put("root1_F123", VariableFactory.enumerated("root1_F123Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F123"), "!=", 0));
		featureAttrAtribute1.put("root1_F99", VariableFactory.enumerated("root1_F99Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F99"), "!=", 0));
		featureAttrAtribute0.put("root1_F99", VariableFactory.enumerated("root1_F99Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F99"), "!=", 0));
		featureAttrAtribute1.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F37"), "!=", 0));
		featureAttrAtribute0.put("root1_F37", VariableFactory.enumerated("root1_F37Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F37"), "!=", 0));
		featureAttrAtribute1.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F38"), "!=", 0));
		featureAttrAtribute0.put("root1_F38", VariableFactory.enumerated("root1_F38Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F38"), "!=", 0));
		featureAttrAtribute1.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F39"), "!=", 0));
		featureAttrAtribute0.put("root1_F39", VariableFactory.enumerated("root1_F39Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F39"), "!=", 0));
		featureAttrAtribute1.put("root1_F159", VariableFactory.enumerated("root1_F159Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F159"), "!=", 0));
		featureAttrAtribute0.put("root1_F159", VariableFactory.enumerated("root1_F159Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F159"), "!=", 0));
		featureAttrAtribute1.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F41"), "!=", 0));
		featureAttrAtribute0.put("root1_F41", VariableFactory.enumerated("root1_F41Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F41"), "!=", 0));
		featureAttrAtribute1.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F46"), "!=", 0));
		featureAttrAtribute0.put("root1_F46", VariableFactory.enumerated("root1_F46Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F46"), "!=", 0));
		featureAttrAtribute1.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F47"), "!=", 0));
		featureAttrAtribute0.put("root1_F47", VariableFactory.enumerated("root1_F47Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F47"), "!=", 0));
		featureAttrAtribute1.put("root1_F109", VariableFactory.enumerated("root1_F109Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F109"), "!=", 0));
		featureAttrAtribute0.put("root1_F109", VariableFactory.enumerated("root1_F109Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F109"), "!=", 0));
		featureAttrAtribute1.put("root1_F110", VariableFactory.enumerated("root1_F110Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F110"), "!=", 0));
		featureAttrAtribute0.put("root1_F110", VariableFactory.enumerated("root1_F110Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F110"), "!=", 0));
		featureAttrAtribute1.put("root1_F136", VariableFactory.enumerated("root1_F136Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F136"), "!=", 0));
		featureAttrAtribute0.put("root1_F136", VariableFactory.enumerated("root1_F136Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F136"), "!=", 0));
		featureAttrAtribute1.put("root1_F137", VariableFactory.enumerated("root1_F137Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F137"), "!=", 0));
		featureAttrAtribute0.put("root1_F137", VariableFactory.enumerated("root1_F137Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F137"), "!=", 0));
		featureAttrAtribute1.put("root1_F138", VariableFactory.enumerated("root1_F138Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F138"), "!=", 0));
		featureAttrAtribute0.put("root1_F138", VariableFactory.enumerated("root1_F138Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F138"), "!=", 0));
		featureAttrAtribute1.put("root1_F139", VariableFactory.enumerated("root1_F139Atribute1", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F139"), "!=", 0));
		featureAttrAtribute0.put("root1_F139", VariableFactory.enumerated("root1_F139Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F139"), "!=", 0));
		featureAttrAtribute1.put("root1_F145", VariableFactory.enumerated("root1_F145Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F145"), "!=", 0));
		featureAttrAtribute0.put("root1_F145", VariableFactory.enumerated("root1_F145Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F145"), "!=", 0));
		featureAttrAtribute1.put("root1_F146", VariableFactory.enumerated("root1_F146Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F146"), "!=", 0));
		featureAttrAtribute0.put("root1_F146", VariableFactory.enumerated("root1_F146Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F146"), "!=", 0));
		featureAttrAtribute1.put("root1_F113", VariableFactory.enumerated("root1_F113Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F113"), "!=", 0));
		featureAttrAtribute0.put("root1_F113", VariableFactory.enumerated("root1_F113Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F113"), "!=", 0));
		featureAttrAtribute1.put("root1_F114", VariableFactory.enumerated("root1_F114Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F114"), "!=", 0));
		featureAttrAtribute0.put("root1_F114", VariableFactory.enumerated("root1_F114Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F114"), "!=", 0));
		featureAttrAtribute1.put("root1_F158", VariableFactory.enumerated("root1_F158Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F158"), "!=", 0));
		featureAttrAtribute0.put("root1_F158", VariableFactory.enumerated("root1_F158Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F158"), "!=", 0));
		featureAttrAtribute1.put("root1_F116", VariableFactory.enumerated("root1_F116Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F116"), "!=", 0));
		featureAttrAtribute0.put("root1_F116", VariableFactory.enumerated("root1_F116Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F116"), "!=", 0));
		featureAttrAtribute1.put("root1_F117", VariableFactory.enumerated("root1_F117Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F117"), "!=", 0));
		featureAttrAtribute0.put("root1_F117", VariableFactory.enumerated("root1_F117Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F117"), "!=", 0));
		featureAttrAtribute1.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F49"), "!=", 0));
		featureAttrAtribute0.put("root1_F49", VariableFactory.enumerated("root1_F49Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F49"), "!=", 0));
		featureAttrAtribute1.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F43"), "!=", 0));
		featureAttrAtribute0.put("root1_F43", VariableFactory.enumerated("root1_F43Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F43"), "!=", 0));
		featureAttrAtribute1.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F44"), "!=", 0));
		featureAttrAtribute0.put("root1_F44", VariableFactory.enumerated("root1_F44Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F44"), "!=", 0));
		featureAttrAtribute1.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F45"), "!=", 0));
		featureAttrAtribute0.put("root1_F45", VariableFactory.enumerated("root1_F45Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F45"), "!=", 0));
		featureAttrAtribute1.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F35"), "!=", 0));
		featureAttrAtribute0.put("root1_F35", VariableFactory.enumerated("root1_F35Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F35"), "!=", 0));
		featureAttrAtribute1.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F13"), "!=", 0));
		featureAttrAtribute0.put("root1_F13", VariableFactory.enumerated("root1_F13Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F13"), "!=", 0));
		featureAttrAtribute1.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F50"), "!=", 0));
		featureAttrAtribute0.put("root1_F50", VariableFactory.enumerated("root1_F50Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F50"), "!=", 0));
		featureAttrAtribute1.put("root1_F153", VariableFactory.enumerated("root1_F153Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F153"), "!=", 0));
		featureAttrAtribute0.put("root1_F153", VariableFactory.enumerated("root1_F153Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F153"), "!=", 0));
		featureAttrAtribute1.put("root1_F154", VariableFactory.enumerated("root1_F154Atribute1", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F154"), "!=", 0));
		featureAttrAtribute0.put("root1_F154", VariableFactory.enumerated("root1_F154Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F154"), "!=", 0));
		featureAttrAtribute1.put("root1_F155", VariableFactory.enumerated("root1_F155Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F155"), "!=", 0));
		featureAttrAtribute0.put("root1_F155", VariableFactory.enumerated("root1_F155Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F155"), "!=", 0));
		featureAttrAtribute1.put("root1_F156", VariableFactory.enumerated("root1_F156Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F156"), "!=", 0));
		featureAttrAtribute0.put("root1_F156", VariableFactory.enumerated("root1_F156Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F156"), "!=", 0));
		featureAttrAtribute1.put("root1_F157", VariableFactory.enumerated("root1_F157Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F157"), "!=", 0));
		featureAttrAtribute0.put("root1_F157", VariableFactory.enumerated("root1_F157Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F157"), "!=", 0));
		featureAttrAtribute1.put("root1_F133", VariableFactory.enumerated("root1_F133Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F133"), "!=", 0));
		featureAttrAtribute0.put("root1_F133", VariableFactory.enumerated("root1_F133Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F133"), "!=", 0));
		featureAttrAtribute1.put("root1_F134", VariableFactory.enumerated("root1_F134Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F134"), "!=", 0));
		featureAttrAtribute0.put("root1_F134", VariableFactory.enumerated("root1_F134Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F134"), "!=", 0));
		featureAttrAtribute1.put("root1_F135", VariableFactory.enumerated("root1_F135Atribute1", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F135"), "!=", 0));
		featureAttrAtribute0.put("root1_F135", VariableFactory.enumerated("root1_F135Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F135"), "!=", 0));
		featureAttrAtribute1.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F15"), "!=", 0));
		featureAttrAtribute0.put("root1_F15", VariableFactory.enumerated("root1_F15Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F15"), "!=", 0));
		featureAttrAtribute1.put("root1_F16", VariableFactory.enumerated("root1_F16Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F16"), "!=", 0));
		featureAttrAtribute0.put("root1_F16", VariableFactory.enumerated("root1_F16Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F16"), "!=", 0));
		featureAttrAtribute1.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F17"), "!=", 0));
		featureAttrAtribute0.put("root1_F17", VariableFactory.enumerated("root1_F17Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F17"), "!=", 0));
		featureAttrAtribute1.put("root1_F6", VariableFactory.enumerated("root1_F6Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F6"), "!=", 0));
		featureAttrAtribute0.put("root1_F6", VariableFactory.enumerated("root1_F6Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F6"), "!=", 0));
		featureAttrAtribute1.put("root1_F88", VariableFactory.enumerated("root1_F88Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F88"), "!=", 0));
		featureAttrAtribute0.put("root1_F88", VariableFactory.enumerated("root1_F88Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F88"), "!=", 0));
		featureAttrAtribute1.put("root1_F89", VariableFactory.enumerated("root1_F89Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F89"), "!=", 0));
		featureAttrAtribute0.put("root1_F89", VariableFactory.enumerated("root1_F89Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F89"), "!=", 0));
		featureAttrAtribute1.put("root1_F90", VariableFactory.enumerated("root1_F90Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F90"), "!=", 0));
		featureAttrAtribute0.put("root1_F90", VariableFactory.enumerated("root1_F90Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F90"), "!=", 0));
		featureAttrAtribute1.put("root1_F91", VariableFactory.enumerated("root1_F91Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F91"), "!=", 0));
		featureAttrAtribute0.put("root1_F91", VariableFactory.enumerated("root1_F91Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F91"), "!=", 0));
		featureAttrAtribute1.put("root1_F92", VariableFactory.enumerated("root1_F92Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F92"), "!=", 0));
		featureAttrAtribute0.put("root1_F92", VariableFactory.enumerated("root1_F92Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F92"), "!=", 0));
		featureAttrAtribute1.put("root1_F93", VariableFactory.enumerated("root1_F93Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F93"), "!=", 0));
		featureAttrAtribute0.put("root1_F93", VariableFactory.enumerated("root1_F93Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F93"), "!=", 0));
		featureAttrAtribute1.put("root1_F94", VariableFactory.enumerated("root1_F94Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root1_F94"), "!=", 0));
		featureAttrAtribute0.put("root1_F94", VariableFactory.enumerated("root1_F94Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root1_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root1_F94"), "!=", 0));
		featureAttrAtribute1.put("root2_F94", VariableFactory.enumerated("root2_F94Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F94"), "!=", 0));
		featureAttrAtribute0.put("root2_F94", VariableFactory.enumerated("root2_F94Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F94"), "!=", 0));
		featureAttrAtribute1.put("root2_F95", VariableFactory.enumerated("root2_F95Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F95"), "!=", 0));
		featureAttrAtribute0.put("root2_F95", VariableFactory.enumerated("root2_F95Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F95"), "!=", 0));
		featureAttrAtribute1.put("root2_F96", VariableFactory.enumerated("root2_F96Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F96"), "!=", 0));
		featureAttrAtribute0.put("root2_F96", VariableFactory.enumerated("root2_F96Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F96"), "!=", 0));
		featureAttrAtribute1.put("root2_F97", VariableFactory.enumerated("root2_F97Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F97"), "!=", 0));
		featureAttrAtribute0.put("root2_F97", VariableFactory.enumerated("root2_F97Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F97"), "!=", 0));
		featureAttrAtribute1.put("root2_F155", VariableFactory.enumerated("root2_F155Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F155"), "!=", 0));
		featureAttrAtribute0.put("root2_F155", VariableFactory.enumerated("root2_F155Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F155"), "!=", 0));
		featureAttrAtribute1.put("root2_F156", VariableFactory.enumerated("root2_F156Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F156"), "!=", 0));
		featureAttrAtribute0.put("root2_F156", VariableFactory.enumerated("root2_F156Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F156"), "!=", 0));
		featureAttrAtribute1.put("root2_F157", VariableFactory.enumerated("root2_F157Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F157"), "!=", 0));
		featureAttrAtribute0.put("root2_F157", VariableFactory.enumerated("root2_F157Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F157"), "!=", 0));
		featureAttrAtribute1.put("root2_F158", VariableFactory.enumerated("root2_F158Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F158"), "!=", 0));
		featureAttrAtribute0.put("root2_F158", VariableFactory.enumerated("root2_F158Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F158"), "!=", 0));
		featureAttrAtribute1.put("root2_F159", VariableFactory.enumerated("root2_F159Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F159"), "!=", 0));
		featureAttrAtribute0.put("root2_F159", VariableFactory.enumerated("root2_F159Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F159"), "!=", 0));
		featureAttrAtribute1.put("root2_F121", VariableFactory.enumerated("root2_F121Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F121"), "!=", 0));
		featureAttrAtribute0.put("root2_F121", VariableFactory.enumerated("root2_F121Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F121"), "!=", 0));
		featureAttrAtribute1.put("root2_F122", VariableFactory.enumerated("root2_F122Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F122"), "!=", 0));
		featureAttrAtribute0.put("root2_F122", VariableFactory.enumerated("root2_F122Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F122"), "!=", 0));
		featureAttrAtribute1.put("root2_F123", VariableFactory.enumerated("root2_F123Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F123"), "!=", 0));
		featureAttrAtribute0.put("root2_F123", VariableFactory.enumerated("root2_F123Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F123"), "!=", 0));
		featureAttrAtribute1.put("root2_F124", VariableFactory.enumerated("root2_F124Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F124"), "!=", 0));
		featureAttrAtribute0.put("root2_F124", VariableFactory.enumerated("root2_F124Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F124"), "!=", 0));
		featureAttrAtribute1.put("root2_F125", VariableFactory.enumerated("root2_F125Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F125"), "!=", 0));
		featureAttrAtribute0.put("root2_F125", VariableFactory.enumerated("root2_F125Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F125"), "!=", 0));
		featureAttrAtribute1.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F22"), "!=", 0));
		featureAttrAtribute0.put("root2_F22", VariableFactory.enumerated("root2_F22Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F22"), "!=", 0));
		featureAttrAtribute1.put("root2_F65", VariableFactory.enumerated("root2_F65Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F65"), "!=", 0));
		featureAttrAtribute0.put("root2_F65", VariableFactory.enumerated("root2_F65Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F65"), "!=", 0));
		featureAttrAtribute1.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F24"), "!=", 0));
		featureAttrAtribute0.put("root2_F24", VariableFactory.enumerated("root2_F24Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F24"), "!=", 0));
		featureAttrAtribute1.put("root2_F46", VariableFactory.enumerated("root2_F46Atribute1", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F46"), "!=", 0));
		featureAttrAtribute0.put("root2_F46", VariableFactory.enumerated("root2_F46Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F46"), "!=", 0));
		featureAttrAtribute1.put("root2_F110", VariableFactory.enumerated("root2_F110Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F110"), "!=", 0));
		featureAttrAtribute0.put("root2_F110", VariableFactory.enumerated("root2_F110Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F110"), "!=", 0));
		featureAttrAtribute1.put("root2_F111", VariableFactory.enumerated("root2_F111Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F111"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F111, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F111"), "!=", 0));
		featureAttrAtribute0.put("root2_F111", VariableFactory.enumerated("root2_F111Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F111"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F111, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F111"), "!=", 0));
		featureAttrAtribute1.put("root2_F131", VariableFactory.enumerated("root2_F131Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F131"), "!=", 0));
		featureAttrAtribute0.put("root2_F131", VariableFactory.enumerated("root2_F131Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F131"), "!=", 0));
		featureAttrAtribute1.put("root2_F132", VariableFactory.enumerated("root2_F132Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F132"), "!=", 0));
		featureAttrAtribute0.put("root2_F132", VariableFactory.enumerated("root2_F132Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F132"), "!=", 0));
		featureAttrAtribute1.put("root2_F113", VariableFactory.enumerated("root2_F113Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F113"), "!=", 0));
		featureAttrAtribute0.put("root2_F113", VariableFactory.enumerated("root2_F113Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F113"), "!=", 0));
		featureAttrAtribute1.put("root2_F114", VariableFactory.enumerated("root2_F114Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F114"), "!=", 0));
		featureAttrAtribute0.put("root2_F114", VariableFactory.enumerated("root2_F114Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F114"), "!=", 0));
		featureAttrAtribute1.put("root2_F115", VariableFactory.enumerated("root2_F115Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F115"), "!=", 0));
		featureAttrAtribute0.put("root2_F115", VariableFactory.enumerated("root2_F115Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F115"), "!=", 0));
		featureAttrAtribute1.put("root2_F116", VariableFactory.enumerated("root2_F116Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F116"), "!=", 0));
		featureAttrAtribute0.put("root2_F116", VariableFactory.enumerated("root2_F116Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F116"), "!=", 0));
		featureAttrAtribute1.put("root2_F117", VariableFactory.enumerated("root2_F117Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F117"), "!=", 0));
		featureAttrAtribute0.put("root2_F117", VariableFactory.enumerated("root2_F117Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F117"), "!=", 0));
		featureAttrAtribute1.put("root2_F118", VariableFactory.enumerated("root2_F118Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F118"), "!=", 0));
		featureAttrAtribute0.put("root2_F118", VariableFactory.enumerated("root2_F118Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F118"), "!=", 0));
		featureAttrAtribute1.put("root2_F119", VariableFactory.enumerated("root2_F119Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F119"), "!=", 0));
		featureAttrAtribute0.put("root2_F119", VariableFactory.enumerated("root2_F119Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F119"), "!=", 0));
		featureAttrAtribute1.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F26"), "!=", 0));
		featureAttrAtribute0.put("root2_F26", VariableFactory.enumerated("root2_F26Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F26"), "!=", 0));
		featureAttrAtribute1.put("root2_F27", VariableFactory.enumerated("root2_F27Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F27"), "!=", 0));
		featureAttrAtribute0.put("root2_F27", VariableFactory.enumerated("root2_F27Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F27"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F27, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F27"), "!=", 0));
		featureAttrAtribute1.put("root2_F48", VariableFactory.enumerated("root2_F48Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F48"), "!=", 0));
		featureAttrAtribute0.put("root2_F48", VariableFactory.enumerated("root2_F48Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F48"), "!=", 0));
		featureAttrAtribute1.put("root2_F50", VariableFactory.enumerated("root2_F50Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F50"), "!=", 0));
		featureAttrAtribute0.put("root2_F50", VariableFactory.enumerated("root2_F50Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F50"), "!=", 0));
		featureAttrAtribute1.put("root2_F62", VariableFactory.enumerated("root2_F62Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F62"), "!=", 0));
		featureAttrAtribute0.put("root2_F62", VariableFactory.enumerated("root2_F62Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F62"), "!=", 0));
		featureAttrAtribute1.put("root2_F133", VariableFactory.enumerated("root2_F133Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F133"), "!=", 0));
		featureAttrAtribute0.put("root2_F133", VariableFactory.enumerated("root2_F133Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F133"), "!=", 0));
		featureAttrAtribute1.put("root2_F134", VariableFactory.enumerated("root2_F134Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F134"), "!=", 0));
		featureAttrAtribute0.put("root2_F134", VariableFactory.enumerated("root2_F134Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F134"), "!=", 0));
		featureAttrAtribute1.put("root2_F135", VariableFactory.enumerated("root2_F135Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F135"), "!=", 0));
		featureAttrAtribute0.put("root2_F135", VariableFactory.enumerated("root2_F135Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F135"), "!=", 0));
		featureAttrAtribute1.put("root2_F136", VariableFactory.enumerated("root2_F136Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F136"), "!=", 0));
		featureAttrAtribute0.put("root2_F136", VariableFactory.enumerated("root2_F136Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F136"), "!=", 0));
		featureAttrAtribute1.put("root2_F137", VariableFactory.enumerated("root2_F137Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F137"), "!=", 0));
		featureAttrAtribute0.put("root2_F137", VariableFactory.enumerated("root2_F137Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F137"), "!=", 0));
		featureAttrAtribute1.put("root2_F138", VariableFactory.enumerated("root2_F138Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F138"), "!=", 0));
		featureAttrAtribute0.put("root2_F138", VariableFactory.enumerated("root2_F138Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F138"), "!=", 0));
		featureAttrAtribute1.put("root2_F139", VariableFactory.enumerated("root2_F139Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F139"), "!=", 0));
		featureAttrAtribute0.put("root2_F139", VariableFactory.enumerated("root2_F139Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F139"), "!=", 0));
		featureAttrAtribute1.put("root2_F140", VariableFactory.enumerated("root2_F140Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F140"), "!=", 0));
		featureAttrAtribute0.put("root2_F140", VariableFactory.enumerated("root2_F140Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F140"), "!=", 0));
		featureAttrAtribute1.put("root2_F141", VariableFactory.enumerated("root2_F141Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F141"), "!=", 0));
		featureAttrAtribute0.put("root2_F141", VariableFactory.enumerated("root2_F141Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F141"), "!=", 0));
		featureAttrAtribute1.put("root2_F142", VariableFactory.enumerated("root2_F142Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F142"), "!=", 0));
		featureAttrAtribute0.put("root2_F142", VariableFactory.enumerated("root2_F142Atribute0", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F142"), "!=", 0));
		featureAttrAtribute1.put("root2_F81", VariableFactory.enumerated("root2_F81Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F81"), "!=", 0));
		featureAttrAtribute0.put("root2_F81", VariableFactory.enumerated("root2_F81Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F81"), "!=", 0));
		featureAttrAtribute1.put("root2_F126", VariableFactory.enumerated("root2_F126Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F126"), "!=", 0));
		featureAttrAtribute0.put("root2_F126", VariableFactory.enumerated("root2_F126Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F126"), "!=", 0));
		featureAttrAtribute1.put("root2_F127", VariableFactory.enumerated("root2_F127Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F127"), "!=", 0));
		featureAttrAtribute0.put("root2_F127", VariableFactory.enumerated("root2_F127Atribute0", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F127"), "!=", 0));
		featureAttrAtribute1.put("root2_F128", VariableFactory.enumerated("root2_F128Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F128"), "!=", 0));
		featureAttrAtribute0.put("root2_F128", VariableFactory.enumerated("root2_F128Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F128"), "!=", 0));
		featureAttrAtribute1.put("root2_F129", VariableFactory.enumerated("root2_F129Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F129"), "!=", 0));
		featureAttrAtribute0.put("root2_F129", VariableFactory.enumerated("root2_F129Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F129"), "!=", 0));
		featureAttrAtribute1.put("root2_F130", VariableFactory.enumerated("root2_F130Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F130"), "!=", 0));
		featureAttrAtribute0.put("root2_F130", VariableFactory.enumerated("root2_F130Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F130"), "!=", 0));
		featureAttrAtribute1.put("root2_F83", VariableFactory.enumerated("root2_F83Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F83"), "!=", 0));
		featureAttrAtribute0.put("root2_F83", VariableFactory.enumerated("root2_F83Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F83"), "!=", 0));
		featureAttrAtribute1.put("root2_F84", VariableFactory.enumerated("root2_F84Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F84"), "!=", 0));
		featureAttrAtribute0.put("root2_F84", VariableFactory.enumerated("root2_F84Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F84"), "!=", 0));
		featureAttrAtribute1.put("root2_F85", VariableFactory.enumerated("root2_F85Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F85, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F85"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F85, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F85"), "!=", 0));
		featureAttrAtribute0.put("root2_F85", VariableFactory.enumerated("root2_F85Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F85, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F85"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F85, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F85"), "!=", 0));
		featureAttrAtribute1.put("root2_F86", VariableFactory.enumerated("root2_F86Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F86"), "!=", 0));
		featureAttrAtribute0.put("root2_F86", VariableFactory.enumerated("root2_F86Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F86"), "!=", 0));
		featureAttrAtribute1.put("root2_F87", VariableFactory.enumerated("root2_F87Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F87"), "!=", 0));
		featureAttrAtribute0.put("root2_F87", VariableFactory.enumerated("root2_F87Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F87"), "!=", 0));
		featureAttrAtribute1.put("root2_F77", VariableFactory.enumerated("root2_F77Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F77"), "!=", 0));
		featureAttrAtribute0.put("root2_F77", VariableFactory.enumerated("root2_F77Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F77"), "!=", 0));
		featureAttrAtribute1.put("root2_F78", VariableFactory.enumerated("root2_F78Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F78"), "!=", 0));
		featureAttrAtribute0.put("root2_F78", VariableFactory.enumerated("root2_F78Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F78"), "!=", 0));
		featureAttrAtribute1.put("root2_F67", VariableFactory.enumerated("root2_F67Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F67"), "!=", 0));
		featureAttrAtribute0.put("root2_F67", VariableFactory.enumerated("root2_F67Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F67"), "!=", 0));
		featureAttrAtribute1.put("root2_F68", VariableFactory.enumerated("root2_F68Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F68"), "!=", 0));
		featureAttrAtribute0.put("root2_F68", VariableFactory.enumerated("root2_F68Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F68"), "!=", 0));
		featureAttrAtribute1.put("root2_F98", VariableFactory.enumerated("root2_F98Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F98"), "!=", 0));
		featureAttrAtribute0.put("root2_F98", VariableFactory.enumerated("root2_F98Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F98"), "!=", 0));
		featureAttrAtribute1.put("root2_F99", VariableFactory.enumerated("root2_F99Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F99"), "!=", 0));
		featureAttrAtribute0.put("root2_F99", VariableFactory.enumerated("root2_F99Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F99"), "!=", 0));
		featureAttrAtribute1.put("root2_F100", VariableFactory.enumerated("root2_F100Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F100"), "!=", 0));
		featureAttrAtribute0.put("root2_F100", VariableFactory.enumerated("root2_F100Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F100"), "!=", 0));
		featureAttrAtribute1.put("root2_F70", VariableFactory.enumerated("root2_F70Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F70"), "!=", 0));
		featureAttrAtribute0.put("root2_F70", VariableFactory.enumerated("root2_F70Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F70"), "!=", 0));
		featureAttrAtribute1.put("root2_F71", VariableFactory.enumerated("root2_F71Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F71"), "!=", 0));
		featureAttrAtribute0.put("root2_F71", VariableFactory.enumerated("root2_F71Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F71"), "!=", 0));
		featureAttrAtribute1.put("root2_F72", VariableFactory.enumerated("root2_F72Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F72"), "!=", 0));
		featureAttrAtribute0.put("root2_F72", VariableFactory.enumerated("root2_F72Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F72"), "!=", 0));
		featureAttrAtribute1.put("root2_F73", VariableFactory.enumerated("root2_F73Atribute1", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F73"), "!=", 0));
		featureAttrAtribute0.put("root2_F73", VariableFactory.enumerated("root2_F73Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F73"), "!=", 0));
		featureAttrAtribute1.put("root2_F53", VariableFactory.enumerated("root2_F53Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F53"), "!=", 0));
		featureAttrAtribute0.put("root2_F53", VariableFactory.enumerated("root2_F53Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F53"), "!=", 0));
		featureAttrAtribute1.put("root2_F80", VariableFactory.enumerated("root2_F80Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F80"), "!=", 0));
		featureAttrAtribute0.put("root2_F80", VariableFactory.enumerated("root2_F80Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F80"), "!=", 0));
		featureAttrAtribute1.put("root2_F55", VariableFactory.enumerated("root2_F55Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F55"), "!=", 0));
		featureAttrAtribute0.put("root2_F55", VariableFactory.enumerated("root2_F55Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F55"), "!=", 0));
		featureAttrAtribute1.put("root2_F4", VariableFactory.enumerated("root2_F4Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F4"), "!=", 0));
		featureAttrAtribute0.put("root2_F4", VariableFactory.enumerated("root2_F4Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F4"), "!=", 0));
		featureAttrAtribute1.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F19"), "!=", 0));
		featureAttrAtribute0.put("root2_F19", VariableFactory.enumerated("root2_F19Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F19"), "!=", 0));
		featureAttrAtribute1.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F20"), "!=", 0));
		featureAttrAtribute0.put("root2_F20", VariableFactory.enumerated("root2_F20Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F20"), "!=", 0));
		featureAttrAtribute1.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F6"), "!=", 0));
		featureAttrAtribute0.put("root2_F6", VariableFactory.enumerated("root2_F6Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F6"), "!=", 0));
		featureAttrAtribute1.put("root2_F56", VariableFactory.enumerated("root2_F56Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F56"), "!=", 0));
		featureAttrAtribute0.put("root2_F56", VariableFactory.enumerated("root2_F56Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F56"), "!=", 0));
		featureAttrAtribute1.put("root2_F57", VariableFactory.enumerated("root2_F57Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F57"), "!=", 0));
		featureAttrAtribute0.put("root2_F57", VariableFactory.enumerated("root2_F57Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F57"), "!=", 0));
		featureAttrAtribute1.put("root2_F9", VariableFactory.enumerated("root2_F9Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F9"), "!=", 0));
		featureAttrAtribute0.put("root2_F9", VariableFactory.enumerated("root2_F9Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F9"), "!=", 0));
		featureAttrAtribute1.put("root2_F10", VariableFactory.enumerated("root2_F10Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F10"), "!=", 0));
		featureAttrAtribute0.put("root2_F10", VariableFactory.enumerated("root2_F10Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F10"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F10, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F10"), "!=", 0));
		featureAttrAtribute1.put("root2_F88", VariableFactory.enumerated("root2_F88Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F88"), "!=", 0));
		featureAttrAtribute0.put("root2_F88", VariableFactory.enumerated("root2_F88Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F88"), "!=", 0));
		featureAttrAtribute1.put("root2_F89", VariableFactory.enumerated("root2_F89Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F89"), "!=", 0));
		featureAttrAtribute0.put("root2_F89", VariableFactory.enumerated("root2_F89Atribute0", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F89"), "!=", 0));
		featureAttrAtribute1.put("root2_F93", VariableFactory.enumerated("root2_F93Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F93"), "!=", 0));
		featureAttrAtribute0.put("root2_F93", VariableFactory.enumerated("root2_F93Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F93"), "!=", 0));
		featureAttrAtribute1.put("root2_F91", VariableFactory.enumerated("root2_F91Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F91"), "!=", 0));
		featureAttrAtribute0.put("root2_F91", VariableFactory.enumerated("root2_F91Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F91"), "!=", 0));
		featureAttrAtribute1.put("root2_F92", VariableFactory.enumerated("root2_F92Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F92"), "!=", 0));
		featureAttrAtribute0.put("root2_F92", VariableFactory.enumerated("root2_F92Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F92"), "!=", 0));
		featureAttrAtribute1.put("root2_F12", VariableFactory.enumerated("root2_F12Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F12"), "!=", 0));
		featureAttrAtribute0.put("root2_F12", VariableFactory.enumerated("root2_F12Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F12"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F12, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F12"), "!=", 0));
		featureAttrAtribute1.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F13"), "!=", 0));
		featureAttrAtribute0.put("root2_F13", VariableFactory.enumerated("root2_F13Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F13"), "!=", 0));
		featureAttrAtribute1.put("root2_F30", VariableFactory.enumerated("root2_F30Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F30"), "!=", 0));
		featureAttrAtribute0.put("root2_F30", VariableFactory.enumerated("root2_F30Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F30"), "!=", 0));
		featureAttrAtribute1.put("root2_F58", VariableFactory.enumerated("root2_F58Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F58"), "!=", 0));
		featureAttrAtribute0.put("root2_F58", VariableFactory.enumerated("root2_F58Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F58"), "!=", 0));
		featureAttrAtribute1.put("root2_F59", VariableFactory.enumerated("root2_F59Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F59"), "!=", 0));
		featureAttrAtribute0.put("root2_F59", VariableFactory.enumerated("root2_F59Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F59"), "!=", 0));
		featureAttrAtribute1.put("root2_F79", VariableFactory.enumerated("root2_F79Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F79"), "!=", 0));
		featureAttrAtribute0.put("root2_F79", VariableFactory.enumerated("root2_F79Atribute0", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F79"), "!=", 0));
		featureAttrAtribute1.put("root2_F61", VariableFactory.enumerated("root2_F61Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F61"), "!=", 0));
		featureAttrAtribute0.put("root2_F61", VariableFactory.enumerated("root2_F61Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F61"), "!=", 0));
		featureAttrAtribute1.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F32"), "!=", 0));
		featureAttrAtribute0.put("root2_F32", VariableFactory.enumerated("root2_F32Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F32"), "!=", 0));
		featureAttrAtribute1.put("root2_F74", VariableFactory.enumerated("root2_F74Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F74"), "!=", 0));
		featureAttrAtribute0.put("root2_F74", VariableFactory.enumerated("root2_F74Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F74"), "!=", 0));
		featureAttrAtribute1.put("root2_F75", VariableFactory.enumerated("root2_F75Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F75"), "!=", 0));
		featureAttrAtribute0.put("root2_F75", VariableFactory.enumerated("root2_F75Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F75"), "!=", 0));
		featureAttrAtribute1.put("root2_F76", VariableFactory.enumerated("root2_F76Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F76"), "!=", 0));
		featureAttrAtribute0.put("root2_F76", VariableFactory.enumerated("root2_F76Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F76"), "!=", 0));
		featureAttrAtribute1.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F34"), "!=", 0));
		featureAttrAtribute0.put("root2_F34", VariableFactory.enumerated("root2_F34Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F34"), "!=", 0));
		featureAttrAtribute1.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F35"), "!=", 0));
		featureAttrAtribute0.put("root2_F35", VariableFactory.enumerated("root2_F35Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F35"), "!=", 0));
		featureAttrAtribute1.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F36"), "!=", 0));
		featureAttrAtribute0.put("root2_F36", VariableFactory.enumerated("root2_F36Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F36"), "!=", 0));
		featureAttrAtribute1.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F37"), "!=", 0));
		featureAttrAtribute0.put("root2_F37", VariableFactory.enumerated("root2_F37Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F37"), "!=", 0));
		featureAttrAtribute1.put("root2_F143", VariableFactory.enumerated("root2_F143Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F143"), "!=", 0));
		featureAttrAtribute0.put("root2_F143", VariableFactory.enumerated("root2_F143Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F143"), "!=", 0));
		featureAttrAtribute1.put("root2_F144", VariableFactory.enumerated("root2_F144Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F144"), "!=", 0));
		featureAttrAtribute0.put("root2_F144", VariableFactory.enumerated("root2_F144Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F144"), "!=", 0));
		featureAttrAtribute1.put("root2_F145", VariableFactory.enumerated("root2_F145Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F145"), "!=", 0));
		featureAttrAtribute0.put("root2_F145", VariableFactory.enumerated("root2_F145Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F145"), "!=", 0));
		featureAttrAtribute1.put("root2_F146", VariableFactory.enumerated("root2_F146Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F146"), "!=", 0));
		featureAttrAtribute0.put("root2_F146", VariableFactory.enumerated("root2_F146Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F146"), "!=", 0));
		featureAttrAtribute1.put("root2_F147", VariableFactory.enumerated("root2_F147Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F147"), "!=", 0));
		featureAttrAtribute0.put("root2_F147", VariableFactory.enumerated("root2_F147Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F147"), "!=", 0));
		featureAttrAtribute1.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F39"), "!=", 0));
		featureAttrAtribute0.put("root2_F39", VariableFactory.enumerated("root2_F39Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F39"), "!=", 0));
		featureAttrAtribute1.put("root2_F40", VariableFactory.enumerated("root2_F40Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F40"), "!=", 0));
		featureAttrAtribute0.put("root2_F40", VariableFactory.enumerated("root2_F40Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F40"), "!=", 0));
		featureAttrAtribute1.put("root2_F41", VariableFactory.enumerated("root2_F41Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F41"), "!=", 0));
		featureAttrAtribute0.put("root2_F41", VariableFactory.enumerated("root2_F41Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F41"), "!=", 0));
		featureAttrAtribute1.put("root2_F101", VariableFactory.enumerated("root2_F101Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F101"), "!=", 0));
		featureAttrAtribute0.put("root2_F101", VariableFactory.enumerated("root2_F101Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F101"), "!=", 0));
		featureAttrAtribute1.put("root2_F102", VariableFactory.enumerated("root2_F102Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F102"), "!=", 0));
		featureAttrAtribute0.put("root2_F102", VariableFactory.enumerated("root2_F102Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F102"), "!=", 0));
		featureAttrAtribute1.put("root2_F103", VariableFactory.enumerated("root2_F103Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F103"), "!=", 0));
		featureAttrAtribute0.put("root2_F103", VariableFactory.enumerated("root2_F103Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F103"), "!=", 0));
		featureAttrAtribute1.put("root2_F104", VariableFactory.enumerated("root2_F104Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F104"), "!=", 0));
		featureAttrAtribute0.put("root2_F104", VariableFactory.enumerated("root2_F104Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F104"), "!=", 0));
		featureAttrAtribute1.put("root2_F105", VariableFactory.enumerated("root2_F105Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F105"), "!=", 0));
		featureAttrAtribute0.put("root2_F105", VariableFactory.enumerated("root2_F105Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F105"), "!=", 0));
		featureAttrAtribute1.put("root2_F106", VariableFactory.enumerated("root2_F106Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F106"), "!=", 0));
		featureAttrAtribute0.put("root2_F106", VariableFactory.enumerated("root2_F106Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F106"), "!=", 0));
		featureAttrAtribute1.put("root2_F107", VariableFactory.enumerated("root2_F107Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F107"), "!=", 0));
		featureAttrAtribute0.put("root2_F107", VariableFactory.enumerated("root2_F107Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F107"), "!=", 0));
		featureAttrAtribute1.put("root2_F108", VariableFactory.enumerated("root2_F108Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F108"), "!=", 0));
		featureAttrAtribute0.put("root2_F108", VariableFactory.enumerated("root2_F108Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F108"), "!=", 0));
		featureAttrAtribute1.put("root2_F109", VariableFactory.enumerated("root2_F109Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F109"), "!=", 0));
		featureAttrAtribute0.put("root2_F109", VariableFactory.enumerated("root2_F109Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F109"), "!=", 0));
		featureAttrAtribute1.put("root2_F43", VariableFactory.enumerated("root2_F43Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F43"), "!=", 0));
		featureAttrAtribute0.put("root2_F43", VariableFactory.enumerated("root2_F43Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F43"), "!=", 0));
		featureAttrAtribute1.put("root2_F148", VariableFactory.enumerated("root2_F148Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F148"), "!=", 0));
		featureAttrAtribute0.put("root2_F148", VariableFactory.enumerated("root2_F148Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F148"), "!=", 0));
		featureAttrAtribute1.put("root2_F149", VariableFactory.enumerated("root2_F149Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F149"), "!=", 0));
		featureAttrAtribute0.put("root2_F149", VariableFactory.enumerated("root2_F149Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F149"), "!=", 0));
		featureAttrAtribute1.put("root2_F150", VariableFactory.enumerated("root2_F150Atribute1", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F150"), "!=", 0));
		featureAttrAtribute0.put("root2_F150", VariableFactory.enumerated("root2_F150Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F150"), "!=", 0));
		featureAttrAtribute1.put("root2_F151", VariableFactory.enumerated("root2_F151Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F151"), "!=", 0));
		featureAttrAtribute0.put("root2_F151", VariableFactory.enumerated("root2_F151Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F151"), "!=", 0));
		featureAttrAtribute1.put("root2_F152", VariableFactory.enumerated("root2_F152Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F152"), "!=", 0));
		featureAttrAtribute0.put("root2_F152", VariableFactory.enumerated("root2_F152Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F152"), "!=", 0));
		featureAttrAtribute1.put("root2_F153", VariableFactory.enumerated("root2_F153Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F153"), "!=", 0));
		featureAttrAtribute0.put("root2_F153", VariableFactory.enumerated("root2_F153Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F153"), "!=", 0));
		featureAttrAtribute1.put("root2_F154", VariableFactory.enumerated("root2_F154Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F154"), "!=", 0));
		featureAttrAtribute0.put("root2_F154", VariableFactory.enumerated("root2_F154Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F154"), "!=", 0));
		featureAttrAtribute1.put("root2_F45", VariableFactory.enumerated("root2_F45Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F45"), "!=", 0));
		featureAttrAtribute0.put("root2_F45", VariableFactory.enumerated("root2_F45Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F45"), "!=", 0));
		featureAttrAtribute1.put("root2_F16", VariableFactory.enumerated("root2_F16Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F16"), "!=", 0));
		featureAttrAtribute0.put("root2_F16", VariableFactory.enumerated("root2_F16Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F16"), "!=", 0));
		featureAttrAtribute1.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute1", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F17"), "!=", 0));
		featureAttrAtribute0.put("root2_F17", VariableFactory.enumerated("root2_F17Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F17"), "!=", 0));
		featureAttrAtribute1.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute1", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root2_F18"), "!=", 0));
		featureAttrAtribute0.put("root2_F18", VariableFactory.enumerated("root2_F18Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root2_F18, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root2_F18"), "!=", 0));
		featureAttrAtribute1.put("root3_F1", VariableFactory.enumerated("root3_F1Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F1"), "!=", 0));
		featureAttrAtribute0.put("root3_F1", VariableFactory.enumerated("root3_F1Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F1, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F1"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F1, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F1"), "!=", 0));
		featureAttrAtribute1.put("root3_F2", VariableFactory.enumerated("root3_F2Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F2"), "!=", 0));
		featureAttrAtribute0.put("root3_F2", VariableFactory.enumerated("root3_F2Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F2"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F2, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F2"), "!=", 0));
		featureAttrAtribute1.put("root3_F129", VariableFactory.enumerated("root3_F129Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F129"), "!=", 0));
		featureAttrAtribute0.put("root3_F129", VariableFactory.enumerated("root3_F129Atribute0", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F129"), "!=", 0));
		featureAttrAtribute1.put("root3_F130", VariableFactory.enumerated("root3_F130Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F130"), "!=", 0));
		featureAttrAtribute0.put("root3_F130", VariableFactory.enumerated("root3_F130Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F130"), "!=", 0));
		featureAttrAtribute1.put("root3_F131", VariableFactory.enumerated("root3_F131Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F131"), "!=", 0));
		featureAttrAtribute0.put("root3_F131", VariableFactory.enumerated("root3_F131Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F131"), "!=", 0));
		featureAttrAtribute1.put("root3_F132", VariableFactory.enumerated("root3_F132Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F132"), "!=", 0));
		featureAttrAtribute0.put("root3_F132", VariableFactory.enumerated("root3_F132Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F132"), "!=", 0));
		featureAttrAtribute1.put("root3_F133", VariableFactory.enumerated("root3_F133Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F133"), "!=", 0));
		featureAttrAtribute0.put("root3_F133", VariableFactory.enumerated("root3_F133Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F133"), "!=", 0));
		featureAttrAtribute1.put("root3_F134", VariableFactory.enumerated("root3_F134Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F134"), "!=", 0));
		featureAttrAtribute0.put("root3_F134", VariableFactory.enumerated("root3_F134Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F134"), "!=", 0));
		featureAttrAtribute1.put("root3_F135", VariableFactory.enumerated("root3_F135Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F135"), "!=", 0));
		featureAttrAtribute0.put("root3_F135", VariableFactory.enumerated("root3_F135Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F135"), "!=", 0));
		featureAttrAtribute1.put("root3_F136", VariableFactory.enumerated("root3_F136Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F136"), "!=", 0));
		featureAttrAtribute0.put("root3_F136", VariableFactory.enumerated("root3_F136Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F136"), "!=", 0));
		featureAttrAtribute1.put("root3_F137", VariableFactory.enumerated("root3_F137Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F137"), "!=", 0));
		featureAttrAtribute0.put("root3_F137", VariableFactory.enumerated("root3_F137Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F137"), "!=", 0));
		featureAttrAtribute1.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute1", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F38"), "!=", 0));
		featureAttrAtribute0.put("root3_F38", VariableFactory.enumerated("root3_F38Atribute0", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F38, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F38"), "=", 0));
		featureAttrAtribute1.put("root3_F43", VariableFactory.enumerated("root3_F43Atribute1", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F43"), "!=", 0));
		featureAttrAtribute0.put("root3_F43", VariableFactory.enumerated("root3_F43Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F43"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F43, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F43"), "!=", 0));
		featureAttrAtribute1.put("root3_F44", VariableFactory.enumerated("root3_F44Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F44"), "!=", 0));
		featureAttrAtribute0.put("root3_F44", VariableFactory.enumerated("root3_F44Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F44"), "!=", 0));
		featureAttrAtribute1.put("root3_F45", VariableFactory.enumerated("root3_F45Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F45"), "!=", 0));
		featureAttrAtribute0.put("root3_F45", VariableFactory.enumerated("root3_F45Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F45"), "!=", 0));
		featureAttrAtribute1.put("root3_F40", VariableFactory.enumerated("root3_F40Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F40"), "!=", 0));
		featureAttrAtribute0.put("root3_F40", VariableFactory.enumerated("root3_F40Atribute0", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F40"), "!=", 0));
		featureAttrAtribute1.put("root3_F54", VariableFactory.enumerated("root3_F54Atribute1", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F54"), "!=", 0));
		featureAttrAtribute0.put("root3_F54", VariableFactory.enumerated("root3_F54Atribute0", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F54"), "!=", 0));
		featureAttrAtribute1.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F11"), "!=", 0));
		featureAttrAtribute0.put("root3_F11", VariableFactory.enumerated("root3_F11Atribute0", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F11, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F11"), "!=", 0));
		featureAttrAtribute1.put("root3_F35", VariableFactory.enumerated("root3_F35Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F35"), "!=", 0));
		featureAttrAtribute0.put("root3_F35", VariableFactory.enumerated("root3_F35Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F35"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F35, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F35"), "!=", 0));
		featureAttrAtribute1.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F36"), "!=", 0));
		featureAttrAtribute0.put("root3_F36", VariableFactory.enumerated("root3_F36Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F36"), "!=", 0));
		featureAttrAtribute1.put("root3_F75", VariableFactory.enumerated("root3_F75Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F75"), "!=", 0));
		featureAttrAtribute0.put("root3_F75", VariableFactory.enumerated("root3_F75Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F75"), "!=", 0));
		featureAttrAtribute1.put("root3_F76", VariableFactory.enumerated("root3_F76Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F76"), "!=", 0));
		featureAttrAtribute0.put("root3_F76", VariableFactory.enumerated("root3_F76Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F76"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F76, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F76"), "!=", 0));
		featureAttrAtribute1.put("root3_F77", VariableFactory.enumerated("root3_F77Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F77"), "!=", 0));
		featureAttrAtribute0.put("root3_F77", VariableFactory.enumerated("root3_F77Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F77"), "!=", 0));
		featureAttrAtribute1.put("root3_F47", VariableFactory.enumerated("root3_F47Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F47"), "!=", 0));
		featureAttrAtribute0.put("root3_F47", VariableFactory.enumerated("root3_F47Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F47"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F47, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F47"), "!=", 0));
		featureAttrAtribute1.put("root3_F158", VariableFactory.enumerated("root3_F158Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F158"), "!=", 0));
		featureAttrAtribute0.put("root3_F158", VariableFactory.enumerated("root3_F158Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F158"), "!=", 0));
		featureAttrAtribute1.put("root3_F49", VariableFactory.enumerated("root3_F49Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F49"), "!=", 0));
		featureAttrAtribute0.put("root3_F49", VariableFactory.enumerated("root3_F49Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F49"), "!=", 0));
		featureAttrAtribute1.put("root3_F50", VariableFactory.enumerated("root3_F50Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F50"), "!=", 0));
		featureAttrAtribute0.put("root3_F50", VariableFactory.enumerated("root3_F50Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F50"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F50, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F50"), "!=", 0));
		featureAttrAtribute1.put("root3_F51", VariableFactory.enumerated("root3_F51Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F51"), "!=", 0));
		featureAttrAtribute0.put("root3_F51", VariableFactory.enumerated("root3_F51Atribute0", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F51"), "!=", 0));
		featureAttrAtribute1.put("root3_F119", VariableFactory.enumerated("root3_F119Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F119"), "!=", 0));
		featureAttrAtribute0.put("root3_F119", VariableFactory.enumerated("root3_F119Atribute0", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F119"), "!=", 0));
		featureAttrAtribute1.put("root3_F53", VariableFactory.enumerated("root3_F53Atribute1", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F53"), "!=", 0));
		featureAttrAtribute0.put("root3_F53", VariableFactory.enumerated("root3_F53Atribute0", new int[]{0, 5}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F53"), "!=", 0));
		featureAttrAtribute1.put("root3_F97", VariableFactory.enumerated("root3_F97Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F97"), "!=", 0));
		featureAttrAtribute0.put("root3_F97", VariableFactory.enumerated("root3_F97Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F97"), "!=", 0));
		featureAttrAtribute1.put("root3_F98", VariableFactory.enumerated("root3_F98Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F98"), "!=", 0));
		featureAttrAtribute0.put("root3_F98", VariableFactory.enumerated("root3_F98Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F98"), "!=", 0));
		featureAttrAtribute1.put("root3_F99", VariableFactory.enumerated("root3_F99Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F99"), "!=", 0));
		featureAttrAtribute0.put("root3_F99", VariableFactory.enumerated("root3_F99Atribute0", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F99, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F99"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F99, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F99"), "!=", 0));
		featureAttrAtribute1.put("root3_F100", VariableFactory.enumerated("root3_F100Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F100"), "!=", 0));
		featureAttrAtribute0.put("root3_F100", VariableFactory.enumerated("root3_F100Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F100"), "!=", 0));
		featureAttrAtribute1.put("root3_F101", VariableFactory.enumerated("root3_F101Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F101"), "!=", 0));
		featureAttrAtribute0.put("root3_F101", VariableFactory.enumerated("root3_F101Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F101"), "!=", 0));
		featureAttrAtribute1.put("root3_F29", VariableFactory.enumerated("root3_F29Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F29"), "!=", 0));
		featureAttrAtribute0.put("root3_F29", VariableFactory.enumerated("root3_F29Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F29"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F29, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F29"), "!=", 0));
		featureAttrAtribute1.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F30"), "!=", 0));
		featureAttrAtribute0.put("root3_F30", VariableFactory.enumerated("root3_F30Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F30"), "!=", 0));
		featureAttrAtribute1.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F31"), "!=", 0));
		featureAttrAtribute0.put("root3_F31", VariableFactory.enumerated("root3_F31Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F31, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F31"), "!=", 0));
		featureAttrAtribute1.put("root3_F63", VariableFactory.enumerated("root3_F63Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F63"), "!=", 0));
		featureAttrAtribute0.put("root3_F63", VariableFactory.enumerated("root3_F63Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F63"), "!=", 0));
		featureAttrAtribute1.put("root3_F64", VariableFactory.enumerated("root3_F64Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F64"), "!=", 0));
		featureAttrAtribute0.put("root3_F64", VariableFactory.enumerated("root3_F64Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F64"), "!=", 0));
		featureAttrAtribute1.put("root3_F65", VariableFactory.enumerated("root3_F65Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F65"), "!=", 0));
		featureAttrAtribute0.put("root3_F65", VariableFactory.enumerated("root3_F65Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F65"), "!=", 0));
		featureAttrAtribute1.put("root3_F78", VariableFactory.enumerated("root3_F78Atribute1", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F78"), "!=", 0));
		featureAttrAtribute0.put("root3_F78", VariableFactory.enumerated("root3_F78Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F78"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F78, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F78"), "!=", 0));
		featureAttrAtribute1.put("root3_F79", VariableFactory.enumerated("root3_F79Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F79"), "!=", 0));
		featureAttrAtribute0.put("root3_F79", VariableFactory.enumerated("root3_F79Atribute0", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F79"), "!=", 0));
		featureAttrAtribute1.put("root3_F67", VariableFactory.enumerated("root3_F67Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F67"), "!=", 0));
		featureAttrAtribute0.put("root3_F67", VariableFactory.enumerated("root3_F67Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F67"), "!=", 0));
		featureAttrAtribute1.put("root3_F33", VariableFactory.enumerated("root3_F33Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F33"), "!=", 0));
		featureAttrAtribute0.put("root3_F33", VariableFactory.enumerated("root3_F33Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F33"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F33, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F33"), "!=", 0));
		featureAttrAtribute1.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute1", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F34"), "!=", 0));
		featureAttrAtribute0.put("root3_F34", VariableFactory.enumerated("root3_F34Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F34"), "!=", 0));
		featureAttrAtribute1.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F13"), "!=", 0));
		featureAttrAtribute0.put("root3_F13", VariableFactory.enumerated("root3_F13Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F13"), "!=", 0));
		featureAttrAtribute1.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute1", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F14"), "!=", 0));
		featureAttrAtribute0.put("root3_F14", VariableFactory.enumerated("root3_F14Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F14"), "!=", 0));
		featureAttrAtribute1.put("root3_F159", VariableFactory.enumerated("root3_F159Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F159"), "!=", 0));
		featureAttrAtribute0.put("root3_F159", VariableFactory.enumerated("root3_F159Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F159"), "!=", 0));
		featureAttrAtribute1.put("root3_F4", VariableFactory.enumerated("root3_F4Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F4"), "!=", 0));
		featureAttrAtribute0.put("root3_F4", VariableFactory.enumerated("root3_F4Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F4"), "!=", 0));
		featureAttrAtribute1.put("root3_F138", VariableFactory.enumerated("root3_F138Atribute1", new int[]{0, 64}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F138"), "!=", 0));
		featureAttrAtribute0.put("root3_F138", VariableFactory.enumerated("root3_F138Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F138"), "!=", 0));
		featureAttrAtribute1.put("root3_F139", VariableFactory.enumerated("root3_F139Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F139"), "!=", 0));
		featureAttrAtribute0.put("root3_F139", VariableFactory.enumerated("root3_F139Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F139"), "!=", 0));
		featureAttrAtribute1.put("root3_F140", VariableFactory.enumerated("root3_F140Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F140"), "!=", 0));
		featureAttrAtribute0.put("root3_F140", VariableFactory.enumerated("root3_F140Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F140"), "!=", 0));
		featureAttrAtribute1.put("root3_F141", VariableFactory.enumerated("root3_F141Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F141"), "!=", 0));
		featureAttrAtribute0.put("root3_F141", VariableFactory.enumerated("root3_F141Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F141"), "!=", 0));
		featureAttrAtribute1.put("root3_F142", VariableFactory.enumerated("root3_F142Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F142"), "!=", 0));
		featureAttrAtribute0.put("root3_F142", VariableFactory.enumerated("root3_F142Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F142"), "!=", 0));
		featureAttrAtribute1.put("root3_F143", VariableFactory.enumerated("root3_F143Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F143"), "!=", 0));
		featureAttrAtribute0.put("root3_F143", VariableFactory.enumerated("root3_F143Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F143"), "!=", 0));
		featureAttrAtribute1.put("root3_F144", VariableFactory.enumerated("root3_F144Atribute1", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F144"), "!=", 0));
		featureAttrAtribute0.put("root3_F144", VariableFactory.enumerated("root3_F144Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F144"), "!=", 0));
		featureAttrAtribute1.put("root3_F145", VariableFactory.enumerated("root3_F145Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F145"), "!=", 0));
		featureAttrAtribute0.put("root3_F145", VariableFactory.enumerated("root3_F145Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F145"), "!=", 0));
		featureAttrAtribute1.put("root3_F146", VariableFactory.enumerated("root3_F146Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F146"), "!=", 0));
		featureAttrAtribute0.put("root3_F146", VariableFactory.enumerated("root3_F146Atribute0", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F146"), "!=", 0));
		featureAttrAtribute1.put("root3_F17", VariableFactory.enumerated("root3_F17Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F17"), "!=", 0));
		featureAttrAtribute0.put("root3_F17", VariableFactory.enumerated("root3_F17Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F17"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F17, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F17"), "!=", 0));
		featureAttrAtribute1.put("root3_F68", VariableFactory.enumerated("root3_F68Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F68"), "!=", 0));
		featureAttrAtribute0.put("root3_F68", VariableFactory.enumerated("root3_F68Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F68"), "!=", 0));
		featureAttrAtribute1.put("root3_F69", VariableFactory.enumerated("root3_F69Atribute1", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F69"), "!=", 0));
		featureAttrAtribute0.put("root3_F69", VariableFactory.enumerated("root3_F69Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F69"), "!=", 0));
		featureAttrAtribute1.put("root3_F102", VariableFactory.enumerated("root3_F102Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F102"), "!=", 0));
		featureAttrAtribute0.put("root3_F102", VariableFactory.enumerated("root3_F102Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F102"), "!=", 0));
		featureAttrAtribute1.put("root3_F103", VariableFactory.enumerated("root3_F103Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F103"), "!=", 0));
		featureAttrAtribute0.put("root3_F103", VariableFactory.enumerated("root3_F103Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F103"), "!=", 0));
		featureAttrAtribute1.put("root3_F104", VariableFactory.enumerated("root3_F104Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F104"), "!=", 0));
		featureAttrAtribute0.put("root3_F104", VariableFactory.enumerated("root3_F104Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F104"), "!=", 0));
		featureAttrAtribute1.put("root3_F105", VariableFactory.enumerated("root3_F105Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F105"), "!=", 0));
		featureAttrAtribute0.put("root3_F105", VariableFactory.enumerated("root3_F105Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F105, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F105"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F105, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F105"), "!=", 0));
		featureAttrAtribute1.put("root3_F106", VariableFactory.enumerated("root3_F106Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F106"), "!=", 0));
		featureAttrAtribute0.put("root3_F106", VariableFactory.enumerated("root3_F106Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F106"), "!=", 0));
		featureAttrAtribute1.put("root3_F107", VariableFactory.enumerated("root3_F107Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F107"), "!=", 0));
		featureAttrAtribute0.put("root3_F107", VariableFactory.enumerated("root3_F107Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F107"), "!=", 0));
		featureAttrAtribute1.put("root3_F108", VariableFactory.enumerated("root3_F108Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F108"), "!=", 0));
		featureAttrAtribute0.put("root3_F108", VariableFactory.enumerated("root3_F108Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F108"), "!=", 0));
		featureAttrAtribute1.put("root3_F71", VariableFactory.enumerated("root3_F71Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F71"), "!=", 0));
		featureAttrAtribute0.put("root3_F71", VariableFactory.enumerated("root3_F71Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F71"), "!=", 0));
		featureAttrAtribute1.put("root3_F87", VariableFactory.enumerated("root3_F87Atribute1", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F87"), "!=", 0));
		featureAttrAtribute0.put("root3_F87", VariableFactory.enumerated("root3_F87Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F87"), "!=", 0));
		featureAttrAtribute1.put("root3_F120", VariableFactory.enumerated("root3_F120Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F120"), "!=", 0));
		featureAttrAtribute0.put("root3_F120", VariableFactory.enumerated("root3_F120Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F120"), "!=", 0));
		featureAttrAtribute1.put("root3_F121", VariableFactory.enumerated("root3_F121Atribute1", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F121"), "!=", 0));
		featureAttrAtribute0.put("root3_F121", VariableFactory.enumerated("root3_F121Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F121"), "!=", 0));
		featureAttrAtribute1.put("root3_F122", VariableFactory.enumerated("root3_F122Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F122"), "!=", 0));
		featureAttrAtribute0.put("root3_F122", VariableFactory.enumerated("root3_F122Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F122"), "!=", 0));
		featureAttrAtribute1.put("root3_F123", VariableFactory.enumerated("root3_F123Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F123"), "!=", 0));
		featureAttrAtribute0.put("root3_F123", VariableFactory.enumerated("root3_F123Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F123, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F123"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F123, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F123"), "!=", 0));
		featureAttrAtribute1.put("root3_F124", VariableFactory.enumerated("root3_F124Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F124"), "!=", 0));
		featureAttrAtribute0.put("root3_F124", VariableFactory.enumerated("root3_F124Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F124"), "!=", 0));
		featureAttrAtribute1.put("root3_F125", VariableFactory.enumerated("root3_F125Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F125"), "!=", 0));
		featureAttrAtribute0.put("root3_F125", VariableFactory.enumerated("root3_F125Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F125"), "!=", 0));
		featureAttrAtribute1.put("root3_F126", VariableFactory.enumerated("root3_F126Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F126"), "!=", 0));
		featureAttrAtribute0.put("root3_F126", VariableFactory.enumerated("root3_F126Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F126"), "!=", 0));
		featureAttrAtribute1.put("root3_F127", VariableFactory.enumerated("root3_F127Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F127"), "!=", 0));
		featureAttrAtribute0.put("root3_F127", VariableFactory.enumerated("root3_F127Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F127"), "!=", 0));
		featureAttrAtribute1.put("root3_F128", VariableFactory.enumerated("root3_F128Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F128"), "!=", 0));
		featureAttrAtribute0.put("root3_F128", VariableFactory.enumerated("root3_F128Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F128, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F128"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F128, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F128"), "!=", 0));
		featureAttrAtribute1.put("root3_F89", VariableFactory.enumerated("root3_F89Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F89"), "!=", 0));
		featureAttrAtribute0.put("root3_F89", VariableFactory.enumerated("root3_F89Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F89"), "!=", 0));
		featureAttrAtribute1.put("root3_F90", VariableFactory.enumerated("root3_F90Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F90"), "!=", 0));
		featureAttrAtribute0.put("root3_F90", VariableFactory.enumerated("root3_F90Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F90"), "!=", 0));
		featureAttrAtribute1.put("root3_F91", VariableFactory.enumerated("root3_F91Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F91"), "!=", 0));
		featureAttrAtribute0.put("root3_F91", VariableFactory.enumerated("root3_F91Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F91, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F91"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F91, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F91"), "!=", 0));
		featureAttrAtribute1.put("root3_F92", VariableFactory.enumerated("root3_F92Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F92"), "!=", 0));
		featureAttrAtribute0.put("root3_F92", VariableFactory.enumerated("root3_F92Atribute0", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F92"), "!=", 0));
		featureAttrAtribute1.put("root3_F93", VariableFactory.enumerated("root3_F93Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F93"), "!=", 0));
		featureAttrAtribute0.put("root3_F93", VariableFactory.enumerated("root3_F93Atribute0", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F93"), "!=", 0));
		featureAttrAtribute1.put("root3_F94", VariableFactory.enumerated("root3_F94Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F94"), "!=", 0));
		featureAttrAtribute0.put("root3_F94", VariableFactory.enumerated("root3_F94Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F94"), "!=", 0));
		featureAttrAtribute1.put("root3_F95", VariableFactory.enumerated("root3_F95Atribute1", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F95"), "!=", 0));
		featureAttrAtribute0.put("root3_F95", VariableFactory.enumerated("root3_F95Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F95"), "!=", 0));
		featureAttrAtribute1.put("root3_F96", VariableFactory.enumerated("root3_F96Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F96"), "!=", 0));
		featureAttrAtribute0.put("root3_F96", VariableFactory.enumerated("root3_F96Atribute0", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F96"), "!=", 0));
		featureAttrAtribute1.put("root3_F73", VariableFactory.enumerated("root3_F73Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F73"), "!=", 0));
		featureAttrAtribute0.put("root3_F73", VariableFactory.enumerated("root3_F73Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F73"), "!=", 0));
		featureAttrAtribute1.put("root3_F74", VariableFactory.enumerated("root3_F74Atribute1", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F74"), "!=", 0));
		featureAttrAtribute0.put("root3_F74", VariableFactory.enumerated("root3_F74Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F74"), "!=", 0));
		featureAttrAtribute1.put("root3_F156", VariableFactory.enumerated("root3_F156Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F156"), "!=", 0));
		featureAttrAtribute0.put("root3_F156", VariableFactory.enumerated("root3_F156Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F156"), "!=", 0));
		featureAttrAtribute1.put("root3_F157", VariableFactory.enumerated("root3_F157Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F157"), "!=", 0));
		featureAttrAtribute0.put("root3_F157", VariableFactory.enumerated("root3_F157Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F157"), "!=", 0));
		featureAttrAtribute1.put("root3_F20", VariableFactory.enumerated("root3_F20Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F20"), "!=", 0));
		featureAttrAtribute0.put("root3_F20", VariableFactory.enumerated("root3_F20Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F20"), "!=", 0));
		featureAttrAtribute1.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F21"), "!=", 0));
		featureAttrAtribute0.put("root3_F21", VariableFactory.enumerated("root3_F21Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F21, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F21"), "!=", 0));
		featureAttrAtribute1.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute1", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F22"), "!=", 0));
		featureAttrAtribute0.put("root3_F22", VariableFactory.enumerated("root3_F22Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F22"), "!=", 0));
		featureAttrAtribute1.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F23"), "!=", 0));
		featureAttrAtribute0.put("root3_F23", VariableFactory.enumerated("root3_F23Atribute0", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F23"), "!=", 0));
		featureAttrAtribute1.put("root3_F80", VariableFactory.enumerated("root3_F80Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F80"), "!=", 0));
		featureAttrAtribute0.put("root3_F80", VariableFactory.enumerated("root3_F80Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F80"), "!=", 0));
		featureAttrAtribute1.put("root3_F81", VariableFactory.enumerated("root3_F81Atribute1", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F81"), "!=", 0));
		featureAttrAtribute0.put("root3_F81", VariableFactory.enumerated("root3_F81Atribute0", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F81"), "!=", 0));
		featureAttrAtribute1.put("root3_F82", VariableFactory.enumerated("root3_F82Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F82"), "!=", 0));
		featureAttrAtribute0.put("root3_F82", VariableFactory.enumerated("root3_F82Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F82"), "!=", 0));
		featureAttrAtribute1.put("root3_F83", VariableFactory.enumerated("root3_F83Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F83"), "!=", 0));
		featureAttrAtribute0.put("root3_F83", VariableFactory.enumerated("root3_F83Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F83"), "!=", 0));
		featureAttrAtribute1.put("root3_F84", VariableFactory.enumerated("root3_F84Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F84"), "!=", 0));
		featureAttrAtribute0.put("root3_F84", VariableFactory.enumerated("root3_F84Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F84"), "!=", 0));
		featureAttrAtribute1.put("root3_F85", VariableFactory.enumerated("root3_F85Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F85, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F85"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F85, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F85"), "!=", 0));
		featureAttrAtribute0.put("root3_F85", VariableFactory.enumerated("root3_F85Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F85, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F85"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F85, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F85"), "!=", 0));
		featureAttrAtribute1.put("root3_F86", VariableFactory.enumerated("root3_F86Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F86"), "!=", 0));
		featureAttrAtribute0.put("root3_F86", VariableFactory.enumerated("root3_F86Atribute0", new int[]{0, 88}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F86"), "!=", 0));
		featureAttrAtribute1.put("root3_F151", VariableFactory.enumerated("root3_F151Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F151"), "!=", 0));
		featureAttrAtribute0.put("root3_F151", VariableFactory.enumerated("root3_F151Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F151"), "!=", 0));
		featureAttrAtribute1.put("root3_F152", VariableFactory.enumerated("root3_F152Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F152"), "!=", 0));
		featureAttrAtribute0.put("root3_F152", VariableFactory.enumerated("root3_F152Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F152"), "!=", 0));
		featureAttrAtribute1.put("root3_F57", VariableFactory.enumerated("root3_F57Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F57"), "!=", 0));
		featureAttrAtribute0.put("root3_F57", VariableFactory.enumerated("root3_F57Atribute0", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F57"), "!=", 0));
		featureAttrAtribute1.put("root3_F58", VariableFactory.enumerated("root3_F58Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F58"), "!=", 0));
		featureAttrAtribute0.put("root3_F58", VariableFactory.enumerated("root3_F58Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F58"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F58, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F58"), "!=", 0));
		featureAttrAtribute1.put("root3_F109", VariableFactory.enumerated("root3_F109Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F109"), "!=", 0));
		featureAttrAtribute0.put("root3_F109", VariableFactory.enumerated("root3_F109Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F109"), "!=", 0));
		featureAttrAtribute1.put("root3_F110", VariableFactory.enumerated("root3_F110Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F110"), "!=", 0));
		featureAttrAtribute0.put("root3_F110", VariableFactory.enumerated("root3_F110Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F110"), "!=", 0));
		featureAttrAtribute1.put("root3_F153", VariableFactory.enumerated("root3_F153Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F153"), "!=", 0));
		featureAttrAtribute0.put("root3_F153", VariableFactory.enumerated("root3_F153Atribute0", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F153"), "!=", 0));
		featureAttrAtribute1.put("root3_F154", VariableFactory.enumerated("root3_F154Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F154"), "!=", 0));
		featureAttrAtribute0.put("root3_F154", VariableFactory.enumerated("root3_F154Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F154"), "!=", 0));
		featureAttrAtribute1.put("root3_F155", VariableFactory.enumerated("root3_F155Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F155"), "!=", 0));
		featureAttrAtribute0.put("root3_F155", VariableFactory.enumerated("root3_F155Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F155"), "!=", 0));
		featureAttrAtribute1.put("root3_F112", VariableFactory.enumerated("root3_F112Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F112"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F112, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F112"), "!=", 0));
		featureAttrAtribute0.put("root3_F112", VariableFactory.enumerated("root3_F112Atribute0", new int[]{0, 61}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F112"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F112, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F112"), "!=", 0));
		featureAttrAtribute1.put("root3_F147", VariableFactory.enumerated("root3_F147Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F147"), "!=", 0));
		featureAttrAtribute0.put("root3_F147", VariableFactory.enumerated("root3_F147Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F147"), "!=", 0));
		featureAttrAtribute1.put("root3_F148", VariableFactory.enumerated("root3_F148Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F148"), "!=", 0));
		featureAttrAtribute0.put("root3_F148", VariableFactory.enumerated("root3_F148Atribute0", new int[]{0, 89}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F148"), "!=", 0));
		featureAttrAtribute1.put("root3_F149", VariableFactory.enumerated("root3_F149Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F149"), "!=", 0));
		featureAttrAtribute0.put("root3_F149", VariableFactory.enumerated("root3_F149Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F149"), "!=", 0));
		featureAttrAtribute1.put("root3_F150", VariableFactory.enumerated("root3_F150Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F150"), "!=", 0));
		featureAttrAtribute0.put("root3_F150", VariableFactory.enumerated("root3_F150Atribute0", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F150"), "!=", 0));
		featureAttrAtribute1.put("root3_F114", VariableFactory.enumerated("root3_F114Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F114"), "!=", 0));
		featureAttrAtribute0.put("root3_F114", VariableFactory.enumerated("root3_F114Atribute0", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F114"), "!=", 0));
		featureAttrAtribute1.put("root3_F115", VariableFactory.enumerated("root3_F115Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F115"), "!=", 0));
		featureAttrAtribute0.put("root3_F115", VariableFactory.enumerated("root3_F115Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F115"), "!=", 0));
		featureAttrAtribute1.put("root3_F116", VariableFactory.enumerated("root3_F116Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F116"), "!=", 0));
		featureAttrAtribute0.put("root3_F116", VariableFactory.enumerated("root3_F116Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F116"), "!=", 0));
		featureAttrAtribute1.put("root3_F117", VariableFactory.enumerated("root3_F117Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F117"), "!=", 0));
		featureAttrAtribute0.put("root3_F117", VariableFactory.enumerated("root3_F117Atribute0", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F117"), "!=", 0));
		featureAttrAtribute1.put("root3_F118", VariableFactory.enumerated("root3_F118Atribute1", new int[]{0, 26}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F118"), "!=", 0));
		featureAttrAtribute0.put("root3_F118", VariableFactory.enumerated("root3_F118Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F118"), "!=", 0));
		featureAttrAtribute1.put("root3_F60", VariableFactory.enumerated("root3_F60Atribute1", new int[]{0, 22}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F60"), "!=", 0));
		featureAttrAtribute0.put("root3_F60", VariableFactory.enumerated("root3_F60Atribute0", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F60"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F60, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F60"), "!=", 0));
		featureAttrAtribute1.put("root3_F61", VariableFactory.enumerated("root3_F61Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F61"), "!=", 0));
		featureAttrAtribute0.put("root3_F61", VariableFactory.enumerated("root3_F61Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F61"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F61, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F61"), "!=", 0));
		featureAttrAtribute1.put("root3_F62", VariableFactory.enumerated("root3_F62Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F62"), "!=", 0));
		featureAttrAtribute0.put("root3_F62", VariableFactory.enumerated("root3_F62Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F62"), "!=", 0));
		featureAttrAtribute1.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute1", new int[]{0, 20}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F25"), "!=", 0));
		featureAttrAtribute0.put("root3_F25", VariableFactory.enumerated("root3_F25Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F25"), "!=", 0));
		featureAttrAtribute1.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute1", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F6"), "!=", 0));
		featureAttrAtribute0.put("root3_F6", VariableFactory.enumerated("root3_F6Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F6"), "!=", 0));
		featureAttrAtribute1.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute1", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F7"), "!=", 0));
		featureAttrAtribute0.put("root3_F7", VariableFactory.enumerated("root3_F7Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F7, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F7"), "!=", 0));
		featureAttrAtribute1.put("root3_F42", VariableFactory.enumerated("root3_F42Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F42"), "!=", 0));
		featureAttrAtribute0.put("root3_F42", VariableFactory.enumerated("root3_F42Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F42"), "!=", 0));
		featureAttrAtribute1.put("root3_F9", VariableFactory.enumerated("root3_F9Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root3_F9"), "!=", 0));
		featureAttrAtribute0.put("root3_F9", VariableFactory.enumerated("root3_F9Atribute0", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root3_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root3_F9"), "!=", 0));
		featureAttrAtribute1.put("root4_F3", VariableFactory.enumerated("root4_F3Atribute1", new int[]{0, 65}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F3"), "!=", 0));
		featureAttrAtribute0.put("root4_F3", VariableFactory.enumerated("root4_F3Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F3"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F3, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F3"), "!=", 0));
		featureAttrAtribute1.put("root4_F4", VariableFactory.enumerated("root4_F4Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F4"), "!=", 0));
		featureAttrAtribute0.put("root4_F4", VariableFactory.enumerated("root4_F4Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F4"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F4, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F4"), "!=", 0));
		featureAttrAtribute1.put("root4_F5", VariableFactory.enumerated("root4_F5Atribute1", new int[]{0, 4}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F5"), "!=", 0));
		featureAttrAtribute0.put("root4_F5", VariableFactory.enumerated("root4_F5Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F5"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F5, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F5"), "!=", 0));
		featureAttrAtribute1.put("root4_F6", VariableFactory.enumerated("root4_F6Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F6"), "!=", 0));
		featureAttrAtribute0.put("root4_F6", VariableFactory.enumerated("root4_F6Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F6"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F6, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F6"), "!=", 0));
		featureAttrAtribute1.put("root4_F41", VariableFactory.enumerated("root4_F41Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F41"), "!=", 0));
		featureAttrAtribute0.put("root4_F41", VariableFactory.enumerated("root4_F41Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F41"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F41, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F41"), "!=", 0));
		featureAttrAtribute1.put("root4_F42", VariableFactory.enumerated("root4_F42Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F42"), "!=", 0));
		featureAttrAtribute0.put("root4_F42", VariableFactory.enumerated("root4_F42Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F42"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F42, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F42"), "!=", 0));
		featureAttrAtribute1.put("root4_F156", VariableFactory.enumerated("root4_F156Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F156"), "!=", 0));
		featureAttrAtribute0.put("root4_F156", VariableFactory.enumerated("root4_F156Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F156, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F156"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F156, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F156"), "!=", 0));
		featureAttrAtribute1.put("root4_F157", VariableFactory.enumerated("root4_F157Atribute1", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F157"), "!=", 0));
		featureAttrAtribute0.put("root4_F157", VariableFactory.enumerated("root4_F157Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F157, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F157"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F157, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F157"), "!=", 0));
		featureAttrAtribute1.put("root4_F158", VariableFactory.enumerated("root4_F158Atribute1", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F158"), "!=", 0));
		featureAttrAtribute0.put("root4_F158", VariableFactory.enumerated("root4_F158Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F158, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F158"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F158, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F158"), "!=", 0));
		featureAttrAtribute1.put("root4_F44", VariableFactory.enumerated("root4_F44Atribute1", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F44"), "!=", 0));
		featureAttrAtribute0.put("root4_F44", VariableFactory.enumerated("root4_F44Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F44"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F44, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F44"), "!=", 0));
		featureAttrAtribute1.put("root4_F45", VariableFactory.enumerated("root4_F45Atribute1", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F45"), "!=", 0));
		featureAttrAtribute0.put("root4_F45", VariableFactory.enumerated("root4_F45Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F45"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F45, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F45"), "!=", 0));
		featureAttrAtribute1.put("root4_F46", VariableFactory.enumerated("root4_F46Atribute1", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F46"), "!=", 0));
		featureAttrAtribute0.put("root4_F46", VariableFactory.enumerated("root4_F46Atribute0", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F46"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F46, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F46"), "!=", 0));
		featureAttrAtribute1.put("root4_F116", VariableFactory.enumerated("root4_F116Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F116"), "!=", 0));
		featureAttrAtribute0.put("root4_F116", VariableFactory.enumerated("root4_F116Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F116, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F116"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F116, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F116"), "!=", 0));
		featureAttrAtribute1.put("root4_F117", VariableFactory.enumerated("root4_F117Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F117"), "!=", 0));
		featureAttrAtribute0.put("root4_F117", VariableFactory.enumerated("root4_F117Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F117, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F117"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F117, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F117"), "!=", 0));
		featureAttrAtribute1.put("root4_F118", VariableFactory.enumerated("root4_F118Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F118"), "!=", 0));
		featureAttrAtribute0.put("root4_F118", VariableFactory.enumerated("root4_F118Atribute0", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F118, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F118"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F118, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F118"), "!=", 0));
		featureAttrAtribute1.put("root4_F119", VariableFactory.enumerated("root4_F119Atribute1", new int[]{0, 15}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F119"), "!=", 0));
		featureAttrAtribute0.put("root4_F119", VariableFactory.enumerated("root4_F119Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F119, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F119"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F119, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F119"), "!=", 0));
		featureAttrAtribute1.put("root4_F120", VariableFactory.enumerated("root4_F120Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F120"), "!=", 0));
		featureAttrAtribute0.put("root4_F120", VariableFactory.enumerated("root4_F120Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F120, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F120"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F120, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F120"), "!=", 0));
		featureAttrAtribute1.put("root4_F121", VariableFactory.enumerated("root4_F121Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F121"), "!=", 0));
		featureAttrAtribute0.put("root4_F121", VariableFactory.enumerated("root4_F121Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F121, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F121"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F121, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F121"), "!=", 0));
		featureAttrAtribute1.put("root4_F48", VariableFactory.enumerated("root4_F48Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F48"), "!=", 0));
		featureAttrAtribute0.put("root4_F48", VariableFactory.enumerated("root4_F48Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F48"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F48, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F48"), "!=", 0));
		featureAttrAtribute1.put("root4_F49", VariableFactory.enumerated("root4_F49Atribute1", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F49"), "!=", 0));
		featureAttrAtribute0.put("root4_F49", VariableFactory.enumerated("root4_F49Atribute0", new int[]{0, 7}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F49"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F49, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F49"), "!=", 0));
		featureAttrAtribute1.put("root4_F79", VariableFactory.enumerated("root4_F79Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F79"), "!=", 0));
		featureAttrAtribute0.put("root4_F79", VariableFactory.enumerated("root4_F79Atribute0", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F79"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F79, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F79"), "!=", 0));
		featureAttrAtribute1.put("root4_F80", VariableFactory.enumerated("root4_F80Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F80"), "!=", 0));
		featureAttrAtribute0.put("root4_F80", VariableFactory.enumerated("root4_F80Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F80, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F80"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F80, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F80"), "!=", 0));
		featureAttrAtribute1.put("root4_F81", VariableFactory.enumerated("root4_F81Atribute1", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F81"), "!=", 0));
		featureAttrAtribute0.put("root4_F81", VariableFactory.enumerated("root4_F81Atribute0", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F81, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F81"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F81, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F81"), "!=", 0));
		featureAttrAtribute1.put("root4_F82", VariableFactory.enumerated("root4_F82Atribute1", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F82"), "!=", 0));
		featureAttrAtribute0.put("root4_F82", VariableFactory.enumerated("root4_F82Atribute0", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F82, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F82"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F82, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F82"), "!=", 0));
		featureAttrAtribute1.put("root4_F130", VariableFactory.enumerated("root4_F130Atribute1", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F130"), "!=", 0));
		featureAttrAtribute0.put("root4_F130", VariableFactory.enumerated("root4_F130Atribute0", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F130, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F130"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F130, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F130"), "!=", 0));
		featureAttrAtribute1.put("root4_F131", VariableFactory.enumerated("root4_F131Atribute1", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F131"), "!=", 0));
		featureAttrAtribute0.put("root4_F131", VariableFactory.enumerated("root4_F131Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F131, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F131"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F131, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F131"), "!=", 0));
		featureAttrAtribute1.put("root4_F132", VariableFactory.enumerated("root4_F132Atribute1", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F132"), "!=", 0));
		featureAttrAtribute0.put("root4_F132", VariableFactory.enumerated("root4_F132Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F132, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F132"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F132, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F132"), "!=", 0));
		featureAttrAtribute1.put("root4_F133", VariableFactory.enumerated("root4_F133Atribute1", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F133"), "!=", 0));
		featureAttrAtribute0.put("root4_F133", VariableFactory.enumerated("root4_F133Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F133, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F133"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F133, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F133"), "!=", 0));
		featureAttrAtribute1.put("root4_F134", VariableFactory.enumerated("root4_F134Atribute1", new int[]{0, 75}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F134"), "!=", 0));
		featureAttrAtribute0.put("root4_F134", VariableFactory.enumerated("root4_F134Atribute0", new int[]{0, 36}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F134, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F134"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F134, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F134"), "!=", 0));
		featureAttrAtribute1.put("root4_F135", VariableFactory.enumerated("root4_F135Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F135"), "!=", 0));
		featureAttrAtribute0.put("root4_F135", VariableFactory.enumerated("root4_F135Atribute0", new int[]{0, 62}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F135, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F135"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F135, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F135"), "!=", 0));
		featureAttrAtribute1.put("root4_F136", VariableFactory.enumerated("root4_F136Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F136"), "!=", 0));
		featureAttrAtribute0.put("root4_F136", VariableFactory.enumerated("root4_F136Atribute0", new int[]{0, 43}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F136, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F136"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F136, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F136"), "!=", 0));
		featureAttrAtribute1.put("root4_F13", VariableFactory.enumerated("root4_F13Atribute1", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F13"), "!=", 0));
		featureAttrAtribute0.put("root4_F13", VariableFactory.enumerated("root4_F13Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F13"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F13, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F13"), "!=", 0));
		featureAttrAtribute1.put("root4_F14", VariableFactory.enumerated("root4_F14Atribute1", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F14"), "!=", 0));
		featureAttrAtribute0.put("root4_F14", VariableFactory.enumerated("root4_F14Atribute0", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F14"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F14, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F14"), "!=", 0));
		featureAttrAtribute1.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute1", new int[]{0, 11}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F15"), "!=", 0));
		featureAttrAtribute0.put("root4_F15", VariableFactory.enumerated("root4_F15Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F15, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F15"), "!=", 0));
		featureAttrAtribute1.put("root4_F16", VariableFactory.enumerated("root4_F16Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F16"), "!=", 0));
		featureAttrAtribute0.put("root4_F16", VariableFactory.enumerated("root4_F16Atribute0", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F16"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F16, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F16"), "!=", 0));
		featureAttrAtribute1.put("root4_F83", VariableFactory.enumerated("root4_F83Atribute1", new int[]{0, 0}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F83"), "=", 0));
		featureAttrAtribute0.put("root4_F83", VariableFactory.enumerated("root4_F83Atribute0", new int[]{0, 51}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F83, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F83"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F83, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F83"), "!=", 0));
		featureAttrAtribute1.put("root4_F84", VariableFactory.enumerated("root4_F84Atribute1", new int[]{0, 38}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F84"), "!=", 0));
		featureAttrAtribute0.put("root4_F84", VariableFactory.enumerated("root4_F84Atribute0", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F84, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F84"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F84, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F84"), "!=", 0));
		featureAttrAtribute1.put("root4_F109", VariableFactory.enumerated("root4_F109Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F109"), "!=", 0));
		featureAttrAtribute0.put("root4_F109", VariableFactory.enumerated("root4_F109Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F109, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F109"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F109, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F109"), "!=", 0));
		featureAttrAtribute1.put("root4_F110", VariableFactory.enumerated("root4_F110Atribute1", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F110"), "!=", 0));
		featureAttrAtribute0.put("root4_F110", VariableFactory.enumerated("root4_F110Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F110, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F110"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F110, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F110"), "!=", 0));
		featureAttrAtribute1.put("root4_F111", VariableFactory.enumerated("root4_F111Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F111"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F111, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F111"), "!=", 0));
		featureAttrAtribute0.put("root4_F111", VariableFactory.enumerated("root4_F111Atribute0", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F111, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F111"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F111, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F111"), "!=", 0));
		featureAttrAtribute1.put("root4_F112", VariableFactory.enumerated("root4_F112Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F112"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F112, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F112"), "!=", 0));
		featureAttrAtribute0.put("root4_F112", VariableFactory.enumerated("root4_F112Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F112, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F112"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F112, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F112"), "!=", 0));
		featureAttrAtribute1.put("root4_F113", VariableFactory.enumerated("root4_F113Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F113"), "!=", 0));
		featureAttrAtribute0.put("root4_F113", VariableFactory.enumerated("root4_F113Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F113, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F113"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F113, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F113"), "!=", 0));
		featureAttrAtribute1.put("root4_F114", VariableFactory.enumerated("root4_F114Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F114"), "!=", 0));
		featureAttrAtribute0.put("root4_F114", VariableFactory.enumerated("root4_F114Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F114, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F114"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F114, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F114"), "!=", 0));
		featureAttrAtribute1.put("root4_F86", VariableFactory.enumerated("root4_F86Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F86"), "!=", 0));
		featureAttrAtribute0.put("root4_F86", VariableFactory.enumerated("root4_F86Atribute0", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F86, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F86"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F86, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F86"), "!=", 0));
		featureAttrAtribute1.put("root4_F87", VariableFactory.enumerated("root4_F87Atribute1", new int[]{0, 49}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F87"), "!=", 0));
		featureAttrAtribute0.put("root4_F87", VariableFactory.enumerated("root4_F87Atribute0", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F87, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F87"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F87, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F87"), "!=", 0));
		featureAttrAtribute1.put("root4_F88", VariableFactory.enumerated("root4_F88Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F88"), "!=", 0));
		featureAttrAtribute0.put("root4_F88", VariableFactory.enumerated("root4_F88Atribute0", new int[]{0, 42}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F88, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F88"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F88, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F88"), "!=", 0));
		featureAttrAtribute1.put("root4_F89", VariableFactory.enumerated("root4_F89Atribute1", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F89"), "!=", 0));
		featureAttrAtribute0.put("root4_F89", VariableFactory.enumerated("root4_F89Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F89, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F89"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F89, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F89"), "!=", 0));
		featureAttrAtribute1.put("root4_F90", VariableFactory.enumerated("root4_F90Atribute1", new int[]{0, 29}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F90"), "!=", 0));
		featureAttrAtribute0.put("root4_F90", VariableFactory.enumerated("root4_F90Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F90, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F90"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F90, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F90"), "!=", 0));
		featureAttrAtribute1.put("root4_F92", VariableFactory.enumerated("root4_F92Atribute1", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F92"), "!=", 0));
		featureAttrAtribute0.put("root4_F92", VariableFactory.enumerated("root4_F92Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F92, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F92"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F92, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F92"), "!=", 0));
		featureAttrAtribute1.put("root4_F93", VariableFactory.enumerated("root4_F93Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F93"), "!=", 0));
		featureAttrAtribute0.put("root4_F93", VariableFactory.enumerated("root4_F93Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F93, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F93"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F93, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F93"), "!=", 0));
		featureAttrAtribute1.put("root4_F94", VariableFactory.enumerated("root4_F94Atribute1", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F94"), "!=", 0));
		featureAttrAtribute0.put("root4_F94", VariableFactory.enumerated("root4_F94Atribute0", new int[]{0, 45}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F94, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F94"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F94, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F94"), "!=", 0));
		featureAttrAtribute1.put("root4_F95", VariableFactory.enumerated("root4_F95Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F95"), "!=", 0));
		featureAttrAtribute0.put("root4_F95", VariableFactory.enumerated("root4_F95Atribute0", new int[]{0, 84}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F95, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F95"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F95, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F95"), "!=", 0));
		featureAttrAtribute1.put("root4_F62", VariableFactory.enumerated("root4_F62Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F62"), "!=", 0));
		featureAttrAtribute0.put("root4_F62", VariableFactory.enumerated("root4_F62Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F62"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F62, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F62"), "!=", 0));
		featureAttrAtribute1.put("root4_F63", VariableFactory.enumerated("root4_F63Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F63"), "!=", 0));
		featureAttrAtribute0.put("root4_F63", VariableFactory.enumerated("root4_F63Atribute0", new int[]{0, 35}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F63"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F63, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F63"), "!=", 0));
		featureAttrAtribute1.put("root4_F64", VariableFactory.enumerated("root4_F64Atribute1", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F64"), "!=", 0));
		featureAttrAtribute0.put("root4_F64", VariableFactory.enumerated("root4_F64Atribute0", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F64"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F64, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F64"), "!=", 0));
		featureAttrAtribute1.put("root4_F65", VariableFactory.enumerated("root4_F65Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F65"), "!=", 0));
		featureAttrAtribute0.put("root4_F65", VariableFactory.enumerated("root4_F65Atribute0", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F65"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F65, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F65"), "!=", 0));
		featureAttrAtribute1.put("root4_F66", VariableFactory.enumerated("root4_F66Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F66"), "!=", 0));
		featureAttrAtribute0.put("root4_F66", VariableFactory.enumerated("root4_F66Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F66"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F66, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F66"), "!=", 0));
		featureAttrAtribute1.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute1", new int[]{0, 16}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F19"), "!=", 0));
		featureAttrAtribute0.put("root4_F19", VariableFactory.enumerated("root4_F19Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F19, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F19"), "!=", 0));
		featureAttrAtribute1.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F20"), "!=", 0));
		featureAttrAtribute0.put("root4_F20", VariableFactory.enumerated("root4_F20Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F20, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F20"), "!=", 0));
		featureAttrAtribute1.put("root4_F115", VariableFactory.enumerated("root4_F115Atribute1", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F115"), "!=", 0));
		featureAttrAtribute0.put("root4_F115", VariableFactory.enumerated("root4_F115Atribute0", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F115, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F115"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F115, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F115"), "!=", 0));
		featureAttrAtribute1.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F22"), "!=", 0));
		featureAttrAtribute0.put("root4_F22", VariableFactory.enumerated("root4_F22Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F22, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F22"), "!=", 0));
		featureAttrAtribute1.put("root4_F23", VariableFactory.enumerated("root4_F23Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F23"), "!=", 0));
		featureAttrAtribute0.put("root4_F23", VariableFactory.enumerated("root4_F23Atribute0", new int[]{0, 74}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F23"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F23, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F23"), "!=", 0));
		featureAttrAtribute1.put("root4_F24", VariableFactory.enumerated("root4_F24Atribute1", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F24"), "!=", 0));
		featureAttrAtribute0.put("root4_F24", VariableFactory.enumerated("root4_F24Atribute0", new int[]{0, 25}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F24"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F24, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F24"), "!=", 0));
		featureAttrAtribute1.put("root4_F25", VariableFactory.enumerated("root4_F25Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F25"), "!=", 0));
		featureAttrAtribute0.put("root4_F25", VariableFactory.enumerated("root4_F25Atribute0", new int[]{0, 59}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F25"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F25, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F25"), "!=", 0));
		featureAttrAtribute1.put("root4_F26", VariableFactory.enumerated("root4_F26Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F26"), "!=", 0));
		featureAttrAtribute0.put("root4_F26", VariableFactory.enumerated("root4_F26Atribute0", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F26"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F26, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F26"), "!=", 0));
		featureAttrAtribute1.put("root4_F8", VariableFactory.enumerated("root4_F8Atribute1", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F8"), "!=", 0));
		featureAttrAtribute0.put("root4_F8", VariableFactory.enumerated("root4_F8Atribute0", new int[]{0, 71}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F8"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F8, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F8"), "!=", 0));
		featureAttrAtribute1.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute1", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F9"), "!=", 0));
		featureAttrAtribute0.put("root4_F9", VariableFactory.enumerated("root4_F9Atribute0", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F9, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F9"), "!=", 0));
		featureAttrAtribute1.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F32"), "!=", 0));
		featureAttrAtribute0.put("root4_F32", VariableFactory.enumerated("root4_F32Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F32, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F32"), "!=", 0));
		featureAttrAtribute1.put("root4_F51", VariableFactory.enumerated("root4_F51Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F51"), "!=", 0));
		featureAttrAtribute0.put("root4_F51", VariableFactory.enumerated("root4_F51Atribute0", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F51"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F51, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F51"), "!=", 0));
		featureAttrAtribute1.put("root4_F52", VariableFactory.enumerated("root4_F52Atribute1", new int[]{0, 32}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F52"), "!=", 0));
		featureAttrAtribute0.put("root4_F52", VariableFactory.enumerated("root4_F52Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F52"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F52, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F52"), "!=", 0));
		featureAttrAtribute1.put("root4_F53", VariableFactory.enumerated("root4_F53Atribute1", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F53"), "!=", 0));
		featureAttrAtribute0.put("root4_F53", VariableFactory.enumerated("root4_F53Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F53"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F53, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F53"), "!=", 0));
		featureAttrAtribute1.put("root4_F54", VariableFactory.enumerated("root4_F54Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F54"), "!=", 0));
		featureAttrAtribute0.put("root4_F54", VariableFactory.enumerated("root4_F54Atribute0", new int[]{0, 53}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F54, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F54"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F54, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F54"), "!=", 0));
		featureAttrAtribute1.put("root4_F55", VariableFactory.enumerated("root4_F55Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F55"), "!=", 0));
		featureAttrAtribute0.put("root4_F55", VariableFactory.enumerated("root4_F55Atribute0", new int[]{0, 54}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F55"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F55, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F55"), "!=", 0));
		featureAttrAtribute1.put("root4_F56", VariableFactory.enumerated("root4_F56Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F56"), "!=", 0));
		featureAttrAtribute0.put("root4_F56", VariableFactory.enumerated("root4_F56Atribute0", new int[]{0, 77}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F56"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F56, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F56"), "!=", 0));
		featureAttrAtribute1.put("root4_F57", VariableFactory.enumerated("root4_F57Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F57"), "!=", 0));
		featureAttrAtribute0.put("root4_F57", VariableFactory.enumerated("root4_F57Atribute0", new int[]{0, 69}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F57"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F57, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F57"), "!=", 0));
		featureAttrAtribute1.put("root4_F67", VariableFactory.enumerated("root4_F67Atribute1", new int[]{0, 52}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F67"), "!=", 0));
		featureAttrAtribute0.put("root4_F67", VariableFactory.enumerated("root4_F67Atribute0", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F67"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F67, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F67"), "!=", 0));
		featureAttrAtribute1.put("root4_F68", VariableFactory.enumerated("root4_F68Atribute1", new int[]{0, 96}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F68"), "!=", 0));
		featureAttrAtribute0.put("root4_F68", VariableFactory.enumerated("root4_F68Atribute0", new int[]{0, 39}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F68"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F68, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F68"), "!=", 0));
		featureAttrAtribute1.put("root4_F69", VariableFactory.enumerated("root4_F69Atribute1", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F69"), "!=", 0));
		featureAttrAtribute0.put("root4_F69", VariableFactory.enumerated("root4_F69Atribute0", new int[]{0, 98}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F69"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F69, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F69"), "!=", 0));
		featureAttrAtribute1.put("root4_F59", VariableFactory.enumerated("root4_F59Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F59"), "!=", 0));
		featureAttrAtribute0.put("root4_F59", VariableFactory.enumerated("root4_F59Atribute0", new int[]{0, 48}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F59"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F59, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F59"), "!=", 0));
		featureAttrAtribute1.put("root4_F140", VariableFactory.enumerated("root4_F140Atribute1", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F140"), "!=", 0));
		featureAttrAtribute0.put("root4_F140", VariableFactory.enumerated("root4_F140Atribute0", new int[]{0, 97}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F140, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F140"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F140, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F140"), "!=", 0));
		featureAttrAtribute1.put("root4_F141", VariableFactory.enumerated("root4_F141Atribute1", new int[]{0, 92}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F141"), "!=", 0));
		featureAttrAtribute0.put("root4_F141", VariableFactory.enumerated("root4_F141Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F141, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F141"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F141, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F141"), "!=", 0));
		featureAttrAtribute1.put("root4_F142", VariableFactory.enumerated("root4_F142Atribute1", new int[]{0, 56}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F142"), "!=", 0));
		featureAttrAtribute0.put("root4_F142", VariableFactory.enumerated("root4_F142Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F142, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F142"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F142, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F142"), "!=", 0));
		featureAttrAtribute1.put("root4_F143", VariableFactory.enumerated("root4_F143Atribute1", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F143"), "!=", 0));
		featureAttrAtribute0.put("root4_F143", VariableFactory.enumerated("root4_F143Atribute0", new int[]{0, 58}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F143, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F143"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F143, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F143"), "!=", 0));
		featureAttrAtribute1.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute1", new int[]{0, 40}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F34"), "!=", 0));
		featureAttrAtribute0.put("root4_F34", VariableFactory.enumerated("root4_F34Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F34, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F34"), "!=", 0));
		featureAttrAtribute1.put("root4_F159", VariableFactory.enumerated("root4_F159Atribute1", new int[]{0, 68}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F159"), "!=", 0));
		featureAttrAtribute0.put("root4_F159", VariableFactory.enumerated("root4_F159Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F159, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F159"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F159, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F159"), "!=", 0));
		featureAttrAtribute1.put("root4_F106", VariableFactory.enumerated("root4_F106Atribute1", new int[]{0, 27}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F106"), "!=", 0));
		featureAttrAtribute0.put("root4_F106", VariableFactory.enumerated("root4_F106Atribute0", new int[]{0, 28}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F106, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F106"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F106, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F106"), "!=", 0));
		featureAttrAtribute1.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute1", new int[]{0, 99}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F36"), "!=", 0));
		featureAttrAtribute0.put("root4_F36", VariableFactory.enumerated("root4_F36Atribute0", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F36, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F36"), "!=", 0));
		featureAttrAtribute1.put("root4_F37", VariableFactory.enumerated("root4_F37Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F37"), "!=", 0));
		featureAttrAtribute0.put("root4_F37", VariableFactory.enumerated("root4_F37Atribute0", new int[]{0, 37}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F37"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F37, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F37"), "!=", 0));
		featureAttrAtribute1.put("root4_F70", VariableFactory.enumerated("root4_F70Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F70"), "!=", 0));
		featureAttrAtribute0.put("root4_F70", VariableFactory.enumerated("root4_F70Atribute0", new int[]{0, 93}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F70"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F70, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F70"), "!=", 0));
		featureAttrAtribute1.put("root4_F71", VariableFactory.enumerated("root4_F71Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F71"), "!=", 0));
		featureAttrAtribute0.put("root4_F71", VariableFactory.enumerated("root4_F71Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F71"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F71, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F71"), "!=", 0));
		featureAttrAtribute1.put("root4_F72", VariableFactory.enumerated("root4_F72Atribute1", new int[]{0, 95}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F72"), "!=", 0));
		featureAttrAtribute0.put("root4_F72", VariableFactory.enumerated("root4_F72Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F72"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F72, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F72"), "!=", 0));
		featureAttrAtribute1.put("root4_F73", VariableFactory.enumerated("root4_F73Atribute1", new int[]{0, 33}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F73"), "!=", 0));
		featureAttrAtribute0.put("root4_F73", VariableFactory.enumerated("root4_F73Atribute0", new int[]{0, 73}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F73"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F73, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F73"), "!=", 0));
		featureAttrAtribute1.put("root4_F74", VariableFactory.enumerated("root4_F74Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F74"), "!=", 0));
		featureAttrAtribute0.put("root4_F74", VariableFactory.enumerated("root4_F74Atribute0", new int[]{0, 60}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F74"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F74, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F74"), "!=", 0));
		featureAttrAtribute1.put("root4_F75", VariableFactory.enumerated("root4_F75Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F75"), "!=", 0));
		featureAttrAtribute0.put("root4_F75", VariableFactory.enumerated("root4_F75Atribute0", new int[]{0, 6}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F75"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F75, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F75"), "!=", 0));
		featureAttrAtribute1.put("root4_F144", VariableFactory.enumerated("root4_F144Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F144"), "!=", 0));
		featureAttrAtribute0.put("root4_F144", VariableFactory.enumerated("root4_F144Atribute0", new int[]{0, 83}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F144, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F144"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F144, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F144"), "!=", 0));
		featureAttrAtribute1.put("root4_F145", VariableFactory.enumerated("root4_F145Atribute1", new int[]{0, 1}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F145"), "!=", 0));
		featureAttrAtribute0.put("root4_F145", VariableFactory.enumerated("root4_F145Atribute0", new int[]{0, 82}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F145, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F145"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F145, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F145"), "!=", 0));
		featureAttrAtribute1.put("root4_F146", VariableFactory.enumerated("root4_F146Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F146"), "!=", 0));
		featureAttrAtribute0.put("root4_F146", VariableFactory.enumerated("root4_F146Atribute0", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F146, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F146"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F146, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F146"), "!=", 0));
		featureAttrAtribute1.put("root4_F147", VariableFactory.enumerated("root4_F147Atribute1", new int[]{0, 12}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F147"), "!=", 0));
		featureAttrAtribute0.put("root4_F147", VariableFactory.enumerated("root4_F147Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F147, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F147"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F147, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F147"), "!=", 0));
		featureAttrAtribute1.put("root4_F148", VariableFactory.enumerated("root4_F148Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F148"), "!=", 0));
		featureAttrAtribute0.put("root4_F148", VariableFactory.enumerated("root4_F148Atribute0", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F148, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F148"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F148, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F148"), "!=", 0));
		featureAttrAtribute1.put("root4_F149", VariableFactory.enumerated("root4_F149Atribute1", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F149"), "!=", 0));
		featureAttrAtribute0.put("root4_F149", VariableFactory.enumerated("root4_F149Atribute0", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F149, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F149"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F149, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F149"), "!=", 0));
		featureAttrAtribute1.put("root4_F150", VariableFactory.enumerated("root4_F150Atribute1", new int[]{0, 10}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F150"), "!=", 0));
		featureAttrAtribute0.put("root4_F150", VariableFactory.enumerated("root4_F150Atribute0", new int[]{0, 72}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F150, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F150"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F150, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F150"), "!=", 0));
		featureAttrAtribute1.put("root4_F151", VariableFactory.enumerated("root4_F151Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F151"), "!=", 0));
		featureAttrAtribute0.put("root4_F151", VariableFactory.enumerated("root4_F151Atribute0", new int[]{0, 41}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F151, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F151"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F151, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F151"), "!=", 0));
		featureAttrAtribute1.put("root4_F152", VariableFactory.enumerated("root4_F152Atribute1", new int[]{0, 70}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F152"), "!=", 0));
		featureAttrAtribute0.put("root4_F152", VariableFactory.enumerated("root4_F152Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F152, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F152"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F152, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F152"), "!=", 0));
		featureAttrAtribute1.put("root4_F77", VariableFactory.enumerated("root4_F77Atribute1", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F77"), "!=", 0));
		featureAttrAtribute0.put("root4_F77", VariableFactory.enumerated("root4_F77Atribute0", new int[]{0, 85}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F77"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F77, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F77"), "!=", 0));
		featureAttrAtribute1.put("root4_F107", VariableFactory.enumerated("root4_F107Atribute1", new int[]{0, 79}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F107"), "!=", 0));
		featureAttrAtribute0.put("root4_F107", VariableFactory.enumerated("root4_F107Atribute0", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F107, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F107"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F107, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F107"), "!=", 0));
		featureAttrAtribute1.put("root4_F108", VariableFactory.enumerated("root4_F108Atribute1", new int[]{0, 91}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F108"), "!=", 0));
		featureAttrAtribute0.put("root4_F108", VariableFactory.enumerated("root4_F108Atribute0", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F108, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F108"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F108, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F108"), "!=", 0));
		featureAttrAtribute1.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute1", new int[]{0, 67}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F39"), "!=", 0));
		featureAttrAtribute0.put("root4_F39", VariableFactory.enumerated("root4_F39Atribute0", new int[]{0, 81}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F39, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F39"), "!=", 0));
		featureAttrAtribute1.put("root4_F40", VariableFactory.enumerated("root4_F40Atribute1", new int[]{0, 24}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F40"), "!=", 0));
		featureAttrAtribute0.put("root4_F40", VariableFactory.enumerated("root4_F40Atribute0", new int[]{0, 90}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F40"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F40, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F40"), "!=", 0));
		featureAttrAtribute1.put("root4_F122", VariableFactory.enumerated("root4_F122Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F122"), "!=", 0));
		featureAttrAtribute0.put("root4_F122", VariableFactory.enumerated("root4_F122Atribute0", new int[]{0, 13}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F122, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F122"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F122, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F122"), "!=", 0));
		featureAttrAtribute1.put("root4_F153", VariableFactory.enumerated("root4_F153Atribute1", new int[]{0, 21}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F153"), "!=", 0));
		featureAttrAtribute0.put("root4_F153", VariableFactory.enumerated("root4_F153Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F153, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F153"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F153, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F153"), "!=", 0));
		featureAttrAtribute1.put("root4_F154", VariableFactory.enumerated("root4_F154Atribute1", new int[]{0, 80}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F154"), "!=", 0));
		featureAttrAtribute0.put("root4_F154", VariableFactory.enumerated("root4_F154Atribute0", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F154, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F154"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F154, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F154"), "!=", 0));
		featureAttrAtribute1.put("root4_F155", VariableFactory.enumerated("root4_F155Atribute1", new int[]{0, 94}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F155"), "!=", 0));
		featureAttrAtribute0.put("root4_F155", VariableFactory.enumerated("root4_F155Atribute0", new int[]{0, 34}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F155, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F155"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F155, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F155"), "!=", 0));
		featureAttrAtribute1.put("root4_F124", VariableFactory.enumerated("root4_F124Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F124"), "!=", 0));
		featureAttrAtribute0.put("root4_F124", VariableFactory.enumerated("root4_F124Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F124, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F124"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F124, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F124"), "!=", 0));
		featureAttrAtribute1.put("root4_F125", VariableFactory.enumerated("root4_F125Atribute1", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F125"), "!=", 0));
		featureAttrAtribute0.put("root4_F125", VariableFactory.enumerated("root4_F125Atribute0", new int[]{0, 46}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F125, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F125"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F125, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F125"), "!=", 0));
		featureAttrAtribute1.put("root4_F126", VariableFactory.enumerated("root4_F126Atribute1", new int[]{0, 30}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F126"), "!=", 0));
		featureAttrAtribute0.put("root4_F126", VariableFactory.enumerated("root4_F126Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F126, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F126"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F126, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F126"), "!=", 0));
		featureAttrAtribute1.put("root4_F127", VariableFactory.enumerated("root4_F127Atribute1", new int[]{0, 2}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F127"), "!=", 0));
		featureAttrAtribute0.put("root4_F127", VariableFactory.enumerated("root4_F127Atribute0", new int[]{0, 14}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F127, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F127"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F127, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F127"), "!=", 0));
		featureAttrAtribute1.put("root4_F137", VariableFactory.enumerated("root4_F137Atribute1", new int[]{0, 55}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F137"), "!=", 0));
		featureAttrAtribute0.put("root4_F137", VariableFactory.enumerated("root4_F137Atribute0", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F137, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F137"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F137, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F137"), "!=", 0));
		featureAttrAtribute1.put("root4_F138", VariableFactory.enumerated("root4_F138Atribute1", new int[]{0, 23}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F138"), "!=", 0));
		featureAttrAtribute0.put("root4_F138", VariableFactory.enumerated("root4_F138Atribute0", new int[]{0, 66}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F138, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F138"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F138, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F138"), "!=", 0));
		featureAttrAtribute1.put("root4_F139", VariableFactory.enumerated("root4_F139Atribute1", new int[]{0, 44}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F139"), "!=", 0));
		featureAttrAtribute0.put("root4_F139", VariableFactory.enumerated("root4_F139Atribute0", new int[]{0, 87}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F139, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F139"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F139, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F139"), "!=", 0));
		featureAttrAtribute1.put("root4_F129", VariableFactory.enumerated("root4_F129Atribute1", new int[]{0, 9}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F129"), "!=", 0));
		featureAttrAtribute0.put("root4_F129", VariableFactory.enumerated("root4_F129Atribute0", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F129, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F129"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F129, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F129"), "!=", 0));
		featureAttrAtribute1.put("root4_F97", VariableFactory.enumerated("root4_F97Atribute1", new int[]{0, 76}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F97"), "!=", 0));
		featureAttrAtribute0.put("root4_F97", VariableFactory.enumerated("root4_F97Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F97, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F97"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F97, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F97"), "!=", 0));
		featureAttrAtribute1.put("root4_F98", VariableFactory.enumerated("root4_F98Atribute1", new int[]{0, 78}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F98"), "!=", 0));
		featureAttrAtribute0.put("root4_F98", VariableFactory.enumerated("root4_F98Atribute0", new int[]{0, 8}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F98, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F98"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F98, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F98"), "!=", 0));
		featureAttrAtribute1.put("root4_F100", VariableFactory.enumerated("root4_F100Atribute1", new int[]{0, 63}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F100"), "!=", 0));
		featureAttrAtribute0.put("root4_F100", VariableFactory.enumerated("root4_F100Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F100, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F100"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F100, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F100"), "!=", 0));
		featureAttrAtribute1.put("root4_F101", VariableFactory.enumerated("root4_F101Atribute1", new int[]{0, 17}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F101"), "!=", 0));
		featureAttrAtribute0.put("root4_F101", VariableFactory.enumerated("root4_F101Atribute0", new int[]{0, 57}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F101, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F101"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F101, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F101"), "!=", 0));
		featureAttrAtribute1.put("root4_F102", VariableFactory.enumerated("root4_F102Atribute1", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F102"), "!=", 0));
		featureAttrAtribute0.put("root4_F102", VariableFactory.enumerated("root4_F102Atribute0", new int[]{0, 50}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F102, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F102"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F102, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F102"), "!=", 0));
		featureAttrAtribute1.put("root4_F103", VariableFactory.enumerated("root4_F103Atribute1", new int[]{0, 100}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F103"), "!=", 0));
		featureAttrAtribute0.put("root4_F103", VariableFactory.enumerated("root4_F103Atribute0", new int[]{0, 31}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F103, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F103"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F103, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F103"), "!=", 0));
		featureAttrAtribute1.put("root4_F104", VariableFactory.enumerated("root4_F104Atribute1", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F104"), "!=", 0));
		featureAttrAtribute0.put("root4_F104", VariableFactory.enumerated("root4_F104Atribute0", new int[]{0, 86}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F104, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F104"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F104, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F104"), "!=", 0));
		featureAttrAtribute1.put("root4_F30", VariableFactory.enumerated("root4_F30Atribute1", new int[]{0, 47}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F30"), "!=", 0));
		featureAttrAtribute0.put("root4_F30", VariableFactory.enumerated("root4_F30Atribute0", new int[]{0, 3}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F30"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F30, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F30"), "!=", 0));
		featureAttrAtribute1.put("root4_F96", VariableFactory.enumerated("root4_F96Atribute1", new int[]{0, 19}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute1.get("root4_F96"), "!=", 0));
		featureAttrAtribute0.put("root4_F96", VariableFactory.enumerated("root4_F96Atribute0", new int[]{0, 18}, solver));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F96, "=", 0), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F96"), "=", 0));
		LogicalConstraintFactory.ifThen(IntConstraintFactory.arithm(root4_F96, "=", 1), IntConstraintFactory.arithm(featureAttrAtribute0.get("root4_F96"), "!=", 0));
	}
	
	private static IntVar[] getFeatureVars(int contFeatures){
		IntVar[] featureVars = new IntVar[contFeatures];
		Variable[] varsSolver = solver.getVars();
		int index = 0;
		for(int i = 0; i < varsSolver.length; i++) {
			Variable current = varsSolver[i];
			if(current.getName().startsWith("feature_")) {
				featureVars[index] = (IntVar) current;
				index++;
			}
		}
		
		return featureVars;
	}
}

